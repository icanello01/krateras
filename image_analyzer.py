import google.generativeai as genai
from PIL import Image
import io
from typing import Dict, Any
import streamlit as st

def verificar_qualidade_imagem(image_bytes: bytes) -> Dict[str, Any]:
    """
    Verifica se a imagem tem qualidade suficiente para an√°lise.
    """
    try:
        img = Image.open(io.BytesIO(image_bytes))
        width, height = img.size
        
        problemas = []
        status = True
        
        # Verifica dimens√µes
        if width < 200 or height < 200:
            problemas.append("Resolu√ß√£o muito baixa")
            status = False
            
        # Verifica tamanho do arquivo
        if len(image_bytes) < 10000:  # 10KB
            problemas.append("Tamanho do arquivo muito pequeno")
            status = False
            
        # Verifica propor√ß√£o
        if width/height > 3 or height/width > 3:
            problemas.append("Propor√ß√£o da imagem inadequada")
            status = False
            
        return {
            "status": status,
            "width": width,
            "height": height,
            "size_kb": len(image_bytes)/1024,
            "problemas": problemas
        }
    except Exception as e:
        return {
            "status": False,
            "problemas": [f"Erro ao processar imagem: {str(e)}"]
        }

def analisar_imagem_com_gemini(image_bytes: bytes, api_key: str) -> Dict[str, Any]:
    """
    Analisa uma imagem usando o modelo Gemini Vision Pro.
    """
    try:
        # Configura o modelo
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-pro-vision')
        
        # Prepara a imagem
        image_parts = [
            {
                "mime_type": "image/jpeg",
                "data": image_bytes
            }
        ]
        
        # Prompt para an√°lise
        prompt = """
        Voc√™ √© um especialista em an√°lise de problemas em vias p√∫blicas.
        Analise a imagem fornecida e forne√ßa uma an√°lise t√©cnica detalhada seguindo EXATAMENTE este formato:

        DESCRI√á√ÉO F√çSICA:
        - Tamanho aparente do buraco:
        - Forma e caracter√≠sticas:
        - Profundidade estimada:
        - Condi√ß√µes do asfalto ao redor:

        AVALIA√á√ÉO DE SEVERIDADE:
        - N√≠vel: [BAIXO/M√âDIO/ALTO/CR√çTICO]
        - Justificativa:

        RISCOS IDENTIFICADOS:
        - Para ve√≠culos:
        - Para pedestres/ciclistas:
        - Outros riscos:

        CONDI√á√ïES AGRAVANTES:
        - Problemas adicionais:
        - Fatores de risco:

        RECOMENDA√á√ïES:
        - Tipo de interven√ß√£o:
        - Urg√™ncia do reparo:
        - Medidas tempor√°rias:
        """

        # Log para debug
        st.write("üîÑ Iniciando an√°lise com Gemini Vision...")
        
        # Gera a an√°lise
        response = model.generate_content([prompt, image_parts[0]], stream=False)
        
        # Log do status da resposta
        st.write(f"üìä Status da resposta: {response.prompt_feedback}")
        
        if not response.text:
            st.error("‚ùå A resposta da API n√£o cont√©m texto.")
            return {
                "status": "error",
                "analise_visual": "‚ùå N√£o foi poss√≠vel gerar uma an√°lise para esta imagem (resposta vazia)."
            }

        # Log do sucesso
        st.write("‚úÖ An√°lise conclu√≠da com sucesso!")
        
        return {
            "status": "success",
            "analise_visual": response.text.strip()
        }

    except Exception as e:
        st.error(f"‚ùå Erro detalhado na an√°lise: {str(e)}")
        return {
            "status": "error",
            "analise_visual": f"‚ùå Erro ao analisar imagem com IA: {str(e)}"
        }

def extrair_nivel_severidade(analise: str) -> str:
    """
    Extrai o n√≠vel de severidade da an√°lise.
    """
    try:
        if "AVALIA√á√ÉO DE SEVERIDADE:" in analise:
            linhas = analise.split("\n")
            for linha in linhas:
                if "N√≠vel:" in linha:
                    nivel = linha.split("[")[1].split("]")[0]
                    return nivel
    except:
        pass
    return "INDEFINIDO"

def get_severity_color(nivel: str) -> str:
    """
    Retorna a cor correspondente ao n√≠vel de severidade.
    """
    cores = {
        "BAIXO": "#28a745",    # Verde
        "M√âDIO": "#ffc107",    # Amarelo
        "ALTO": "#dc3545",     # Vermelho
        "CR√çTICO": "#6c1420",  # Vermelho escuro
        "INDEFINIDO": "#6c757d" # Cinza
    }
    return cores.get(nivel, cores["INDEFINIDO"])

def processar_analise_imagem(imagem_data: Dict[str, Any]) -> None:
    """
    Processa e exibe a an√°lise de imagem.
    """
    if not imagem_data or 'bytes' not in imagem_data:
        st.error("‚ùå Nenhuma imagem fornecida para an√°lise.")
        return

    # Verifica se temos a chave da API
    if "GOOGLE_API_KEY" not in st.secrets:
        st.error("‚ùå Chave da API Google (GOOGLE_API_KEY) n√£o encontrada nos secrets.")
        return
        
    # Verifica qualidade da imagem
    qualidade = verificar_qualidade_imagem(imagem_data['bytes'])
    if not qualidade["status"]:
        st.warning("‚ö†Ô∏è Aviso sobre a qualidade da imagem:")
        for problema in qualidade["problemas"]:
            st.write(f"- {problema}")
        
        if st.button("Continuar mesmo assim"):
            st.warning("Prosseguindo com a an√°lise, mas os resultados podem n√£o ser ideais.")
        else:
            st.stop()

    # An√°lise da imagem
    with st.spinner("üîç Analisando imagem com IA..."):
        try:
            # Log do tamanho da imagem
            st.write(f"üì¶ Tamanho da imagem: {len(imagem_data['bytes'])/1024:.2f} KB")
            
            resultado_analise = analisar_imagem_com_gemini(
                image_bytes=imagem_data['bytes'],
                api_key=st.secrets["GOOGLE_API_KEY"]
            )

            if resultado_analise["status"] == "success":
                # Extrai o n√≠vel de severidade
                nivel = extrair_nivel_severidade(resultado_analise["analise_visual"])
                cor = get_severity_color(nivel)

                # Exibe o resultado
                st.success("‚úÖ An√°lise de imagem conclu√≠da!")
                
                # Cabe√ßalho com n√≠vel de severidade
                st.markdown(
                    f"""
                    <div style='padding: 10px; border-radius: 5px; background-color: {cor}; color: white;'>
                        <h3 style='margin: 0; text-align: center;'>N√≠vel de Severidade: {nivel}</h3>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

                # An√°lise detalhada
                st.markdown("### An√°lise T√©cnica Detalhada")
                st.markdown(resultado_analise["analise_visual"])

                # Salva na sess√£o
                if 'denuncia_completa' not in st.session_state:
                    st.session_state.denuncia_completa = {}
                st.session_state.denuncia_completa['analise_visual_ia'] = resultado_analise
                st.session_state.denuncia_completa['nivel_severidade'] = nivel

            else:
                st.error(resultado_analise["analise_visual"])
                # Adiciona ao estado da sess√£o mesmo em caso de erro
                if 'denuncia_completa' not in st.session_state:
                    st.session_state.denuncia_completa = {}
                st.session_state.denuncia_completa['analise_visual_ia'] = resultado_analise

        except Exception as e:
            error_msg = f"‚ùå Erro durante a an√°lise: {str(e)}"
            st.error(error_msg)
            # Registra o erro no estado da sess√£o
            if 'denuncia_completa' not in st.session_state:
                st.session_state.denuncia_completa = {}
            st.session_state.denuncia_completa['analise_visual_ia'] = {
                "status": "error",
                "analise_visual": error_msg
            }

def mostrar_feedback_analise(nivel: str) -> None:
    """
    Mostra feedback e recomenda√ß√µes baseadas no n√≠vel de severidade.
    """
    feedback = {
        "BAIXO": {
            "icon": "‚úÖ",
            "mensagem": "O problema identificado √© de baixa severidade, mas ainda requer aten√ß√£o.",
            "prazo": "Recomenda-se resolu√ß√£o em at√© 30 dias."
        },
        "M√âDIO": {
            "icon": "‚ö†Ô∏è",
            "mensagem": "O problema requer aten√ß√£o moderada.",
            "prazo": "Recomenda-se resolu√ß√£o em at√© 15 dias."
        },
        "ALTO": {
            "icon": "üö®",
            "mensagem": "O problema requer aten√ß√£o urgente!",
            "prazo": "Recomenda-se resolu√ß√£o em at√© 7 dias."
        },
        "CR√çTICO": {
            "icon": "üÜò",
            "mensagem": "Situa√ß√£o cr√≠tica que requer a√ß√£o imediata!",
            "prazo": "Recomenda-se resolu√ß√£o em 24 horas."
        }
    }

    info = feedback.get(nivel, {
        "icon": "‚ÑπÔ∏è",
        "mensagem": "N√≠vel de severidade n√£o determinado.",
        "prazo": "Prazo n√£o definido."
    })

    st.info(f"{info['icon']} {info['mensagem']}\n\n{info['prazo']}")

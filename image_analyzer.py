import base64
import time
import logging
import google.generativeai as genai
from PIL import Image
import io
from typing import Dict, Any, Optional
import streamlit as st # Mantido aqui por causa de st.secrets e st.error/warning em analyze_image
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__) # Correto: usar __name__

class ImageAnalyzer:
    """
    Classe principal para an√°lise de imagens de buracos em vias p√∫blicas.
    """
    
    def __init__(self):
        self.SEVERITY_LEVELS = ["BAIXO", "M√âDIO", "ALTO", "CR√çTICO"]
        self.SEVERITY_COLORS = {
            "BAIXO": "#28a745",    # Verde
            "M√âDIO": "#ffc107",    # Amarelo
            "ALTO": "#dc3545",     # Vermelho
            "CR√çTICO": "#6c1420",  # Vermelho escuro
            "INDEFINIDO": "#6c757d" # Cinza
        }
        self.FEEDBACK_INFO = {
            "BAIXO": {
                "icon": "‚úÖ",
                "mensagem": "O problema identificado √© de baixa severidade, mas ainda requer aten√ß√£o.",
                "prazo": "Recomenda-se resolu√ß√£o em at√© 30 dias."
            },
            "M√âDIO": {
                "icon": "‚ö†Ô∏è",
                "mensagem": "O problema requer aten√ß√£o moderada.",
                "prazo": "Recomenda-se resolu√ß√£o em at√© 15 dias."
            },
            "ALTO": {
                "icon": "üö®",
                "mensagem": "O problema requer aten√ß√£o urgente!",
                "prazo": "Recomenda-se resolu√ß√£o em at√© 7 dias."
            },
            "CR√çTICO": {
                "icon": "üÜò",
                "mensagem": "Situa√ß√£o cr√≠tica que requer a√ß√£o imediata!",
                "prazo": "Recomenda-se resolu√ß√£o em 24 horas."
            }
        }
        # Idealmente, a API Key seria passada aqui ou configurada uma vez.
        # Para manter a compatibilidade com o uso de st.secrets dentro dos m√©todos,
        # a configura√ß√£o do genai √© feita em analyze_image_with_gemini.

    def check_image_quality(self, image_bytes: bytes) -> Dict[str, Any]:
        """
        Verifica se a imagem tem qualidade suficiente para an√°lise.
        """
        try:
            img = Image.open(io.BytesIO(image_bytes))
            width, height = img.size
            
            problemas = []
            status = True
            
            if width < 200 or height < 200:
                problemas.append("Resolu√ß√£o muito baixa (m√≠nimo 200x200 pixels)")
                status = False
            
            tamanho_kb = len(image_bytes) / 1024.0 # Usar float para divis√£o
            if tamanho_kb < 10:
                problemas.append("Tamanho do arquivo muito pequeno (m√≠nimo 10KB)")
                status = False
            elif tamanho_kb > 20000:
                problemas.append("Tamanho do arquivo muito grande (m√°ximo 20MB)")
                status = False
            
            if max(width, height) / min(width, height) > 3 and min(width, height) > 0 : # Evitar divis√£o por zero
                problemas.append("Propor√ß√£o da imagem inadequada (m√°ximo 3:1 ou 1:3)")
                status = False
            
            return {
                "status": status,
                "width": width,
                "height": height,
                "size_kb": round(tamanho_kb, 2),
                "problemas": problemas
            }
        except Exception as e:
            logger.error(f"Erro ao verificar qualidade da imagem: {str(e)}")
            return {
                "status": False,
                "problemas": [f"Erro ao processar imagem: {str(e)}"],
                "width": 0, "height": 0, "size_kb": 0 # Adicionar valores padr√£o
            }

    def analyze_image_with_gemini(self, image_bytes: bytes, api_key: str) -> Dict[str, Any]:
        """
        Analisa uma imagem usando o modelo Gemini.
        """
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel('gemini-1.5-flash-latest') # Mantido conforme seu c√≥digo
            
            image_pil = Image.open(io.BytesIO(image_bytes)) # Renomeado para evitar confus√£o
            if image_pil.mode != 'RGB':
                image_pil = image_pil.convert('RGB')
            
            # O SDK do Python para Gemini pode aceitar objetos PIL.Image diretamente.
            # A convers√£o para bytes e base64 √© mais comum para APIs REST diretas
            # ou se o SDK exigir explicitamente. Vamos tentar com PIL.Image diretamente
            # para simplificar, mas manteremos sua l√≥gica de base64 se necess√°rio.
            #
            # Para o SDK google-generativeai, a passagem de `image_pil` diretamente
            # em `model.generate_content([prompt, image_pil])` √© geralmente suportada.
            # No entanto, seu c√≥digo usa um formato `ContentDict` mais expl√≠cito, que espera `inline_data`.
            # Vamos manter sua abordagem com `inline_data` por enquanto, pois j√° est√° estruturada.

            img_byte_arr_jpeg = io.BytesIO()
            image_pil.save(img_byte_arr_jpeg, format='JPEG')
            img_byte_arr_val = img_byte_arr_jpeg.getvalue()

            prompt = """
            Voc√™ √© um especialista em an√°lise de problemas em vias p√∫blicas.
            Analise a imagem fornecida e forne√ßa uma an√°lise t√©cnica detalhada sobre o buraco ou defeito na via.
            
            Siga EXATAMENTE este formato na sua resposta:

            DESCRI√á√ÉO F√çSICA:
            - Tamanho aparente do buraco: [Descreva o tamanho, por exemplo, pequeno, m√©dio, grande, ou dimens√µes aproximadas se vis√≠vel]
            - Forma e caracter√≠sticas: [Descreva a forma, por exemplo, circular, irregular, bordas afiadas, etc.]
            - Profundidade estimada: [Descreva a profundidade, por exemplo, rasa, moderada, profunda, ou estimativa em cm/polegadas se poss√≠vel]
            - Condi√ß√µes do asfalto ao redor: [Descreva o asfalto, por exemplo, rachado, desgastado, intacto, etc.]

            AVALIA√á√ÉO DE SEVERIDADE:
            - N√≠vel: [BAIXO/M√âDIO/ALTO/CR√çTICO]
            - Justificativa: [Explique o porqu√™ do n√≠vel de severidade escolhido]

            RISCOS IDENTIFICADOS:
            - Para ve√≠culos: [Descreva os riscos, por exemplo, danos a pneus/suspens√£o, perda de controle]
            - Para pedestres/ciclistas: [Descreva os riscos, por exemplo, trope√ßos, quedas, desvio para tr√°fego]
            - Outros riscos: [Se houver, por exemplo, ac√∫mulo de √°gua, etc.]

            CONDI√á√ïES AGRAVANTES:
            - Problemas adicionais: [Se houver, por exemplo, m√∫ltiplos buracos, m√° ilumina√ß√£o na √°rea, etc.]
            - Fatores de risco: [Se houver, por exemplo, tr√°fego intenso, √°rea escolar, curva perigosa]

            RECOMENDA√á√ïES:
            - Tipo de interven√ß√£o: [Sugira o tipo de reparo, por exemplo, tapa-buraco, recapeamento parcial, etc.]
            - Urg√™ncia do reparo: [Com base na severidade, por exemplo, imediato, em poucos dias, planejado]
            - Medidas tempor√°rias: [Se aplic√°vel, por exemplo, sinaliza√ß√£o, cones, placa met√°lica]
            """
            # Removido o log "Iniciando an√°lise com Gemini Pro Vision..." daqui, pois √© mais gen√©rico.
            # O nome do modelo j√° est√° definido.

            generation_config = {
                "temperature": 0.4, # Reduzir um pouco para respostas mais factuais e menos "criativas"
                "top_p": 1.0,
                "top_k": 32, # Ajustado ligeiramente
                "max_output_tokens": 2048,
            }
            
            safety_settings = [
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"}
            ]
            
            max_retries = 3
            for attempt in range(max_retries):
                logger.info(f"Tentativa {attempt + 1} de {max_retries} para an√°lise com Gemini.")
                try:
                    parts = [
                        {"text": prompt},
                        {
                            "inline_data": {
                                "mime_type": "image/jpeg",
                                "data": base64.b64encode(img_byte_arr_val).decode('utf-8')
                            }
                        }
                    ]
                    
                    response = model.generate_content(
                        parts, # Passando a lista de partes diretamente
                        generation_config=generation_config,
                        safety_settings=safety_settings,
                        stream=False
                    )
                    
                    logger.info(f"Resposta recebida da API Gemini na tentativa {attempt + 1}.")

                    # Logar prompt_feedback se existir, pode indicar bloqueios ou outros problemas
                    if hasattr(response, 'prompt_feedback') and response.prompt_feedback:
                        logger.warning(f"Tentativa {attempt + 1}: Feedback do prompt: {response.prompt_feedback}")
                        # Se houver um bloqueio, o texto geralmente estar√° vazio
                        if response.prompt_feedback.block_reason:
                             logger.error(f"Tentativa {attempt + 1}: Conte√∫do bloqueado. Raz√£o: {response.prompt_feedback.block_reason}")
                             # Continua para a pr√≥xima tentativa, a menos que seja a √∫ltima
                             if attempt == max_retries - 1:
                                 raise ValueError(f"Conte√∫do bloqueado pela API ap√≥s {max_retries} tentativas. Raz√£o: {response.prompt_feedback.block_reason}")
                             time.sleep(2 + attempt) # Backoff incremental
                             continue


                    text_content = None
                    if hasattr(response, 'text') and response.text is not None:
                        text_content = response.text.strip()

                    if text_content:
                        logger.info(f"An√°lise de texto obtida com sucesso na tentativa {attempt + 1}.")
                        return {
                            "status": "success",
                            "analise_visual": text_content,
                            "timestamp": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                        }
                    else:
                        logger.warning(f"Resposta de texto vazia ou inv√°lida na tentativa {attempt + 1}.")
                        # N√£o levanta erro aqui ainda, deixa o loop de retry continuar
                
                except Exception as e:
                    logger.error(f"Erro durante a chamada da API Gemini na tentativa {attempt + 1}: {str(e)}")
                    # Se for um erro de cota (geralmente 429), pode ser √∫til n√£o tentar novamente imediatamente
                    # ou ter uma estrat√©gia de backoff mais longa. Por ora, o retry simples continua.
                
                # Se chegou aqui, a tentativa atual falhou em obter texto √∫til ou teve uma exce√ß√£o n√£o fatal
                if attempt < max_retries - 1:
                    logger.info(f"Aguardando para a pr√≥xima tentativa...")
                    time.sleep(2 + attempt) # Backoff incremental simples
                else: # √öltima tentativa
                    logger.error(f"Todas as {max_retries} tentativas de an√°lise de imagem falharam em obter uma resposta v√°lida.")
                    # Levanta o erro para ser pego pelo except externo da fun√ß√£o.
                    # Se o √∫ltimo erro foi uma exce√ß√£o espec√≠fica (e n√£o apenas texto vazio), e foi re-levantado,
                    # ele ser√° pego aqui. Se foi texto vazio, levantamos um novo ValueError.
                    # Para simplificar, vamos levantar um ValueError gen√©rico se sairmos do loop sem sucesso.
                    raise ValueError(f"Falha ao obter an√°lise da imagem ap√≥s {max_retries} tentativas.")

        except genai.types.BlockedPromptException as bpe: # Captura espec√≠fica de bloqueio, se n√£o pego antes
            logger.error(f"Erro fatal na an√°lise: Prompt bloqueado. {bpe}")
            return {
                "status": "error",
                "analise_visual": f"‚ùå Erro: A solicita√ß√£o foi bloqueada pela pol√≠tica de seguran√ßa. {bpe}",
                "timestamp": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            }
        except Exception as e:
            logger.error(f"Erro fatal e inesperado na an√°lise de imagem: {str(e)}")
            return {
                "status": "error",
                "analise_visual": f"‚ùå Erro inesperado ao analisar imagem com IA: {str(e)}",
                "timestamp": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            }

    def extract_severity_level(self, analise: str) -> str:
        try:
            if not isinstance(analise, str): # Checagem de tipo
                logger.warning("Tentativa de extrair severidade de um valor n√£o string.")
                return "INDEFINIDO"
            
            # Busca mais robusta, case-insensitive e lidando com espa√ßos
            for linha in analise.splitlines():
                if "n√≠vel:" in linha.lower(): # Case-insensitive
                    partes = linha.split(":")
                    if len(partes) > 1:
                        nivel_texto = partes[1].strip().upper() # Pega o texto ap√≥s "N√≠vel:", limpa e capitaliza
                        for nivel_valido in self.SEVERITY_LEVELS:
                            if nivel_valido == nivel_texto: # Compara√ß√£o exata ap√≥s normaliza√ß√£o
                                return nivel_valido
                        # Se encontrar "N√≠vel:" mas o valor n√£o for um dos v√°lidos, loga
                        logger.warning(f"N√≠vel de severidade encontrado ('{nivel_texto}') mas n√£o reconhecido. Linha: '{linha}'")
                        return "INDEFINIDO" # Ou continua procurando, dependendo da l√≥gica desejada
            logger.warning(f"Padr√£o 'N√≠vel:' n√£o encontrado na an√°lise para extra√ß√£o de severidade.")
        except Exception as e:
            logger.error(f"Erro ao extrair n√≠vel de severidade: {str(e)}")
        return "INDEFINIDO"


    def get_severity_color(self, nivel: str) -> str:
        return self.SEVERITY_COLORS.get(nivel, self.SEVERITY_COLORS["INDEFINIDO"])

    def analyze_image(self, imagem_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        if not imagem_data or 'bytes' not in imagem_data:
            st.error("‚ùå Nenhuma imagem fornecida para an√°lise.")
            logger.warning("analyze_image chamada sem imagem_data ou sem 'bytes'.")
            return None

        if "GOOGLE_API_KEY" not in st.secrets:
            st.error("‚ùå Chave da API Google (GOOGLE_API_KEY) n√£o configurada nos segredos.")
            logger.error("GOOGLE_API_KEY n√£o encontrada nos segredos do Streamlit.")
            return {"erro": "Chave da API n√£o configurada."} # Retornar dicion√°rio de erro
            
        qualidade = self.check_image_quality(imagem_data['bytes'])
        logger.info(f"Qualidade da imagem: Status={qualidade['status']}, Problemas={qualidade.get('problemas', [])}")

        if not qualidade["status"]:
            st.warning("‚ö†Ô∏è Aviso sobre a qualidade da imagem:")
            for problema in qualidade["problemas"]:
                st.write(f"- {problema}")
            
            # Usar uma chave √∫nica para o bot√£o para evitar problemas de estado do Streamlit
            if not st.button("Continuar com a an√°lise mesmo assim", key="continuar_qualidade_ruim"):
                logger.info("Usu√°rio optou por n√£o continuar devido √† qualidade da imagem.")
                return None 

            st.warning("Prosseguindo com a an√°lise, mas os resultados podem n√£o ser ideais.")

        with st.spinner("üîç Analisando imagem com IA... Por favor, aguarde."):
            try:
                logger.info(f"Iniciando an√°lise da imagem de {qualidade['size_kb']:.2f} KB com Gemini.")
                
                resultado_analise_gemini = self.analyze_image_with_gemini(
                    image_bytes=imagem_data['bytes'],
                    api_key=st.secrets["GOOGLE_API_KEY"]
                )

                if resultado_analise_gemini and resultado_analise_gemini.get("status") == "success":
                    analise_texto_visual = resultado_analise_gemini["analise_visual"]
                    nivel = self.extract_severity_level(analise_texto_visual)
                    cor = self.get_severity_color(nivel)
                    logger.info(f"An√°lise bem-sucedida. N√≠vel de severidade extra√≠do: {nivel}")

                    st.success("‚úÖ An√°lise de imagem conclu√≠da!")
                    st.markdown(
                        f"""<div style='padding: 10px; border-radius: 5px; background-color: {cor}; color: white; text-align: center;'>
                            <h3 style='margin: 0;'>N√≠vel de Severidade: {nivel}</h3>
                        </div><br>""", unsafe_allow_html=True)
                    st.markdown("### An√°lise T√©cnica Detalhada")
                    st.markdown(analise_texto_visual) # Usar st.markdown para melhor formata√ß√£o

                    resultado_final = {
                        "analise_visual_ia": resultado_analise_gemini, # Cont√©m status, texto, timestamp
                        "nivel_severidade": nivel,
                        "cor_severidade": cor,
                        "qualidade_imagem": qualidade,
                        "timestamp_geral": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                    }
                    return resultado_final
                else:
                    # Erro vindo do analyze_image_with_gemini
                    erro_msg = resultado_analise_gemini.get("analise_visual", "Erro desconhecido na an√°lise com IA.")
                    st.error(f"Falha na an√°lise com IA: {erro_msg}")
                    logger.error(f"Falha reportada por analyze_image_with_gemini: {erro_msg}")
                    return {"erro": erro_msg}

            except Exception as e: # Captura exce√ß√µes que podem ocorrer em analyze_image, fora de with_gemini
                error_msg = f"‚ùå Erro inesperado durante o processo de an√°lise da imagem: {str(e)}"
                st.error(error_msg)
                logger.error(f"Erro no m√©todo analyze_image: {str(e)}", exc_info=True) # exc_info para traceback
                return {"erro": error_msg}

    def show_analysis_feedback(self, nivel: str) -> None:
        info = self.FEEDBACK_INFO.get(nivel) # N√£o precisa de valor padr√£o aqui se FEEDBACK_INFO cobre todos os SEVERITY_LEVELS + INDEFINIDO
        if not info: # Caso INDEFINIDO n√£o esteja em FEEDBACK_INFO
             info = {
                "icon": "‚ÑπÔ∏è",
                "mensagem": "N√≠vel de severidade n√£o determinado ou feedback n√£o dispon√≠vel.",
                "prazo": "Prazo n√£o definido."
            }
        st.info(f"{info['icon']} **{info['mensagem']}**\n\n*Prazo recomendado para resolu√ß√£o: {info['prazo']}*")


# Fun√ß√µes wrapper para uso externo
def processar_analise_imagem(imagem_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    analyzer = ImageAnalyzer()
    return analyzer.analyze_image(imagem_data)

def mostrar_feedback_analise(nivel: str) -> None:
    analyzer = ImageAnalyzer()
    analyzer.show_analysis_feedback(nivel)

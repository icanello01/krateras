import base64
import time
import logging
import google.generativeai as genai
from PIL import Image
import io
from typing import Dict, Any 
import streamlit as st 
from datetime import datetime
import textwrap # <--- IMPORTA√á√ÉO ADICIONADA

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ImageAnalyzer:
    """
    Classe principal para an√°lise de imagens de buracos em vias p√∫blicas.
    """
    
    def __init__(self):
        self.SEVERITY_LEVELS = ["BAIXO", "M√âDIO", "ALTO", "CR√çTICO"]
        self.SEVERITY_COLORS = {
            "BAIXO": "#28a745",    # Verde
            "M√âDIO": "#ffc107",    # Amarelo
            "ALTO": "#dc3545",     # Vermelho
            "CR√çTICO": "#6c1420",  # Vermelho escuro
            "INDEFINIDO": "#6c757d" # Cinza
        }
        self.FEEDBACK_INFO = {
            "BAIXO": {
                "icon": "‚úÖ",
                "mensagem": "O problema identificado √© de baixa severidade, mas ainda requer aten√ß√£o.",
                "prazo": "Recomenda-se resolu√ß√£o em at√© 30 dias."
            },
            "M√âDIO": {
                "icon": "‚ö†Ô∏è",
                "mensagem": "O problema requer aten√ß√£o moderada.",
                "prazo": "Recomenda-se resolu√ß√£o em at√© 15 dias."
            },
            "ALTO": {
                "icon": "üö®",
                "mensagem": "O problema requer aten√ß√£o urgente!",
                "prazo": "Recomenda-se resolu√ß√£o em at√© 7 dias."
            },
            "CR√çTICO": {
                "icon": "üÜò",
                "mensagem": "Situa√ß√£o cr√≠tica que requer a√ß√£o imediata!",
                "prazo": "Recomenda-se resolu√ß√£o em 24 horas."
            },
            "INDEFINIDO": { 
                "icon": "‚ÑπÔ∏è",
                "mensagem": "N√≠vel de severidade n√£o p√¥de ser determinado a partir da an√°lise visual.",
                "prazo": "Verifique manualmente e defina a urg√™ncia."
            }
        }

    def check_image_quality(self, image_bytes: bytes) -> Dict[str, Any]:
        """
        Verifica se a imagem tem qualidade suficiente para an√°lise.
        """
        try:
            img = Image.open(io.BytesIO(image_bytes))
            width, height = img.size
            
            problemas = []
            status = True
            
            if width < 200 or height < 200:
                problemas.append("Resolu√ß√£o muito baixa (m√≠nimo 200x200 pixels)")
                status = False
            
            tamanho_kb = len(image_bytes) / 1024.0
            if tamanho_kb < 10:
                problemas.append("Tamanho do arquivo muito pequeno (m√≠nimo 10KB)")
                status = False
            elif tamanho_kb > 20000: 
                problemas.append("Tamanho do arquivo muito grande (m√°ximo 20MB, recomendado < 4MB)")
                status = False 
            
            if width > 0 and height > 0: 
                if max(width, height) / min(width, height) > 3 :
                    problemas.append("Propor√ß√£o da imagem inadequada (m√°ximo 3:1 ou 1:3)")
                    status = False
            else:
                problemas.append("Dimens√µes da imagem inv√°lidas (largura ou altura √© zero).")
                status = False

            return {
                "status": status,
                "width": width,
                "height": height,
                "size_kb": round(tamanho_kb, 2),
                "problemas": problemas
            }
        except Exception as e:
            logger.error(f"Erro ao verificar qualidade da imagem: {str(e)}")
            return {
                "status": False,
                "problemas": [f"Erro ao processar imagem: {str(e)}"],
                "width": 0, "height": 0, "size_kb": 0
            }

    def analyze_image_with_gemini(self, image_bytes: bytes, api_key: str) -> Dict[str, Any]:
        """
        Analisa uma imagem usando o modelo Gemini.
        """
        timestamp_agora = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel('gemini-1.5-flash-latest') 
            
            image_pil = Image.open(io.BytesIO(image_bytes))
            if image_pil.mode != 'RGB':
                image_pil = image_pil.convert('RGB')
            
            img_byte_arr_jpeg = io.BytesIO()
            image_pil.save(img_byte_arr_jpeg, format='JPEG', quality=85, optimize=True)
            img_byte_arr_val = img_byte_arr_jpeg.getvalue()

            tamanho_processado_kb = len(img_byte_arr_val) / 1024.0
            logger.info(f"Tamanho da imagem para API Gemini (ap√≥s convers√£o JPEG): {tamanho_processado_kb:.2f} KB")
            if tamanho_processado_kb > 3800: 
                 logger.warning(f"Imagem para API ainda √© grande ({tamanho_processado_kb:.2f} KB), pode causar problemas.")

            prompt = textwrap.dedent("""
            Voc√™ √© um especialista em an√°lise de problemas em vias p√∫blicas.
            Analise a imagem fornecida e forne√ßa uma an√°lise t√©cnica detalhada sobre o buraco ou defeito na via.
            
            Siga EXATAMENTE este formato na sua resposta:

            DESCRI√á√ÉO F√çSICA:
            - Tamanho aparente do buraco: [Descreva o tamanho, por exemplo, pequeno, m√©dio, grande, ou dimens√µes aproximadas se vis√≠vel]
            - Forma e caracter√≠sticas: [Descreva a forma, por exemplo, circular, irregular, bordas afiadas, etc.]
            - Profundidade estimada: [Descreva a profundidade, por exemplo, rasa, moderada, profunda, ou estimativa em cm/polegadas se poss√≠vel]
            - Condi√ß√µes do asfalto ao redor: [Descreva o asfalto, por exemplo, rachado, desgastado, intacto, etc.]

            AVALIA√á√ÉO DE SEVERIDADE:
            - N√≠vel: [BAIXO/M√âDIO/ALTO/CR√çTICO]
            - Justificativa: [Explique o porqu√™ do n√≠vel de severidade escolhido]

            RISCOS IDENTIFICADOS:
            - Para ve√≠culos: [Descreva os riscos, por exemplo, danos a pneus/suspens√£o, perda de controle]
            - Para pedestres/ciclistas: [Descreva os riscos, por exemplo, trope√ßos, quedas, desvio para tr√°fego]
            - Outros riscos: [Se houver, por exemplo, ac√∫mulo de √°gua, etc.]

            CONDI√á√ïES AGRAVANTES:
            - Problemas adicionais: [Se houver, por exemplo, m√∫ltiplos buracos, m√° ilumina√ß√£o na √°rea, etc.]
            - Fatores de risco: [Se houver, por exemplo, tr√°fego intenso, √°rea escolar, curva perigosa]

            RECOMENDA√á√ïES:
            - Tipo de interven√ß√£o: [Sugira o tipo de reparo, por exemplo, tapa-buraco, recapeamento parcial, etc.]
            - Urg√™ncia do reparo: [Com base na severidade, por exemplo, imediato, em poucos dias, planejado]
            - Medidas tempor√°rias: [Se aplic√°vel, por exemplo, sinaliza√ß√£o, cones, placa met√°lica]
            """)

            generation_config = {
                "temperature": 0.4, 
                "top_p": 1.0,
                "top_k": 32, 
                "max_output_tokens": 2048,
            }
            
            safety_settings = [
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"}
            ]
            
            max_retries = 3
            for attempt in range(max_retries):
                logger.info(f"Tentativa {attempt + 1} de {max_retries} para an√°lise com Gemini.")
                try:
                    parts = [
                        {"text": prompt},
                        {
                            "inline_data": {
                                "mime_type": "image/jpeg", 
                                "data": base64.b64encode(img_byte_arr_val).decode('utf-8')
                            }
                        }
                    ]
                    
                    response = model.generate_content(
                        parts,
                        generation_config=generation_config,
                        safety_settings=safety_settings,
                        stream=False
                    )
                    
                    logger.info(f"Resposta recebida da API Gemini na tentativa {attempt + 1}.")

                    if hasattr(response, 'prompt_feedback') and response.prompt_feedback and response.prompt_feedback.block_reason:
                        block_reason_name = response.prompt_feedback.block_reason.name
                        logger.error(f"Tentativa {attempt + 1}: Conte√∫do bloqueado pela API Gemini. Raz√£o: {block_reason_name}")
                        if attempt == max_retries - 1:
                            return {
                                "status": "error", 
                                "analise_visual": f"Conte√∫do bloqueado pela API ap√≥s {max_retries} tentativas. Raz√£o: {block_reason_name}",
                                "timestamp": timestamp_agora
                            }
                        time.sleep(2 + attempt) 
                        continue

                    text_content = None
                    if hasattr(response, 'text') and response.text is not None:
                        text_content = response.text.strip()

                    if text_content:
                        logger.info(f"An√°lise de texto obtida com sucesso na tentativa {attempt + 1}.")
                        return {
                            "status": "success",
                            "analise_visual": text_content,
                            "timestamp": timestamp_agora
                        }
                    else:
                        logger.warning(f"Resposta de texto vazia ou inv√°lida na tentativa {attempt + 1} da API Gemini.")
                
                except Exception as e:
                    logger.error(f"Erro durante a chamada da API Gemini na tentativa {attempt + 1}: {str(e)}", exc_info=True)
                
                if attempt < max_retries - 1:
                    logger.info(f"Aguardando para a pr√≥xima tentativa...")
                    time.sleep(2 + attempt) 
                else: 
                    logger.error(f"Todas as {max_retries} tentativas de an√°lise de imagem falharam em obter uma resposta v√°lida da API Gemini.")
                    return {
                        "status": "error",
                        "analise_visual": f"Falha ao obter an√°lise da imagem da API Gemini ap√≥s {max_retries} tentativas.",
                        "timestamp": timestamp_agora
                    }
            return { # Fallback se o loop terminar sem return (n√£o deveria acontecer)
                "status": "error", 
                "analise_visual": "Falha inesperada no loop de tentativas da API Gemini.",
                "timestamp": timestamp_agora
            }

        except genai.types.BlockedPromptException as bpe:
            logger.error(f"Erro fatal na an√°lise: Prompt bloqueado pela API Gemini. {bpe}")
            return {
                "status": "error",
                "analise_visual": f"‚ùå Erro: A solicita√ß√£o foi bloqueada pela pol√≠tica de seguran√ßa da API Gemini. {bpe}",
                "timestamp": timestamp_agora
            }
        except Exception as e:
            logger.error(f"Erro fatal e inesperado na configura√ß√£o ou chamada inicial da API Gemini: {str(e)}", exc_info=True)
            return {
                "status": "error",
                "analise_visual": f"‚ùå Erro inesperado ao configurar ou chamar API Gemini: {str(e)}",
                "timestamp": timestamp_agora
            }

    def extract_severity_level(self, analise: str) -> str:
        try:
            if not isinstance(analise, str):
                logger.warning("Tentativa de extrair severidade de um valor n√£o string.")
                return "INDEFINIDO"
            
            for linha in analise.splitlines():
                if "n√≠vel:" in linha.lower(): 
                    partes = linha.split(":")
                    if len(partes) > 1:
                        nivel_texto = partes[1].strip().upper() 
                        for nivel_valido in self.SEVERITY_LEVELS:
                            if nivel_valido == nivel_texto: 
                                return nivel_valido
                        logger.warning(f"N√≠vel de severidade encontrado ('{nivel_texto}') mas n√£o reconhecido. Linha: '{linha}'")
                        return "INDEFINIDO" 
            logger.info(f"Padr√£o 'N√≠vel:' n√£o encontrado na an√°lise para extra√ß√£o de severidade.")
        except Exception as e:
            logger.error(f"Erro ao extrair n√≠vel de severidade: {str(e)}")
        return "INDEFINIDO"


    def get_severity_color(self, nivel: str) -> str:
        return self.SEVERITY_COLORS.get(nivel, self.SEVERITY_COLORS["INDEFINIDO"])

    def analyze_image(self, imagem_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Processa e exibe a an√°lise de imagem.
        """
        timestamp_geral_inicio = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

        if not imagem_data or 'bytes' not in imagem_data:
            msg = "Nenhuma imagem fornecida para an√°lise."
            if hasattr(st, 'error'): st.error(f"‚ùå {msg}") # S√≥ usa st se dispon√≠vel
            logger.warning("analyze_image chamada sem imagem_data ou sem 'bytes'.")
            return {"status": "error", "analise_visual": msg, "timestamp_geral": timestamp_geral_inicio}

        # Acessar st.secrets apenas se st estiver dispon√≠vel (para portabilidade)
        api_key_from_secrets = None
        if hasattr(st, 'secrets'):
            api_key_from_secrets = st.secrets.get("GOOGLE_API_KEY")

        if not api_key_from_secrets:
            msg = "Chave da API Google (GOOGLE_API_KEY) n√£o configurada."
            if hasattr(st, 'error'): st.error(f"‚ùå {msg}")
            logger.error("GOOGLE_API_KEY n√£o encontrada.")
            return {"status": "error", "analise_visual": msg, "timestamp_geral": timestamp_geral_inicio}
            
        qualidade = self.check_image_quality(imagem_data['bytes'])
        logger.info(f"Qualidade da imagem: Status={qualidade['status']}, Problemas={qualidade.get('problemas', [])}, Tamanho KB: {qualidade.get('size_kb')}")

        if not qualidade["status"]:
            if hasattr(st, 'warning'): st.warning("‚ö†Ô∏è Aviso sobre a qualidade da imagem:")
            for problema in qualidade["problemas"]:
                if hasattr(st, 'write'): st.write(f"- {problema}")
            
            continuar_analise = True # Default para True se n√£o estiver em contexto Streamlit
            if hasattr(st, 'button'):
                if not st.button("Continuar com a an√°lise mesmo assim", key=f"continuar_qualidade_ruim_{int(time.time())}"):
                    continuar_analise = False
            
            if not continuar_analise:
                msg = "Usu√°rio optou por n√£o continuar devido √† qualidade da imagem."
                logger.info(msg)
                return {
                    "status": "skipped", 
                    "analise_visual": msg, 
                    "qualidade_imagem": qualidade,
                    "timestamp_geral": timestamp_geral_inicio
                } 
            if hasattr(st, 'warning'): st.warning("Prosseguindo com a an√°lise, mas os resultados podem n√£o ser ideais.")

        spinner_active = False
        try:
            if hasattr(st, 'spinner'):
                spinner_context = st.spinner("üîç Analisando imagem com IA (Krateras Image Analyzer)...")
                spinner_context.__enter__()
                spinner_active = True
            
            logger.info(f"Iniciando an√°lise da imagem de {qualidade.get('size_kb', 0):.2f} KB com Gemini.")
            resultado_analise_gemini = self.analyze_image_with_gemini(
                image_bytes=imagem_data['bytes'],
                api_key=api_key_from_secrets # Passa a chave lida
            )

            if resultado_analise_gemini and resultado_analise_gemini.get("status") == "success":
                analise_texto_visual = resultado_analise_gemini["analise_visual"]
                nivel = self.extract_severity_level(analise_texto_visual)
                cor = self.get_severity_color(nivel)
                logger.info(f"An√°lise visual bem-sucedida. N√≠vel de severidade extra√≠do: {nivel}")

                if hasattr(st, 'success'):
                    st.success("‚úÖ An√°lise de imagem conclu√≠da pelo Krateras Image Analyzer!")
                    st.markdown(
                        f"""<div style='padding: 10px; border-radius: 5px; background-color: {cor}; color: white; text-align: center;'>
                            <h3 style='margin: 0;'>N√≠vel de Severidade (An√°lise Visual): {nivel}</h3>
                        </div><br>""", unsafe_allow_html=True)
                    st.markdown("### An√°lise T√©cnica Visual Detalhada (IA)")
                    st.markdown(analise_texto_visual)

                resultado_final = {
                    "status": "success", 
                    "analise_visual_ia": resultado_analise_gemini, 
                    "nivel_severidade": nivel,
                    "cor_severidade": cor,
                    "qualidade_imagem": qualidade,
                    "timestamp_geral": timestamp_geral_inicio 
                }
                return resultado_final
            else:
                erro_msg = resultado_analise_gemini.get("analise_visual", "Erro desconhecido na an√°lise com IA Gemini.")
                if hasattr(st, 'error'): st.error(f"Falha na an√°lise com IA Gemini: {erro_msg}")
                logger.error(f"Falha reportada por analyze_image_with_gemini: {erro_msg}")
                return {
                    "status": "error", 
                    "analise_visual": erro_msg, 
                    "qualidade_imagem": qualidade,
                    "timestamp_geral": timestamp_geral_inicio
                }
        except Exception as e: 
            error_msg = f"‚ùå Erro inesperado durante o processo de an√°lise da imagem: {str(e)}"
            if hasattr(st, 'error'): st.error(error_msg)
            logger.error(f"Erro no m√©todo analyze_image: {str(e)}", exc_info=True)
            return {
                "status": "error", 
                "analise_visual": error_msg,
                "qualidade_imagem": qualidade, 
                "timestamp_geral": timestamp_geral_inicio
            }
        finally:
            if spinner_active:
                spinner_context.__exit__(None, None, None)


    def show_analysis_feedback(self, nivel: str) -> None:
        """
        Mostra feedback e recomenda√ß√µes baseadas no n√≠vel de severidade.
        """
        info = self.FEEDBACK_INFO.get(nivel, self.FEEDBACK_INFO.get("INDEFINIDO", {
            "icon": "‚ÑπÔ∏è",
            "mensagem": "N√≠vel de severidade n√£o determinado ou feedback n√£o dispon√≠vel.",
            "prazo": "Prazo n√£o definido."
        }))
        if hasattr(st, 'info'): # S√≥ mostra se estiver em contexto Streamlit
            st.info(f"{info['icon']} **{info['mensagem']}**\n\n*Prazo recomendado para resolu√ß√£o: {info['prazo']}*")


# Fun√ß√µes wrapper para uso externo
def processar_analise_imagem(imagem_data: Dict[str, Any]) -> Dict[str, Any]:
    analyzer = ImageAnalyzer()
    return analyzer.analyze_image(imagem_data)

def mostrar_feedback_analise(nivel: str) -> None:
    analyzer = ImageAnalyzer()
    analyzer.show_analysis_feedback(nivel)

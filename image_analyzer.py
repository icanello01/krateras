1  from google.adk.agents import Agent
2  from google.adk.runners import Runner
3  from google.adk.sessions import InMemorySessionService
4  from google.genai import types
5  from PIL import Image
6  import io
7  from typing import Dict, Any
8  import streamlit as st
9  
10 def verificar_qualidade_imagem(image_bytes: bytes) -> Dict[str, Any]:
11     """
12     Verifica se a imagem tem qualidade suficiente para an√°lise.
13     """
14     try:
15         img = Image.open(io.BytesIO(image_bytes))
16         width, height = img.size
17         
18         problemas = []
19         status = True
20         
21         # Verifica dimens√µes
22         if width < 200 or height < 200:
23             problemas.append("Resolu√ß√£o muito baixa")
24             status = False
25             
26         # Verifica tamanho do arquivo
27         if len(image_bytes) < 10000:  # 10KB
28             problemas.append("Tamanho do arquivo muito pequeno")
29             status = False
30             
31         # Verifica propor√ß√£o
32         if width/height > 3 or height/width > 3:
33             problemas.append("Propor√ß√£o da imagem inadequada")
34             status = False
35             
36         return {
37             "status": status,
38             "width": width,
39             "height": height,
40             "size_kb": len(image_bytes)/1024,
41             "problemas": problemas
42         }
43     except Exception as e:
44         return {
45             "status": False,
46             "problemas": [f"Erro ao processar imagem: {str(e)}"]
47         }
48 
49 def analisar_imagem_com_agent(image_bytes: bytes, api_key: str) -> Dict[str, Any]:
50     """
51     Analisa uma imagem usando um Agente Gemini Vision especializado.
52     """
53     try:
54         # Configura o agente
55         agente_analise = Agent(
56             name="analista_buracos",
57             model="gemini-pro-vision",
58             description="Agente especializado em an√°lise de buracos e problemas em vias p√∫blicas",
59             instruction="""Voc√™ √© um especialista em an√°lise de problemas em vias p√∫blicas.
60             Analise a imagem fornecida e forne√ßa uma an√°lise t√©cnica detalhada seguindo EXATAMENTE este formato:
61 
62             DESCRI√á√ÉO F√çSICA:
63             - Tamanho aparente do buraco:
64             - Forma e caracter√≠sticas:
65             - Profundidade estimada:
66             - Condi√ß√µes do asfalto ao redor:
67 
68             AVALIA√á√ÉO DE SEVERIDADE:
69             - N√≠vel: [BAIXO/M√âDIO/ALTO/CR√çTICO]
70             - Justificativa:
71 
72             RISCOS IDENTIFICADOS:
73             - Para ve√≠culos:
74             - Para pedestres/ciclistas:
75             - Outros riscos:
76 
77             CONDI√á√ïES AGRAVANTES:
78             - Problemas adicionais:
79             - Fatores de risco:
80 
81             RECOMENDA√á√ïES:
82             - Tipo de interven√ß√£o:
83             - Urg√™ncia do reparo:
84             - Medidas tempor√°rias:
85 
86             ATEN√á√ÉO: Mantenha EXATAMENTE este formato na resposta.
87             """
88         )
89 
90         # Configura sess√£o e runner
91         session_service = InMemorySessionService()
92         session = session_service.create_session(
93             app_name=agente_analise.name,
94             user_id="user1",
95             session_id="session1"
96         )
97 
98         runner = Runner(
99             agent=agente_analise,
100            app_name=agente_analise.name,
101            session_service=session_service
102        )
103
104        # Prepara conte√∫do
105        content = types.Content(
106            role="user",
107            parts=[
108                types.Part(text="Analise esta imagem e forne√ßa um relat√≥rio detalhado:"),
109                types.Part(inline_data=types.InlineData(
110                    mime_type="image/jpeg",
111                    data=image_bytes
112                ))
113            ]
114        )
115
116        # Coleta resposta
117        resposta_final = ""
118        for event in runner.run(
119            user_id="user1",
120            session_id="session1",
121            new_message=content
122        ):
123            if event.is_final_response():
124                for part in event.content.parts:
125                    if part.text is not None:
126                        resposta_final += part.text
127                        resposta_final += "\n"
128
129        if not resposta_final:
130            return {
131                "status": "error",
132                "analise_visual": "‚ùå N√£o foi poss√≠vel gerar uma an√°lise para esta imagem."
133            }
134
135        return {
136            "status": "success",
137            "analise_visual": resposta_final.strip()
138        }
139
140    except Exception as e:
141        return {
142            "status": "error",
143            "analise_visual": f"‚ùå Erro na an√°lise de imagem: {str(e)}"
144        }
145
146 def extrair_nivel_severidade(analise: str) -> str:
147     """
148     Extrai o n√≠vel de severidade da an√°lise.
149     """
150     try:
151         if "AVALIA√á√ÉO DE SEVERIDADE:" in analise:
152             linhas = analise.split("\n")
153             for linha in linhas:
154                 if "N√≠vel:" in linha:
155                     nivel = linha.split("[")[1].split("]")[0]
156                     return nivel
157     except:
158         pass
159     return "INDEFINIDO"
160
161 def get_severity_color(nivel: str) -> str:
162     """
163     Retorna a cor correspondente ao n√≠vel de severidade.
164     """
165     cores = {
166         "BAIXO": "#28a745",    # Verde
167         "M√âDIO": "#ffc107",    # Amarelo
168         "ALTO": "#dc3545",     # Vermelho
169         "CR√çTICO": "#6c1420",  # Vermelho escuro
170         "INDEFINIDO": "#6c757d" # Cinza
171     }
172     return cores.get(nivel, cores["INDEFINIDO"])
173
174 def processar_analise_imagem(imagem_data: Dict[str, Any]) -> None:
175     """
176     Processa e exibe a an√°lise de imagem.
177     """
178     if not imagem_data or 'bytes' not in imagem_data:
179         st.error("‚ùå Nenhuma imagem fornecida para an√°lise.")
180         return
181
182     # Verifica qualidade da imagem
183     qualidade = verificar_qualidade_imagem(imagem_data['bytes'])
184     if not qualidade["status"]:
185         st.warning("‚ö†Ô∏è Aviso sobre a qualidade da imagem:")
186         for problema in qualidade["problemas"]:
187             st.write(f"- {problema}")
188         
189         if st.button("Continuar mesmo assim"):
190             st.warning("Prosseguindo com a an√°lise, mas os resultados podem n√£o ser ideais.")
191         else:
192             st.stop()
193
194     # An√°lise da imagem
195     with st.spinner("üîç Analisando imagem com IA..."):
196         try:
197             resultado_analise = analisar_imagem_com_agent(
198                 image_bytes=imagem_data['bytes'],
199                 api_key=st.secrets["GOOGLE_API_KEY"]
200             )
201
202             if resultado_analise["status"] == "success":
203                 # Extrai o n√≠vel de severidade
204                 nivel = extrair_nivel_severidade(resultado_analise["analise_visual"])
205                 cor = get_severity_color(nivel)
206
207                 # Exibe o resultado
208                 st.success("‚úÖ An√°lise de imagem conclu√≠da!")
209                 
210                 # Cabe√ßalho com n√≠vel de severidade
211                 st.markdown(
212                     f"""
213                     <div style='padding: 10px; border-radius: 5px; background-color: {cor}; color: white;'>
214                         <h3 style='margin: 0; text-align: center;'>N√≠vel de Severidade: {nivel}</h3>
215                     </div>
216                     """,
217                     unsafe_allow_html=True
218                 )
219
220                 # An√°lise detalhada
221                 st.markdown("### An√°lise T√©cnica Detalhada")
222                 st.markdown(resultado_analise["analise_visual"])
223
224                 # Salva na sess√£o
225                 st.session_state.denuncia_completa['analise_visual_ia'] = resultado_analise
226                 st.session_state.denuncia_completa['nivel_severidade'] = nivel
227
228             else:
229                 st.error(resultado_analise["analise_visual"])
230
231         except Exception as e:
232             st.error(f"‚ùå Erro durante a an√°lise: {str(e)}")
233
234 def mostrar_feedback_analise(nivel: str) -> None:
235     """
236     Mostra feedback e recomenda√ß√µes baseadas no n√≠vel de severidade.
237     """
238     feedback = {
239         "BAIXO": {
240             "icon": "‚úÖ",
241             "mensagem": "O problema identificado √© de baixa severidade, mas ainda requer aten√ß√£o.",
242             "prazo": "Recomenda-se resolu√ß√£o em at√© 30 dias."
243         },
244         "M√âDIO": {
245             "icon": "‚ö†Ô∏è",
246             "mensagem": "O problema requer aten√ß√£o moderada.",
247             "prazo": "Recomenda-se resolu√ß√£o em at√© 15 dias."
248         },
249         "ALTO": {
250             "icon": "üö®",
251             "mensagem": "O problema requer aten√ß√£o urgente!",
252             "prazo": "Recomenda-se resolu√ß√£o em at√© 7 dias."
253         },
254         "CR√çTICO": {
255             "icon": "üÜò",
256             "mensagem": "Situa√ß√£o cr√≠tica que requer a√ß√£o imediata!",
257             "prazo": "Recomenda-se resolu√ß√£o em 24 horas."
258         }
259     }
260
261     info = feedback.get(nivel, {
262         "icon": "‚ÑπÔ∏è",
263         "mensagem": "N√≠vel de severidade n√£o determinado.",
264         "prazo": "Prazo n√£o definido."
265     })
266
267     st.info(f"{info['icon']} {info['mensagem']}\n\n{info['prazo']}")

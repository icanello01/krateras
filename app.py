# -*- coding: utf-8 -*-
"""
Krateras üöÄ‚ú®üîí: O Especialista Rob√≥tico de Den√∫ncia de Buracos (v3.2 - Streamlit Secure Edition)

Bem-vindo √† vers√£o visual do Krateras! Agora em uma interface amig√°vel,
mantendo a intelig√™ncia da IA e a seguran√ßa das suas chaves (fora do c√≥digo!).

Tecnologias: Python, Streamlit, Google Gemini API, Google Geocoding API, ViaCEP.
Objetivo: Coletar dados de den√∫ncias de buracos, analis√°-los com IA e gerar relat√≥rios
detalhados e priorizados, incluindo localiza√ß√£o visual em mapa.

Vamos juntos consertar essas ruas! Iniciando sistemas visuais e rob√≥ticos...
"""

import streamlit as st
import requests
import google.generativeai as genai
from typing import Dict, Any, Optional
import re
import json # Adicionado para exibir dados brutos opcionalmente
import pandas as pd # Para usar st.map

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Krateras üöÄ‚ú®üîí - Den√∫ncia de Buracos",
    page_icon="üöß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Estilos CSS Personalizados (Opcional, para um toque extra) ---
st.markdown("""
<style>
.reportview-container .main .block-container {
    padding-top: 2rem;
    padding-right: 3rem;
    padding-left: 3rem;
    padding-bottom: 2rem;
}
h1, h2, h3 {
    color: #4A90E2; /* Azul Cratera */
}
.stButton>button {
    background-color: #50E3C2; /* Verde Rob√¥ */
    color: white;
    font-weight: bold;
    border-radius: 10px;
    padding: 0.5rem 1rem;
    transition: all 0.2s ease-in-out;
}
.stButton>button:hover {
    background-color: #00B894; /* Verde Rob√¥ Escuro */
    color: white;
}
.stTextInput, .stNumberInput, .stTextArea, .stRadio, .stSelectbox {
    margin-bottom: 10px;
}
.stSpinner > div > div {
    border-top-color: #4A90E2 !important;
}
.css-1aumqxt { /* Estilo para st.info */
    border-left: 5px solid #4A90E2 !important;
}
.css-1r6cdft { /* Estilo para st.warning */
     border-left: 5px solid #F5A623 !important;
}
.css-t9s6qg { /* Estilo para st.error */
     border-left: 5px solid #D0021B !important;
}
.css-1u3jtzg { /* Estilo para st.success */
     border-left: 5px solid #7ED321 !important;
}
/* Ajustes para expanders */
.streamlit-expanderHeader {
    font-size: 1.1em !important;
    font-weight: bold !important;
    color: #4A90E2 !important;
}
</style>
""", unsafe_allow_html=True)


# --- Inicializa√ß√£o de Estado da Sess√£o ---
# Gerencia o fluxo da aplica√ß√£o web
if 'step' not in st.session_state:
    st.session_state.step = 'start'
if 'denuncia_completa' not in st.session_state:
    st.session_state.denuncia_completa = {}
if 'api_keys_loaded' not in st.session_state:
    st.session_state.api_keys_loaded = False
if 'gemini_model' not in st.session_state:
    st.session_state.gemini_model = None
if 'geocoding_api_key' not in st.session_state:
    st.session_state.geocoding_api_key = None

# --- üîë Gerenciamento de Chaves Secretas (Streamlit Secrets) ---
# Utiliza o .streamlit/secrets.toml para carregar chaves

def load_api_keys() -> tuple[Optional[str], Optional[str]]:
    """
    Tenta obter as chaves de API do Google Gemini e Google Maps Geocoding de Streamlit Secrets.
    Retorna None se n√£o encontradas.
    """
    gemini_key = st.secrets.get('GOOGLE_API_KEY')
    geocoding_key = st.secrets.get('geocoding_api_key')

    if not gemini_key:
        st.warning("‚ö†Ô∏è Segredo 'GOOGLE_API_KEY' n√£o encontrado nos Streamlit Secrets. Funcionalidades de IA do Gemini estar√£o desabilitadas.")
    if not geocoding_key:
        st.warning("‚ö†Ô∏è Segredo 'geocoding_api_key' n√£o encontrado nos Streamlit Secrets. Geocodifica√ß√£o autom√°tica estar√° desabilitada.")
        st.info("‚ÑπÔ∏è Para configurar os segredos, crie um arquivo `.streamlit/secrets.toml` na raiz do seu projeto Streamlit com:\n```toml\nGOOGLE_API_KEY = \"SUA_CHAVE_GEMINI\"\ngeocoding_api_key = \"SUA_CHAVE_GEOCODING\"\n```\nLembre-se que a API Geocoding PODE gerar custos. Ative-a no Google Cloud.")

    return gemini_key, geocoding_key

# --- Inicializar APIs (Cacheado para performance) ---

@st.cache_resource
def init_gemini(api_key: Optional[str]) -> Optional[genai.GenerativeModel]:
    """Inicializa o modelo Google Gemini com cache."""
    if not api_key:
        return None # Retorna None se a chave n√£o for fornecida
    try:
        genai.configure(api_key=api_key)
        # Buscar modelos que suportam gera√ß√£o de conte√∫do de texto
        available_models = [m.name for m in genai.list_models() if 'generateContent' in m.supported_generation_methods]

        if not available_models:
             st.error("‚ùå ERRO na F√°brica de Modelos: Nenhum modelo de texto Gemini compat√≠vel encontrado na sua conta.")
             return None

        # Prefer√™ncia por modelos mais recentes ou Pro
        preferred_models: list[str] = ['gemini-1.5-flash-latest', 'gemini-1.0-pro', 'gemini-pro']
        model_name: Optional[str] = None
        for pref_model in preferred_models:
            # Verifica com e sem o prefixo 'models/'
            if f'models/{pref_model}' in available_models:
                model_name = pref_model
                break
            if pref_model in available_models:
                 model_name = pref_model
                 break

        if not model_name:
            # Fallback para o primeiro modelo dispon√≠vel se nenhum preferencial for encontrado
            model_name = available_models[0].replace('models/', '')
            st.warning(f"‚ö†Ô∏è AVISO: Modelos Gemini preferenciais n√£o encontrados. Usando fallback: '{model_name}'. Pode ter menos funcionalidades.")

        model = genai.GenerativeModel(model_name)
        # Teste b√°sico pode ser feito aqui se necess√°rio, mas cache_resource j√° lida com isso
        # model.generate_content("Ping") # Remover teste real em produ√ß√£o para evitar custos desnecess√°rios
        st.success(f"‚úÖ Conex√£o com Google Gemini estabelecida usando modelo '{model_name}'. A IA est√° online e pensativa!")
        return model
    except Exception as e:
        st.error(f"‚ùå ERRO no Painel de Controle Gemini: Falha na inicializa√ß√£o do Google Gemini. Verifique sua chave e status do servi√ßo.")
        st.exception(e)
        return None

# --- Fun√ß√µes de API Call (Cacheado para resultados est√°veis por sess√£o) ---

@st.cache_data(show_spinner="‚è≥ Interrogando o ViaCEP...")
def buscar_cep(cep: str) -> Dict[str, Any]:
    """Consulta a API ViaCEP para obter dados de endere√ßo com tratamento de erros."""
    cep_limpo = cep.replace("-", "").replace(".", "").strip()
    if len(cep_limpo) != 8 or not cep_limpo.isdigit():
        return {"erro": "Formato de CEP inv√°lido. Precisa de 8 d√≠gitos, amig√£o!"}

    url = f"https://viacep.com.br/ws/{cep_limpo}/json/"
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()
        if 'erro' in data and data['erro'] is True:
            return {"erro": f"CEP '{cep_limpo}' n√£o encontrado no ViaCEP. Ele se escondeu! üßê"}
        if not data.get('logradouro') or not data.get('localidade') or not data.get('uf'):
             return {"erro": f"CEP '{cep_limpo}' encontrado, mas os dados de endere√ßo est√£o incompletos. O ViaCEP s√≥ contou parte da hist√≥ria!"}
        return data
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao buscar o CEP '{cep_limpo}'. O ViaCEP n√£o responde! üò¥"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com o ViaCEP para o CEP '{cep_limpo}': {e}. Problemas na linha!"}
    except Exception as e:
         return {"erro": f"Ocorreu um erro inesperado ao buscar o CEP '{cep_limpo}': {e}. Isso n√£o estava nos meus manuais!"}

@st.cache_data(show_spinner="‚è≥ Tentando localizar o buraco no mapa global via Geocoding API...")
def geocodificar_endereco(rua: str, numero: str, cidade: str, estado: str, api_key: str) -> Dict[str, Any]:
    """Tenta obter coordenadas geogr√°ficas e link Google Maps via Google Maps Geocoding API."""
    if not api_key:
        return {"erro": "Chave de API de Geocodifica√ß√£o n√£o fornecida."}
    if not rua or not numero or not cidade or not estado:
         return {"erro": "Dados de endere√ßo insuficientes (requer rua, n√∫mero, cidade, estado) para geocodificar."}

    address = f"{rua}, {numero}, {cidade}, {estado}"
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={requests.utils.quote(address)}&key={api_key}"

    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()

        if data['status'] != 'OK':
            status = data.get('status', 'STATUS DESCONHECIDO')
            error_msg = data.get('error_message', 'Sem mensagem adicional.')
            return {"erro": f"Geocodifica√ß√£o falhou. Status: {status}. Mensagem: {error_msg}"}
        if not data['results']:
             return {"erro": "Geocodifica√ß√£o falhou. Nenhum local exato encontrado para o endere√ßo fornecido."}

        location = data['results'][0]['geometry']['location']
        lat = location['lat']
        lng = location['lng']
        formatted_address = data['results'][0].get('formatted_address', address)

        return {
            "latitude": lat,
            "longitude": lng,
            "endereco_formatado_api": formatted_address,
            "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat},{lng}",
            "google_embed_link_gerado": f"https://www.google.com/maps/embed/v1/place?key={api_key}&q={lat},{lng}"
        }
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao tentar geocodificar: {address}"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com a API de Geocodifica√ß√£o: {address}. Detalhes: {e}"}
    except Exception as e:
        return {"erro": f"Ocorreu um erro inesperado durante a geocodifica√ß√£o: {address}. Detalhes: {e}"}


# --- Fun√ß√µes de An√°lise de IA (Cacheado para resultados est√°veis por sess√£o) ---
# Safety settings configuradas para permitir discuss√µes sobre perigos na rua
SAFETY_SETTINGS = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]


@st.cache_data(show_spinner="üß† Executando an√°lise profunda da descri√ß√£o do buraco com IA Gemini...")
def analisar_descricao_gemini(_descricao: str, _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para analisar a descri√ß√£o detalhada do buraco e extrair insights estruturados."""
    if not _model:
        return {"insights": "ü§ñ An√°lise de descri√ß√£o via IA indispon√≠vel (Motor Gemini offline)."}
    if not _descricao or _descricao.strip() == "":
         return {"insights": "üîç Sem descri√ß√£o fornecida para an√°lise de IA."}

    prompt = f"""
    Analise a seguinte descri√ß√£o DETALHADA de um buraco em uma rua. Seu objetivo √© extrair informa√ß√µes objetivas e insights CRUCIAIS para um sistema de den√∫ncias de reparo p√∫blico.
    Formate a sa√≠da como um texto claro, usando marcadores (-) ou t√≠tulos para cada categoria.
    Se uma categoria N√ÉO PUDER ser claramente mencionada ou inferida COM ALTA CONFIAN√áA a partir do texto, indique explicitamente "N√£o especificado/inferido na descri√ß√£o". Seja honesto sobre o que PODE ser extra√≠do.

    Descri√ß√£o do Buraco: "{_descricao}"

    Categorias para Extrair/Inferir da Descri√ß√£o:
    - Severidade/Tamanho Estimado (Baseado na descri√ß√£o): [Ex: Pequeno, M√©dio, Grande, Enorme, Cr√≠tico. Use termos comparativos se presentes, ex: "do tamanho de uma roda de carro".]
    - Profundidade Estimada: [Ex: Raso, Fundo, Muito Fundo. Termos como "cabe um pneu" indicam profundidade.]
    - Presen√ßa de √Ågua/Alagamento: [Sim/N√£o/N√£o mencionado, se acumula √°gua, vira piscina.]
    - Perigos Potenciais e Impactos Mencionados: [Liste riscos espec√≠ficos citados ou implicados (ex: risco de acidente de carro/moto/bike, perigo para pedestres, causa danos a ve√≠culos - pneu furado, suspens√£o, roda -, dificuldade de desviar, risco de queda, perigo √† noite/chuva). Seja espec√≠fico.]
    - Contexto Adicional Relevante do Local/Hist√≥rico: [Problema recorrente/antigo/novo, perto de local importante (escola, hospital, com√©rcio), em via movimentada, em curva, na esquina, na subida/descida, pouca ilumina√ß√£o.]
    - Sugest√µes de A√ß√£o/Recursos Mencionados pelo Denunciante: [Se o usu√°rio sugere o que fazer (tapa-buraco, recapeamento, sinalizar) ou causas percebidas.]
    - Identificadores Visuais Adicionais (se descritos): [Coisas √∫nicas pr√≥ximas que ajudam a achar o buraco (poste X, √°rvore Y, em frente a Z).]
    - Palavras-chave Principais: [Liste 3-7 palavras-chave que capturem a ess√™ncia da den√∫ncia e o problema principal.]

    Formate a resposta de forma limpa e estruturada.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"insights": f"‚ùå An√°lise de descri√ß√£o bloqueada pelo filtro de seguran√ßa do Gemini. Motivo: {block_reason}"}
        return {"insights": response.text.strip()}
    except Exception as e:
        return {"insights": f"‚ùå Erro ao analisar a descri√ß√£o com IA: {e}"}


@st.cache_data(show_spinner="üß† Calculando o N√≠vel de Prioridade Rob√≥tica...")
def categorizar_urgencia_gemini(_dados_denuncia: Dict[str, Any], _insights_ia: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para sugerir uma categoria de urg√™ncia com base nos dados e insights."""
    if not _model:
        return {"urgencia_ia": "ü§ñ Sugest√£o de urg√™ncia via IA indispon√≠vel (Motor Gemini offline)."}

    descricao = _dados_denuncia.get('descricao_detalhada', 'Sem descri√ß√£o.')
    insights_texto = _insights_ia.get('insights', 'An√°lise de insights n√£o dispon√≠vel.')
    localizacao_exata = _dados_denuncia.get('localizacao_exata_processada', {})
    tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
    input_original_loc = localizacao_exata.get('input_original', 'N√£o informado.')

    loc_contexto = f"Localiza√ß√£o informada: Tipo: {tipo_loc}. Detalhes originais: '{input_original_loc}'."
    if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
        lat = localizacao_exata.get('latitude')
        lon = localizacao_exata.get('longitude')
        loc_contexto += f" Coordenadas: {lat}, {lon}. Link gerado: {localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')}."
    elif localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
         loc_contexto += f" (Nota: Tentativa de Geocodifica√ß√£o autom√°tica falhou/n√£o tentada: {localizacao_exata.get('motivo_falha_geocodificacao_anterior', 'Motivo desconhecido')})"


    prompt = f"""
    Com base nas informa√ß√µes da den√∫ncia e nos insights extra√≠dos pela an√°lise anterior, sugira a MELHOR categoria de urg√™ncia para o reparo deste buraco.
    Considere a severidade/tamanho, profundidade, PERIGOS POTENCIAIS e impactos mencionados, e qualquer CONTEXTO ADICIONAL relevante (como ser recorrente, em √°rea de alto tr√°fego/risco, perto de local importante).

    Escolha UMA Categoria de Urg√™ncia entre estas:
    - Urg√™ncia Baixa: Buraco pequeno, sem perigo aparente, em local de baixo tr√°fego. Principalmente est√©tico ou pequeno inc√¥modo.
    - Urg√™ncia M√©dia: Tamanho razo√°vel, pode causar leve inc√¥modo ou dano menor (ex: pneu furado leve), em via secund√°ria ou com tr√°fego moderado. Requer reparo em prazo razo√°vel.
    - Urg√™ncia Alta: Buraco grande, profundo, perigo CLARO e/ou frequente (risco de acidente mais s√©rio, dano significativo a ve√≠culo, perigo para motos/bikes/pedestres), em via movimentada ou √°rea de risco (escola, hospital). Requer aten√ß√£o R√ÅPIDA, possivelmente em poucos dias.
    - Urg√™ncia Imediata/Cr√≠tica: Buraco ENORME/muito profundo que causa acidentes CONSTANTES ou representa risco GRAVE e iminente a ve√≠culos ou pessoas (ex: cratera na pista principal), afeta severamente a fluidez ou acessibilidade. Requer interven√ß√£o de EMERG√äNCIA (horas/poucas horas).

    Informa√ß√µes Relevantes da Den√∫ncia:
    Localiza√ß√£o B√°sica: Rua {_dados_denuncia.get('endereco', {}).get('rua', 'N√£o informada')}, N√∫mero Pr√≥ximo/Refer√™ncia: {_dados_denuncia.get('numero_proximo', 'N√£o informado')}, Lado: {_dados_denuncia.get('lado_rua', 'N√£o informado')}, Cidade: {_dados_denuncia.get('endereco', {}).get('cidade_buraco', 'N√£o informada')}, Estado: {_dados_denuncia.get('endereco', {}).get('estado_buraco', 'N√£o informado')}.
    {loc_contexto}
    Descri√ß√£o Original do Denunciante: "{descricao}"
    Insights Extra√≠dos pela An√°lise de IA:
    {insights_texto}

    Com base nestes dados, qual categoria de urg√™ncia voc√™ sugere? Forne√ßa APENAS a categoria (ex: "Urg√™ncia Alta") e uma breve JUSTIFICATIVA (m√°ximo 2 frases) explicando POR QUE essa categoria foi sugerida, citando elementos da descri√ß√£o ou insights.

    Formato de sa√≠da (muito importante seguir este formato):
    Categoria Sugerida: [Categoria Escolhida]
    Justificativa: [Justificativa Breve]
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"urgencia_ia": f"‚ùå Sugest√£o de urg√™ncia bloqueada. Motivo: {block_reason}"}
        return {"urgencia_ia": response.text.strip()}
    except Exception as e:
        return {"urgencia_ia": f"‚ùå Erro ao sugerir urg√™ncia com IA: {e}"}


@st.cache_data(show_spinner="üß† IA est√° pensando... Qual pode ser a causa e a melhor a√ß√£o para este buraco?")
def sugerir_causa_e_acao_gemini(_dados_denuncia: Dict[str, Any], _insights_ia: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para sugerir poss√≠veis causas do buraco e a√ß√µes de reparo com base nos dados e insights."""
    if not _model:
        return {"sugestao_acao_ia": "ü§ñ Sugest√µes de causa/a√ß√£o via IA indispon√≠veis (Motor Gemini offline)."}

    descricao = _dados_denuncia.get('descricao_detalhada', 'Sem descri√ß√£o.')
    insights_texto = _insights_ia.get('insights', 'An√°lise de insights n√£o dispon√≠vel.')

    prompt = f"""
    Com base na descri√ß√£o fornecida pelo denunciante e nos insights extra√≠dos pela an√°lise de IA, tente sugerir:
    1. Uma ou duas P√ìSSIVEIS CAUSAS para a forma√ß√£o deste buraco espec√≠fico (ex: chuva forte recente, desgaste do asfalto pelo tempo/tr√°fego, problema na drenagem subterr√¢nea, afundamento devido a reparo anterior, obra mal feita na regi√£o). Baseie-se no contexto (se recorrente, se choveu, etc).
    2. Sugest√µes de TIPOS DE A√á√ÉO ou REPARO mais adequados ou necess√°rios para resolver este problema (ex: simples tapa-buraco, recapeamento da se√ß√£o, inspe√ß√£o de drenagem, sinaliza√ß√£o de emerg√™ncia, interdi√ß√£o parcial da via). Baseie-se na severidade e perigos.
    Baseie suas sugest√µes EXCLUSIVAMENTE nas informa√ß√µes fornecidas na descri√ß√£o e nos insights. Se a descri√ß√£o n√£o der pistas suficientes, indique "N√£o especificado/inferido na descri√ß√£o". Seja l√≥gico e pr√°tico.

    Informa√ß√µes Relevantes da Den√∫ncia:
    Descri√ß√£o Original do Buraco: "{descricao}"
    Insights Extra√≠dos pela An√°lise de IA:
    {insights_texto}

    Formato de sa√≠da:
    Poss√≠veis Causas Sugeridas: [Lista de causas sugeridas baseadas na descri√ß√£o ou 'N√£o especificado/inferido']
    Sugest√µes de A√ß√£o/Reparo Sugeridas: [Lista de a√ß√µes sugeridas baseadas na descri√ß√£o/insights ou 'N√£o especificado/inferido']
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"sugestao_acao_ia": f"‚ùå Sugest√£o de causa/a√ß√£o bloqueada. Motivo: {block_reason}"}
        return {"sugestao_acao_ia": response.text.strip()}
    except Exception as e:
        return {"sugestao_acao_ia": f"‚ùå Erro ao sugerir causa/a√ß√£o com IA: {e}"}

@st.cache_data(show_spinner="üß† Compilando o Relat√≥rio Final Rob√≥tico e Inteligente com IA Gemini...")
def gerar_resumo_completo_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para gerar um resumo narrativo inteligente da den√∫ncia completa."""
    if not _model:
        return {"resumo_ia": "ü§ñ Resumo inteligente via IA indispon√≠vel (Motor Gemini offline)."}

    denunciante = _dados_denuncia_completa.get('denunciante', {})
    buraco = _dados_denuncia_completa.get('buraco', {})
    endereco = buraco.get('endereco', {})
    localizacao_exata = _dados_denuncia_completa.get('localizacao_exata_processada', {})
    insights_ia = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise da descri√ß√£o n√£o dispon√≠vel ou com erro.')
    urgencia_ia = _dados_denuncia_completa.get('urgencia_ia', {}).get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o dispon√≠vel ou com erro.')
    sugestao_acao_ia = _dados_denuncia_completa.get('sugestao_acao_ia', {}).get('sugestao_acao_ia', 'Sugest√µes de causa/a√ß√£o n√£o dispon√≠veis ou com erro.')


    loc_info_resumo = "Localiza√ß√£o exata n√£o especificada ou processada."
    tipo_loc_processada = localizacao_exata.get('tipo', 'N√£o informada')

    if tipo_loc_processada in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
         lat = localizacao_exata.get('latitude')
         lon = localizacao_exata.get('longitude')
         link_gerado = localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')
         loc_info_resumo = f"Localiza√ß√£o: Coordenadas {lat}, {lon} (Obtida via: {tipo_loc_processada.replace(' (API)', ' API').replace('Manual', 'Manual').replace('Fornecidas/Extra√≠das', 'Manual')}). Link Google Maps: {link_gerado}."
         if localizacao_exata.get('input_original'):
             loc_info_resumo += f" (Input original: '{localizacao_exata.get('input_original')}')"

    elif tipo_loc_processada == 'Descri√ß√£o Manual Detalhada':
         loc_info_resumo = f"Localiza√ß√£o via descri√ß√£o manual detalhada: '{localizacao_exata.get('descricao_manual', 'N√£o informada')}'. (Input original: '{localizacao_exata.get('input_original', 'N√£o informado')}')"

    elif localizacao_exata.get('input_original') and tipo_loc_processada == 'N√£o informada':
         loc_info_resumo = f"Localiza√ß√£o informada (tipo n√£o detectado): '{localizacao_exata.get('input_original')}'."

    if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
         loc_info_resumo += f" (Nota: Geocodifica√ß√£o autom√°tica falhou/n√£o tentada: {localizacao_exata.get('motivo_falha_geocodificacao_anterior')})"


    prompt = f"""
    Gere um resumo narrativo conciso (m√°ximo 8-10 frases) para a seguinte den√∫ncia de buraco no aplicativo Krateras.
    Este resumo deve ser formal, objetivo e √∫til para equipes de manuten√ß√£o ou gest√£o p√∫blica.
    Combine os dados estruturados, a localiza√ß√£o exata processada e os insights das an√°lises de IA.

    Inclua:
    - Quem denunciou (Nome, Cidade de Resid√™ncia).
    - Onde est√° o buraco (Rua, N√∫mero Pr√≥ximo/Refer√™ncia, Bairro, Cidade do Buraco, Estado do Buraco, CEP se dispon√≠vel).
    - A localiza√ß√£o EXATA (mencione como foi obtida - Geocodificada, Coordenadas Manual, Descri√ß√£o Manual - e inclua os dados - Coordenadas/Link Gerado ou Descri√ß√£o Manual).
    - O lado da rua.
    - Os principais pontos da An√°lise Detalhada de IA sobre o buraco (Severidade/Tamanho, Perigos Potenciais, Contexto Relevante).
    - A SUGEST√ÉO de Categoria de Urg√™ncia pela IA e sua Justificativa.
    - As SUGEST√ïES de POSS√çVEIS CAUSAS e TIPOS DE A√á√ÉO/REPARO sugeridas pela IA (se dispon√≠veis).

    Dados da Den√∫ncia:
    Denunciante: {denunciante.get('nome', 'N√£o informado')}, de {denunciante.get('cidade_residencia', 'N√£o informada')}.
    Endere√ßo do Buraco: Rua {endereco.get('rua', 'N√£o informada')}, N¬∫ Pr√≥ximo: {buraco.get('numero_proximo', 'N√£o informado')}. Bairro: {endereco.get('bairro', 'N√£o informado')}. Cidade: {endereco.get('cidade_buraco', 'N√£o informada')}, Estado: {endereco.get('estado_buraco', 'N√£o informado')}. CEP: {buraco.get('cep_informado', 'N√£o informado')}.
    Lado da Rua: {buraco.get('lado_rua', 'N√£o informado')}.
    Localiza√ß√£o Exata Coletada: {loc_info_resumo}
    Descri√ß√£o Original: "{buraco.get('descricao_detalhada', 'N√£o fornecida.')}"

    Insights da An√°lise Detalhada de IA:
    {insights_ia}

    Sugest√£o de Urg√™ncia pela IA:
    {urgencia_ia}

    Sugest√µes de Causa e A√ß√£o pela IA:
    {sugestao_acao_ia}


    Gere o resumo em portugu√™s. Comece com "Relat√≥rio Krateras: Den√∫ncia de buraco..." ou algo similar. Use linguagem clara e direta.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"resumo_ia": f"‚ùå Gera√ß√£o de resumo bloqueada. Motivo: {block_reason}"}
        return {"resumo_ia": response.text.strip()}
    except Exception as e:
        return {"resumo_ia": f"‚ùå Erro ao gerar resumo completo com IA: {e}"}


# --- Fun√ß√µes de Navega√ß√£o e Renderiza√ß√£o de UI ---

def next_step():
    """Avan√ßa para o pr√≥ximo passo no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep', # Pode pular dependendo da escolha
        'collect_buraco_address_manual', # Pode pular dependendo da escolha
        'collect_buraco_details', # Unifica a coleta do resto e a geocodifica√ß√£o/localiza√ß√£o manual
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index < len(steps) - 1:
            st.session_state.step = steps[current_index + 1]
            # For√ßar um reruns para atualizar a UI para o pr√≥ximo passo
            st.rerun()
    except ValueError:
        # Caso o passo atual n√£o esteja na lista (erro ou estado inicial)
        st.session_state.step = steps[0]
        st.rerun()

def prev_step():
    """Volta para o passo anterior no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep',
        'collect_buraco_address_manual',
        'collect_buraco_details',
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index > 0:
             # L√≥gica para pular passos de CEP/Manual se n√£o foram usados
             if st.session_state.step == 'collect_buraco_details':
                  # Se chegamos aqui diretamente do m√©todo, voltamos para l√°
                  if st.session_state.get('endereco_coletado_via') == 'cep':
                      st.session_state.step = 'collect_buraco_address_cep'
                  elif st.session_state.get('endereco_coletado_via') == 'manual':
                      st.session_state.step = 'collect_buraco_address_manual'
                  else: # Fallback seguro
                       st.session_state.step = steps[current_index - 1]
             elif st.session_state.step == 'collect_buraco_address_cep' or st.session_state.step == 'collect_buraco_address_manual':
                  st.session_state.step = 'collect_buraco_address_method'
             else:
                  st.session_state.step = steps[current_index - 1]

             st.rerun()
    except ValueError:
         st.session_state.step = steps[0]
         st.rerun()


# --- Layout Principal da Aplica√ß√£o ---

st.title("Krateras üöÄ‚ú®üîí")
st.subheader("O Especialista Rob√≥tico de Den√∫ncia de Buracos")

# --- Fluxo da Aplica√ß√£o baseado no Estado ---

if st.session_state.step == 'start':
    st.write("""
    Ol√°! Krateras v3.2 entrando em √≥rbita! Sua miss√£o, caso aceite: denunciar buracos na rua
    para que possam ser consertados. A seguran√ßa dos seus dados e a precis√£o da den√∫ncia
    s√£o nossas prioridades m√°ximas.

    Utilizamos intelig√™ncia artificial (Google Gemini) e APIs de localiza√ß√£o (Google Geocoding,
    ViaCEP) para coletar, analisar e gerar um relat√≥rio detalhado para as autoridades competentes.

    Fui criado com o que h√° de mais avan√ßado em Programa√ß√£o, IA, Design Inteligente,
    Matem√°tica e L√≥gica Inabal√°vel. Com acesso seguro √†s APIs, sou impar√°vel.

    Clique em Iniciar para come√ßarmos a coleta de dados.
    """)

    st.info("‚ö†Ô∏è Suas chaves de API do Google (Gemini e Geocoding) devem ser configuradas nos Streamlit Secrets (`.streamlit/secrets.toml`) para que a IA e a geocodifica√ß√£o autom√°tica funcionem corretamente e de forma segura.")


    if st.button("Iniciar Miss√£o Den√∫ncia!"):
        # Carregar chaves e inicializar APIs antes de coletar dados
        gemini_api_key, geocoding_api_key = load_api_keys()
        st.session_state.geocoding_api_key = geocoding_api_key # Armazena a chave de geocoding no estado
        st.session_state.gemini_model = init_gemini(gemini_api_key) # Inicializa o modelo Gemini (cacheado)
        st.session_state.api_keys_loaded = True # Marca que tentamos carregar as chaves
        next_step()

elif st.session_state.step == 'collect_denunciante':
    st.header("--- üë§ Dados do Her√≥i/Hero√≠na da Vez! ---")
    st.write("Sua contribui√ß√£o √© super valiosa! üí™")

    # Formul√°rio para coletar dados do denunciante
    with st.form("form_denunciante"):
        nome = st.text_input("Seu nome completo:", key='nome_denunciante')
        idade = st.number_input("Sua idade (aproximada, se preferir, sem press√£o üòâ):", min_value=1, max_value=120, value=30, key='idade_denunciante')
        cidade_residencia = st.text_input("Em qual cidade voc√™ reside?:", key='cidade_residencia_denunciante')

        submitted = st.form_submit_button("Avan√ßar (Dados Denunciante)")

        if submitted:
            if not nome or not cidade_residencia:
                st.error("‚ùó Nome e Cidade de resid√™ncia s√£o campos obrigat√≥rios. Por favor, preencha-os.")
            else:
                st.session_state.denuncia_completa['denunciante'] = {
                    "nome": nome.strip(),
                    "idade": idade,
                    "cidade_residencia": cidade_residencia.strip()
                }
                st.success(f"Ol√°, {nome}! Dados coletados. Preparando para dados do buraco...")
                next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_method':
    st.header("--- üöß Detalhes do Buraco (Nosso Alvo!) ---")
    st.subheader("Como identificar a rua do buraco?")

    opcao_localizacao = st.radio(
        "Escolha o m√©todo:",
        ('Digitar nome manualmente', 'Buscar por CEP'),
        key='endereco_method'
    )

    # Use um bot√£o para confirmar a escolha e mover para o pr√≥ximo sub-step
    if st.button("Selecionar M√©todo"):
         if opcao_localizacao == 'Digitar nome manualmente':
              st.session_state.endereco_coletado_via = 'manual' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_manual'
         elif opcao_localizacao == 'Buscar por CEP':
              st.session_state.endereco_coletado_via = 'cep' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_cep'
         st.rerun() # For√ßa a atualiza√ß√£o para o pr√≥ximo passo

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_cep':
    st.header("--- üöß Detalhes do Buraco (Busca por CEP) ---")
    st.write("Digite o CEP do local do buraco.")

    with st.form("form_cep"):
        cep_input = st.text_input("Digite o CEP (apenas n√∫meros):", max_chars=8, key='cep_buraco')
        buscar_button = st.form_submit_button("Buscar CEP")

        if buscar_button:
            if not cep_input:
                st.error("‚ùó Por favor, digite um CEP.")
            else:
                dados_cep = buscar_cep(cep_input.strip())

                if 'erro' in dados_cep:
                    st.error(f"‚ùå Falha na busca por CEP: {dados_cep['erro']}")
                    st.session_state.cep_error = True # Marca que houve erro no CEP
                    st.session_state.dados_cep_validos = None # Limpa dados v√°lidos
                else:
                    st.session_state.dados_cep_validos = dados_cep # Armazena dados do CEP v√°lidos
                    st.session_state.cep_error = False # Limpa erro
                    st.success("‚úÖ Endere√ßo Encontrado (ViaCEP):")
                    st.write(f"**Rua:** {dados_cep.get('logradouro', 'N√£o informado')}")
                    st.write(f"**Bairro:** {dados_cep.get('bairro', 'N√£o informado')}")
                    st.write(f"**Cidade:** {dados_cep.get('localidade', 'N√£o informado')}")
                    st.write(f"**Estado:** {dados_cep.get('uf', 'N√£o informado')}")
                    st.write(f"**CEP:** {cep_input.strip()}")
                    st.info("Por favor, confirme se estes dados est√£o corretos. Se n√£o, use o bot√£o 'Corrigir Endere√ßo Manualmente'.")


    # Exibe bot√µes de a√ß√£o APENAS se tentou buscar CEP
    if st.session_state.get('cep_buraco'): # Verifica se o input de CEP foi preenchido
        if st.session_state.get('dados_cep_validos'): # Se dados do CEP foram encontrados e s√£o v√°lidos
            st.session_state.denuncia_completa['buraco'] = {
                'endereco': {
                    'rua': st.session_state.dados_cep_validos.get('logradouro', ''),
                    'bairro': st.session_state.dados_cep_validos.get('bairro', ''),
                    'cidade_buraco': st.session_state.dados_cep_validos.get('localidade', ''),
                    'estado_buraco': st.session_state.dados_cep_validos.get('uf', '')
                },
                'cep_informado': st.session_state.get('cep_buraco', '')
            }
            # Bot√£o para confirmar e ir para detalhes (n√∫mero, descri√ß√£o)
            if st.button("Confirmar Endere√ßo e Avan√ßar"):
                 next_step()

            # Bot√£o para corrigir manualmente (volta para entrada manual)
            if st.button("Corrigir Endere√ßo Manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.rerun()

        elif st.session_state.get('cep_error'): # Se houve erro na busca por CEP
            st.warning("N√£o foi poss√≠vel obter o endere√ßo por CEP.")
            if st.button("Tentar novamente por CEP"):
                 st.session_state.cep_error = False # Reseta o erro para tentar novamente
                 st.rerun() # For√ßa reload para resetar o formul√°rio de CEP
            if st.button("Digitar endere√ßo manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.rerun()
        # else: # Caso clicou buscar mas input estava vazio, o erro √© exibido no form
        #     pass # Sem bot√µes de a√ß√£o extras

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_manual':
    st.header("--- üöß Detalhes do Buraco (Entrada Manual) ---")
    st.write("Digite os dados do endere√ßo do buraco manualmente.")

    # Use os dados do CEP pr√©-preenchidos se vier dessa rota
    endereco_inicial = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})

    with st.form("form_manual_address"):
        rua_manual = st.text_input("Nome completo da rua:", value=endereco_inicial.get('rua', ''), key='rua_manual_buraco')
        bairro_manual = st.text_input("Bairro onde est√° o buraco (opcional):", value=endereco_inicial.get('bairro', ''), key='bairro_manual_buraco')
        cidade_manual = st.text_input("Cidade onde est√° o buraco:", value=endereco_inicial.get('cidade_buraco', ''), key='cidade_manual_buraco')
        estado_manual = st.text_input("Estado (UF) onde est√° o buraco:", value=endereco_inicial.get('estado_buraco', ''), max_chars=2, key='estado_manual_buraco')

        submitted = st.form_submit_button("Avan√ßar (Endere√ßo Manual)")

        if submitted:
            if not rua_manual or not cidade_manual or not estado_manual:
                st.error("‚ùó Rua, Cidade e Estado s√£o campos obrigat√≥rios para o endere√ßo do buraco.")
            else:
                st.session_state.denuncia_completa['buraco'] = {
                    'endereco': {
                        'rua': rua_manual.strip(),
                        'bairro': bairro_manual.strip(),
                        'cidade_buraco': cidade_manual.strip(),
                        'estado_buraco': estado_manual.strip().upper() # Guarda em mai√∫sculas
                    },
                    'cep_informado': st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado', '') # Mant√©m o CEP se veio da busca
                }
                next_step() # Move para a pr√≥xima etapa (coleta de detalhes)

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_details':
    st.header("--- üöß Detalhes Finais do Buraco ---")
    st.subheader("Informa√ß√µes cruciais para a localiza√ß√£o e an√°lise!")

    # Exibe o endere√ßo b√°sico j√° coletado para refer√™ncia
    endereco_basico = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})
    st.write(f"Endere√ßo Base: {endereco_basico.get('rua', 'N√£o informado')}, {endereco_basico.get('cidade_buraco', 'N√£o informada')} - {endereco_basico.get('estado_buraco', 'N√£o informado')}")
    if endereco_basico.get('bairro'):
         st.write(f"Bairro: {endereco_basico.get('bairro')}")
    if st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado'):
         st.write(f"CEP informado: {st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado')}")

    st.markdown("---") # Separador visual

    with st.form("form_buraco_details"):
        numero_proximo = st.text_input("N√∫mero do im√≥vel mais pr√≥ximo ou ponto de refer√™ncia (ESSENCIAL para precis√£o! Ex: 'Em frente ao 123', 'Esquina c/ Rua X'):", key='numero_proximo_buraco')
        lado_rua = st.text_input("Lado da rua onde est√° o buraco (Ex: 'lado par', 'lado √≠mpar', 'lado direito', 'lado esquerdo'):", key='lado_rua_buraco')
        descricao_detalhada = st.text_area("Sua descri√ß√£o detalhada do buraco (Tamanho, profundidade, perigos, se tem √°gua, antigo/novo, etc. Hora da IA Brilhar!):", key='descricao_buraco')

        submitted = st.form_submit_button("Coletar Localiza√ß√£o e Continuar")

        if submitted:
            if not numero_proximo or not lado_rua or not descricao_detalhada:
                 st.error("‚ùó N√∫mero pr√≥ximo/refer√™ncia, Lado da rua e Descri√ß√£o detalhada s√£o campos obrigat√≥rios.")
            else:
                # Atualiza o dicion√°rio de buraco no estado
                st.session_state.denuncia_completa['buraco'].update({
                    'numero_proximo': numero_proximo.strip(),
                    'lado_rua': lado_rua.strip(),
                    'descricao_detalhada': descricao_detalhada.strip()
                })

                # --- Tentar Geocodifica√ß√£o Autom√°tica ---
                st.session_state.denuncia_completa['localizacao_exata_processada'] = {"tipo": "N√£o informada"} # Reseta localiza√ß√£o processada
                tentou_geocodificar = False
                geocodificacao_sucesso = False
                motivo_falha_geo = ""

                rua_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('rua')
                cidade_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('cidade_buraco')
                estado_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('estado_buraco')

                tem_dados_para_geo = (st.session_state.geocoding_api_key and rua_buraco and numero_proximo and cidade_buraco and estado_buraco)

                if tem_dados_para_geo:
                    st.info("‚úÖ Chave de Geocodifica√ß√£o e dados b√°sicos de endere√ßo completos encontrados. Tentando gerar o link do Google Maps automaticamente...")
                    tentou_geocodificar = True
                    geo_resultado = geocodificar_endereco(
                        rua_buraco,
                        numero_proximo.strip(), # Usa o n√∫mero/refer√™ncia como base para geocodifica√ß√£o
                        cidade_buraco,
                        estado_buraco,
                        st.session_state.geocoding_api_key
                    )

                    if 'erro' not in geo_resultado:
                        geocodificacao_sucesso = True
                        st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                            "tipo": "Geocodificada (API)",
                            "latitude": geo_resultado['latitude'],
                            "longitude": geo_resultado['longitude'],
                            "endereco_formatado_api": geo_resultado.get('endereco_formatado_api', ''),
                            "google_maps_link_gerado": geo_resultado['google_maps_link_gerado'],
                            "google_embed_link_gerado": geo_resultado.get('google_embed_link_gerado')
                        }
                        st.success("‚úÖ Localiza√ß√£o Obtida (via Geocodifica√ß√£o Autom√°tica)!")
                    else:
                        st.warning(f"‚ùå Falha na Geocodifica√ß√£o autom√°tica: {geo_resultado['erro']}")
                        motivo_falha_geo = f"Erro da API de Geocodifica√ß√£o: {geo_resultado.get('erro', 'Motivo desconhecido')}"
                elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                    st.warning("‚ö†Ô∏è AVISO: Chave de Geocodifica√ß√£o fornecida, mas dados de endere√ßo insuficientes (precisa de Rua, N√∫mero Pr√≥ximo, Cidade, Estado). Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                    motivo_falha_geo = "Dados insuficientes para Geocodifica√ß√£o (requer Rua, N√∫mero, Cidade, Estado)."
                elif not st.session_state.geocoding_api_key:
                    st.warning("‚ö†Ô∏è AVISO: Chave de API de Geocodifica√ß√£o N√ÉO fornecida. Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                    motivo_falha_geo = "Chave de API de Geocodifica√ß√£o n√£o fornecida."


                # --- Coleta de Localiza√ß√£o Manual (se a geocodifica√ß√£o falhou ou n√£o foi tentada) ---
                if not geocodificacao_sucesso:
                     st.subheader("--- ‚úçÔ∏è Fornecer Localiza√ß√£o Exata Manualmente (Alternativa ou Corre√ß√£o) ---")
                     if motivo_falha_geo:
                          st.info(f"(Motivo para entrada manual: {motivo_falha_geo})")

                     st.write("‚û°Ô∏è Por favor, forne√ßa a localiza√ß√£o EXATA do buraco de forma manual:")
                     st.markdown("""
                     <p>A MELHOR forma √© COPIAR AS COORDENADAS (Lat,Long) ou um LINK do Google Maps que as contenha.<br>
                     Sugest√£o: Abra o Google Maps, encontre o buraco, <strong>TOQUE/CLIQUE E SEGURE NO LOCAL PREOCUPANTE</strong>.
                     As coordenadas ou um link aparecer√£o.</p>
                     <p>Alternativamente, uma DESCRI√á√ÉO MUITO DETALHADA do local EXATO no mapa.</p>
                     """, unsafe_allow_html=True)

                     localizacao_manual_input = st.text_input("Insira COORDENADAS (Lat,Long), LINK do Maps com Coordenadas, OU DESCRI√á√ÉO DETALHADA:", key='localizacao_manual')

                     # Tentar extrair coordenadas do input manual (reusando regex)
                     lat: Optional[float] = None
                     lon: Optional[float] = None
                     tipo_manual_processado = "Descri√ß√£o Manual Detalhada"
                     input_original_manual = localizacao_manual_input.strip()

                     if input_original_manual:
                         # Regex para tentar achar coordenadas em diferentes formatos (Lat,Long ou em links comuns)
                         # Tenta cobrir "lat,long", "@lat,long" em links
                         match_coords = re.search(r'(-?\d+\.?\d*)[,\s/]+(-?\d+\.?\d*)', input_original_manual)
                         if match_coords:
                             try:
                                 teste_lat = float(match_coords.group(1))
                                 teste_lon = float(match_coords.group(2))
                                 if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                     lat = teste_lat
                                     lon = teste_lon
                                     tipo_manual_processado = "Coordenadas Fornecidas/Extra√≠das Manualmente"
                                     st.info("‚úÖ Coordenadas v√°lidas detectadas no input manual! Navega√ß√£o calibrada.")
                                 else:
                                     st.warning("‚ö†Ô∏è Parece um formato de coordenadas, mas fora da faixa esperada. Tratando como descri√ß√£o.")
                             except ValueError:
                                 st.info("‚ÑπÔ∏è Entrada manual n√£o parece ser coordenadas v√°lidas. Tratando como descri√ß√£o detalhada.")
                         elif input_original_manual.startswith("http"):
                              st.info("‚ÑπÔ∏è Entrada manual √© um link. Tentando extrair coordenadas (sujeito a formato do link)...")
                              match_maps_link = re.search(r'/@(-?\d+\.?\d*),(-?\d+\.?\d*)', input_original_manual)
                              if match_maps_link:
                                  try:
                                      teste_lat = float(match_maps_link.group(1))
                                      teste_lon = float(match_maps_link.group(2))
                                      if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                           lat = teste_lat
                                           lon = teste_lon
                                           tipo_manual_processado = "Coordenadas Extra√≠das de Link (Manual)"
                                           st.info("‚úÖ Coordenadas extra√≠das de link do Maps no input manual!")
                                      else:
                                           st.warning("‚ö†Ô∏è Coordenadas extra√≠das do link no input manual fora da faixa esperada. Tratando como descri√ß√£o.")
                                  except ValueError:
                                     st.info("‚ÑπÔ∏è Valores no link n√£o parecem coordenadas v√°lidas. Tratando como descri√ß√£o.")
                              else:
                                   st.info("‚ÑπÔ∏è N√£o foi poss√≠vel extrair coordenadas reconhec√≠veis do link fornecido manualmente.")
                         else:
                              st.info("‚ÑπÔ∏è Entrada manual n√£o detectada como coordenadas ou link. Tratando como descri√ß√£o detalhada.")


                     # Armazenar o resultado do input manual no dicion√°rio de localiza√ß√£o processada
                     if lat is not None and lon is not None:
                         st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                              "tipo": tipo_manual_processado,
                              "input_original": input_original_manual,
                              "latitude": lat,
                              "longitude": lon,
                              "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat},{lon}",
                              "google_embed_link_gerado": f"https://www.google.com/maps/embed/v1/place?key={st.session_state.geocoding_api_key}&q={lat},{lon}" if st.session_state.geocoding_api_key else None # Tenta gerar embed link se tiver chave
                         }
                     elif input_original_manual: # Se h√° input manual, mas n√£o extraiu Lat/Long
                         st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                              "tipo": "Descri√ß√£o Manual Detalhada",
                              "input_original": input_original_manual,
                              "descricao_manual": input_original_manual
                         }
                     # else: Se input manual est√° vazio, o tipo continua "N√£o informada" como inicializado

                     # Se houve uma tentativa de geocodifica√ß√£o autom√°tica que falhou, registra o motivo
                     if tentou_geocodificar and not geocodificacao_sucesso:
                          st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = motivo_falha_geo
                     elif not st.session_state.geocoding_api_key:
                          st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Chave de API de Geocodifica√ß√£o n√£o fornecida."
                     elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                          st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Dados insuficientes para Geocodifica√ß√£o (requer Rua, N√∫mero, Cidade, Estado)."


                     # Agora que a localiza√ß√£o manual foi processada, passamos para a an√°lise de IA
                     if st.session_state.denuncia_completa['localizacao_exata_processada'].get('tipo') == "N√£o informada":
                          st.warning("‚ö†Ô∏è Nenhuma localiza√ß√£o exata estruturada (coordenadas ou link) foi fornecida ou detectada. O relat√≥rio depender√° apenas da descri√ß√£o textual e endere√ßo base.")
                          # Ainda assim, podemos ir para a pr√≥xima etapa se a descri√ß√£o foi fornecida.
                          next_step()
                     else:
                         next_step() # Avan√ßa para a etapa de processamento IA

                else: # Se a geocodifica√ß√£o autom√°tica foi bem-sucedida, apenas avan√ßamos
                    next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'processing_ia':
    st.header("--- üß† Processamento Rob√≥tico de IA ---")
    st.write("Por favor, aguarde enquanto o Krateras analisa os dados e gera o relat√≥rio com a intelig√™ncia do Google Gemini.")

    # Verifica se o modelo Gemini est√° dispon√≠vel antes de processar
    if st.session_state.gemini_model:
        buraco_data = st.session_state.denuncia_completa.get('buraco', {})

        # Rodar as an√°lises de IA
        st.session_state.denuncia_completa['insights_ia'] = analisar_descricao_gemini(buraco_data.get('descricao_detalhada', ''), st.session_state.gemini_model)
        st.session_state.denuncia_completa['urgencia_ia'] = categorizar_urgencia_gemini(buraco_data, st.session_state.denuncia_completa['insights_ia'], st.session_state.gemini_model)
        st.session_state.denuncia_completa['sugestao_acao_ia'] = sugerir_causa_e_acao_gemini(buraco_data, st.session_state.denuncia_completa['insights_ia'], st.session_state.gemini_model)
        st.session_state.denuncia_completa['resumo_ia'] = gerar_resumo_completo_gemini(st.session_state.denuncia_completa, st.session_state.gemini_model)

        # Avan√ßa para exibir o relat√≥rio ap√≥s o processamento
        next_step()
    else:
        st.warning("‚ö†Ô∏è Modelo Google Gemini n√£o inicializado. Pulando an√°lises de IA.")
        # Define resultados IA como indispon√≠veis
        st.session_state.denuncia_completa['insights_ia'] = {"insights": "An√°lise de descri√ß√£o via IA indispon√≠vel."}
        st.session_state.denuncia_completa['urgencia_ia'] = {"urgencia_ia": "Sugest√£o de urg√™ncia via IA indispon√≠vel."}
        st.session_state.denuncia_completa['sugestao_acao_ia'] = {"sugestao_acao_ia": "Sugest√µes de causa/a√ß√£o via IA indispon√≠veis."}
        st.session_state.denuncia_completa['resumo_ia'] = {"resumo_ia": "Resumo completo via IA indispon√≠vel."}
        next_step() # Avan√ßa mesmo sem IA se n√£o estiver dispon√≠vel

    # Note: Streamlit reruns automatically after state changes in callbacks or after button clicks.
    # Forcing rerun explicitly after long processes like API calls or IA is not usually needed if state is updated correctly.
    # However, next_step() explicitly calls st.rerun() which is fine for controlling flow.


elif st.session_state.step == 'show_report':
    st.header("üìä RELAT√ìRIO FINAL DA DEN√öNCIA KRATERAS üìä")
    st.write("‚úÖ MISS√ÉO KRATERAS CONCLU√çDA! RELAT√ìRIO GERADO. ‚úÖ")

    dados_completos = st.session_state.denuncia_completa
    denunciante = dados_completos.get('denunciante', {})
    buraco = dados_completos.get('buraco', {})
    endereco = buraco.get('endereco', {})
    localizacao_exata = dados_completos.get('localizacao_exata_processada', {})
    insights_ia = dados_completos.get('insights_ia', {})
    urgencia_ia = dados_completos.get('urgencia_ia', {})
    sugestao_acao_ia = dados_completos.get('sugestao_acao_ia', {})
    resumo_ia = dados_completos.get('resumo_ia', {})

    st.markdown("---")

    with st.expander("üë§ Dados do Denunciante"):
        st.write(f"**Nome:** {denunciante.get('nome', 'N√£o informado')}")
        st.write(f"**Idade:** {denunciante.get('idade', 'N√£o informado')}")
        st.write(f"**Cidade de Resid√™ncia:** {denunciante.get('cidade_residencia', 'N√£o informada')}")

    with st.expander("üöß Dados do Buraco"):
        st.write(f"**Rua:** {endereco.get('rua', 'N√£o informada')}")
        if buraco.get('numero_proximo'):
            st.write(f"**Refer√™ncia/N√∫mero Pr√≥ximo:** {buraco.get('numero_proximo')}")
        if endereco.get('bairro'):
            st.write(f"**Bairro:** {endereco.get('bairro')}")
        if endereco.get('cidade_buraco'):
             st.write(f"**Cidade do Buraco:** {endereco.get('cidade_buraco')}")
        if endereco.get('estado_buraco'):
            st.write(f"**Estado do Buraco:** {endereco.get('estado_buraco')}")
        if buraco.get('cep_informado'):
            st.write(f"**CEP Informado:** {buraco.get('cep_informado')}")
        st.write(f"**Lado da Rua:** {buraco.get('lado_rua', 'N√£o informado')}")
        st.write(f"**Descri√ß√£o Original do Denunciante:**")
        st.info(buraco.get('descricao_detalhada', 'Nenhuma descri√ß√£o fornecida.'))


    with st.expander("üìç Localiza√ß√£o Exata"):
        tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
        st.write(f"**Tipo de Coleta:** {tipo_loc}")

        if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
            lat = localizacao_exata.get('latitude')
            lon = localizacao_exata.get('longitude')

            if lat is not None and lon is not None:
                 st.write(f"**Coordenadas:** `{lat}, {lon}`")

                 # Exibir Mapa Visual
                 st.subheader("Visualiza√ß√£o no Mapa")
                 try:
                     # Tenta usar st.map se coordenadas v√°lidas
                     map_data = pd.DataFrame({'lat': [lat], 'lon': [lon]})
                     st.map(map_data, zoom=18, use_container_width=True)
                     st.info("‚ÑπÔ∏è O mapa acima √© uma representa√ß√£o aproximada usando MapLibre/OpenStreetMap.")

                     # Tenta incorporar Google Maps se houver link embed gerado
                     embed_link = localizacao_exata.get('google_embed_link_gerado')
                     if embed_link:
                         st.subheader("Visualiza√ß√£o no Google Maps (Embed)")
                         # Incorpora o iframe do Google Maps
                         st.components.v1.html(
                             f'<iframe width="100%" height="450" frameborder="0" style="border:0" src="{embed_link}" allowfullscreen></iframe>',
                             height=470, # Altura um pouco maior para incluir borda
                             scrolling=False
                         )
                     elif st.session_state.geocoding_api_key:
                          st.warning("‚ö†Ô∏è N√£o foi poss√≠vel gerar um mapa Google Maps incorporado. Verifique a chave de API Geocoding e se a Embed API est√° habilitada (pode requerer configura√ß√£o no Google Cloud).")

                 except Exception as map_error:
                     st.error(f"‚ùå Erro ao gerar visualiza√ß√£o do mapa: {map_error}")


                 link_maps = localizacao_exata.get('google_maps_link_gerado')
                 if link_maps:
                     st.write(f"**Link Direto Google Maps:** [Abrir no Google Maps]({link_maps})")

                 if localizacao_exata.get('endereco_formatado_api'):
                      st.write(f"**Endere√ßo Formatado (API):** {localizacao_exata.get('endereco_formatado_api')}")
                 if localizacao_exata.get('input_original'):
                     st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")


        elif tipo_loc == 'Descri√ß√£o Manual Detalhada':
            st.write(f"**Descri√ß√£o Manual:**")
            st.info(localizacao_exata.get('descricao_manual', 'N√£o informada'))
            if localizacao_exata.get('input_original'):
                st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")

        else:
            st.warning("Localiza√ß√£o exata n√£o coletada de forma estruturada (coordenadas/link). O relat√≥rio depender√° da descri√ß√£o e endere√ßo base.")

        # Inclui motivo da falha na geocodifica√ß√£o se aplic√°vel
        if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
             st.info(f"‚ÑπÔ∏è Nota: N√£o foi poss√≠vel obter a localiza√ß√£o exata via Geocodifica√ß√£o autom√°tica. Motivo: {localizacao_exata.get('motivo_falha_geocodificacao_anterior')}")


    if st.session_state.gemini_model:
        st.markdown("---")
        with st.expander("üß† An√°lise Detalhada da Descri√ß√£o (IA Gemini)"):
            st.write(insights_ia.get('insights', 'An√°lise n√£o realizada ou com erro.'))

        with st.expander("üö¶ Sugest√£o de Urg√™ncia (IA Gemini)"):
            st.write(urgencia_ia.get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o gerada ou com erro.'))

        with st.expander("üõ†Ô∏è Sugest√µes de Causa e A√ß√£o (IA Gemini)"):
            st.write(sugestao_acao_ia.get('sugestao_acao_ia', 'Sugest√µes n√£o geradas ou com erro.'))

        st.markdown("---")
        st.subheader("üìú Resumo Narrativo Inteligente (IA Gemini)")
        st.write(resumo_ia.get('resumo_ia', 'Resumo n√£o gerado ou com erro.'))
    else:
        st.warning("‚ö†Ô∏è An√°lises e Resumo da IA n√£o dispon√≠veis (Chave Gemini n√£o configurada).")


    st.markdown("---")
    st.write("Esperamos que este relat√≥rio ajude a consertar o buraco!")

    # Op√ß√£o para reiniciar o processo
    if st.button("Iniciar Nova Den√∫ncia"):
        # Limpa o estado da sess√£o para recome√ßar
        for key in st.session_state.keys():
            del st.session_state[key]
        st.rerun()

    # Op√ß√£o para exibir dados brutos (√∫til para debug ou exporta√ß√£o)
    with st.expander("üîå Ver Dados Brutos (JSON)"):
        st.json(dados_completos)

# --- Rodar a aplica√ß√£o ---
# A execu√ß√£o principal do script Streamlit √© gerenciada pelo pr√≥prio Streamlit.
# As fun√ß√µes s√£o chamadas conforme o estado da sess√£o e as intera√ß√µes do usu√°rio.
# O c√≥digo abaixo √© apenas para garantir que o script seja executado como um app Streamlit.
if __name__ == "__main__":
    # Streamlit cuida do loop principal, n√£o precisamos de uma fun√ß√£o main tradicional
    # O c√≥digo fora das fun√ß√µes e no topo √© executado em cada rerun.
    # O fluxo √© controlado pelos ifs/elifs baseados em st.session_state.step
    pass # Nada a fazer aqui al√©m do que j√° est√° no corpo principal do script
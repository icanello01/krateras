# -*- coding: utf-8 -*-
"""
Krateras üößüößüöß: O Especialista Rob√≥tico de Den√∫ncia de Buracos (v10.1 - Estabilidade Refor√ßada Final)

Bem-vindo √† vers√£o finalizada do Krateras, com estabilidade m√°xima e geolocaliza√ß√£o completa!

Tecnologias: Python, Streamlit, Google Gemini API (Text and Vision), Google Geocoding API, ViaCEP, Google Maps Embed, OpenStreetMap Link.
Objetivo: Coletar dados de den√∫ncias de buracos com detalhes estruturados e observa√ß√µes,
incluir imagem para refer√™ncia visual, geocodifica√ß√£o, e gerar relat√≥rios
detalhados e priorizados com visualiza√ß√£o de mapa.

Vamos juntos consertar essas ruas! Vers√£o final calibrada para precis√£o e robustez!
"""

import streamlit as st
import requests
import google.generativeai as genai
from datetime import datetime
from typing import Dict, Any, Optional, Tuple
from image_analyzer import processar_analise_imagem, mostrar_feedback_analise
import re
import json
import pandas as pd
import io
import urllib.parse # Importado para lidar com URLs

# Image URL provided by the user
LOGO_URL = "https://raw.githubusercontent.com/icanello01/krateras/refs/heads/main/logo.png"


# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Krateras üößüößüöß - Den√∫ncia de Buracos",
    page_icon="üöß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Add the Logo ---
# Use columns to center the image
col1, col2, col3 = st.columns([1, 2, 1]) # Adjust column ratios as needed
with col2: # Place the image in the middle column
    st.image(LOGO_URL, width=650) # Adjust width as needed


# --- Estilos CSS Personalizados (Opcional, para um toque extra) ---
st.markdown("""
<style>
.reportview-container .main .block-container {
    padding-top: 2rem;
    padding-right: 3rem;
    padding-left: 3rem;
    padding-bottom: 2rem;
}
h1, h2, h3 {
    color: #4A90E2; /* Azul Cratera */
}
.stButton>button {
    background-color: #101217; 
    color: white;
    font-weight: bold;
    border-radius: 10px;
    padding: 0.5rem 1rem;
    transition: all 0.2s ease-in-out;
}
.stButton>button:hover {
    background-color: #101217; 
    color: white;
}
.stTextInput, .stNumberInput, .stTextArea, .stRadio, .stSelectbox, .stFileUploader {
    margin-bottom: 10px;
}
.stSpinner > div > div {
    border-top-color: #4A90E2 !important;
}
.css-1aumqxt { /* Estilo para st.info */
    border-left: 5px solid #4A90E2 !important;
}
.css-1r6cdft { /* Estilo para st.warning */
     border-left: 5px solid #F5A623 !important;
}
.css-t9s6qg { /* Estilo para st.error */
     border-left: 5px solid #D0021B !important;
}
.css-1u3jtzg { /* Estilo para st.success */
     border-left: 5px solid #7ED321 !important;
}
/* Ajustes para expanders */
.streamlit-expanderHeader {
    font-size: 1.1em !important;
    font-weight: bold !important;
    color: #4A90E2 !important;
}
/* Classe para ajustar o padding interno dos expanders */
/* As classes exatas podem variar, inspecione o elemento se precisar refinar */
.st-emotion-cache-s5fjsg, .st-emotion-cache-1njf35f {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}
</style>
""", unsafe_allow_html=True)


# --- Inicializa√ß√£o de Estado da Sess√£o ---
# Gerencia o fluxo da aplica√ß√£o web
if 'step' not in st.session_state:
    st.session_state.step = 'start'
if 'denuncia_completa' not in st.session_state:
    st.session_state.denuncia_completa = {}
if 'api_keys_loaded' not in st.session_state:
    st.session_state.api_keys_loaded = False
if 'gemini_model' not in st.session_state:
    st.session_state.gemini_model = None
if 'gemini_vision_model' not in st.session_state:
    st.session_state.gemini_vision_model = None
if 'geocoding_api_key' not in st.session_state:
    st.session_state.geocoding_api_key = None

# --- üîë Gerenciamento de Chaves Secretas (Streamlit Secrets) ---
# Utiliza o .streamlit/secrets.toml para carregar chaves

def load_api_keys() -> tuple[Optional[str], Optional[str]]:
    """
    Tenta obter as chaves de API do Google Gemini (Text) e Google Maps Geocoding de Streamlit Secrets.
    Retorna None se n√£o encontradas.
    """
    gemini_key = st.secrets.get('GOOGLE_API_KEY')
    geocoding_key = st.secrets.get('geocoding_api_key')

    if not gemini_key:
        st.warning("‚ö†Ô∏è Segredo 'GOOGLE_API_KEY' n√£o encontrado nos Streamlit Secrets. Funcionalidades de IA (Gemini Text) estar√£o desabilitadas.")
    if not geocoding_key:
        st.warning("‚ö†Ô∏è Segredo 'geocoding_api_key' n√£o encontrado nos Streamlit Secrets. Geocodifica√ß√£o autom√°tica e mapa Google Embed estar√£o desabilitados.")
        st.info("‚ÑπÔ∏è Para configurar os segredos, crie um arquivo `.streamlit/secrets.toml` na raiz do seu projeto Streamlit com:\n```toml\nGOOGLE_API_KEY = \"SUA_CHAVE_GEMINI\"\ngeocoding_api_key = \"SUA_CHAVE_GEOCODING\"\n```\nLembre-se que as APIs Geocoding e Gemini podem gerar custos. Ative-as no Google Cloud e verifique sua configura√ß√£o de cobran√ßa.")

    return gemini_key, geocoding_key

# --- Inicializar APIs (Cacheado para performance) ---

@st.cache_resource
def init_gemini_text_model(api_key: Optional[str]) -> Tuple[Optional[genai.GenerativeModel], Optional[genai.GenerativeModel]]:
    """Inicializa o modelo Google Gemini (Texto APENAS) com cache."""
    if not api_key:
        st.error("‚ùå ERRO na F√°brica de Modelos: Chave de API Gemini n√£o fornecida.")
        return None, None
    try:
        genai.configure(api_key=api_key)
        st.success("‚úÖ Conex√£o com API Google Gemini estabelecida.")

        available_models = list(genai.list_models())
        text_models = [m for m in available_models if 'generateContent' in m.supported_generation_methods]

        # Selecionar modelo de Texto preferencial
        text_model_obj: Optional[genai.GenerativeModel] = None
        preferred_text_names = ['gemini-1.5-flash-latest', 'gemini-1.0-pro', 'gemini-pro']
        for name in preferred_text_names:
            # Verifica se o nome preferencial est√° na lista de modelos de texto dispon√≠veis
            found_model = next((m for m in text_models if m.name.endswith(name)), None)
            if found_model:
                text_model_obj = genai.GenerativeModel(found_model.name)
                st.success(f"‚úÖ Modelo de Texto Gemini selecionado: '{found_model.name.replace('models/', '')}'. A IA Textual est√° online!")
                break
        if not text_model_obj:
            if text_models:
                # Fallback para o primeiro modelo de texto dispon√≠vel
                text_model_obj = genai.GenerativeModel(text_models[0].name)
                st.warning(f"‚ö†Ô∏è AVISO: Modelos de texto Gemini preferenciais n√£o encontrados. Usando fallback: '{text_models[0].name.replace('models/', '')}'.")
            else:
                 st.error("‚ùå ERRO na F√°brica de Modelos: Nenhum modelo de texto Gemini compat√≠vel encontrado na sua conta.")
        vision_model_obj = None
        if text_model_obj and 'gemini-pro-vision' in [m.name for m in available_models]:
            vision_model_obj = genai.GenerativeModel('gemini-pro-vision')
            st.success("‚úÖ Modelo de Vis√£o Gemini (gemini-pro-vision) inicializado com sucesso!")
        return text_model_obj, vision_model_obj

    except Exception as e:
        st.error(f"‚ùå ERRO no Painel de Controle Gemini: Falha na inicializa√ß√£o dos modelos Google Gemini. Verifique sua chave e status do servi√ßo.")
        st.exception(e)
        return None, None


# --- Fun√ß√µes de API Call ---
# Fun√ß√µes de API Call n√£o s√£o @st.cache_data para permitir novas tentativas dentro da mesma sess√£o
# sem esperar o cache expirar, se o usu√°rio tentar corrigir um CEP ou endere√ßo.

def buscar_cep_uncached(cep: str) -> Dict[str, Any]:
    """Consulta a API ViaCEP para obter dados de endere√ßo com tratamento de erros (sem cache)."""
    cep_limpo = cep.replace("-", "").replace(".", "").strip()
    if len(cep_limpo) != 8 or not cep_limpo.isdigit():
        return {"erro": "Formato de CEP inv√°lido. Precisa de 8 d√≠gitos, amig√£o!"}

    url = f"https://viacep.com.br/ws/{cep_limpo}/json/"
    try:
        response = requests.get(url, timeout=10) # Tempo menor para resposta r√°pida
        response.raise_for_status()
        data = response.json()
        if 'erro' in data and data['erro'] is True:
            return {"erro": f"CEP '{cep_limpo}' n√£o encontrado no ViaCEP. Ele se escondeu! üßê"}
        if not data.get('logradouro') or not data.get('localidade') or not data.get('uf'):
             return {"erro": f"CEP '{cep_limpo}' encontrado, mas os dados de endere√ßo est√£o incompletos. O ViaCEP s√≥ contou parte da hist√≥ria!"}
        return data
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({10}s) ao buscar o CEP '{cep_limpo}'. O ViaCEP n√£o responde! üò¥"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com o ViaCEP para o CEP '{cep_limpo}': {e}. Problemas na linha!"}
    except Exception as e:
         return {"erro": f"Ocorreu um erro inesperado ao buscar o CEP '{cep_limpo}': {e}. Isso n√£o estava nos meus manuais!"}

def geocodificar_endereco_uncached(rua: str, numero: str, cidade: str, estado: str, api_key: str) -> Dict[str, Any]:
    """Tenta obter coordenadas geogr√°ficas e link Google Maps via Google Maps Geocoding API (sem cache)."""
    if not api_key:
        return {"erro": "Chave de API de Geocodifica√ß√£o n√£o fornecida."}
    if not rua or not numero or not cidade or not estado:
         return {"erro": "Dados de endere√ßo insuficientes (requer rua, n√∫mero, cidade, estado) para geocodificar."}

    address = f"{rua}, {numero}, {cidade}, {estado}"
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={requests.utils.quote(address)}&key={api_key}"

    try:
        response = requests.get(url, timeout=10) # Tempo menor para resposta r√°pida
        response.raise_for_status()
        data = response.json()

        if data['status'] != 'OK':
            status = data.get('status', 'STATUS DESCONHECIDO')
            error_msg = data.get('error_message', 'Sem mensagem adicional.')
            # Trata casos espec√≠ficos comuns
            if status == 'ZERO_RESULTS':
                 error_msg = "Nenhum local exato encontrado para o endere√ßo fornecido. Tente refinar o n√∫mero ou refer√™ncia, ou use a entrada manual de coordenadas/descri√ß√£o."
            elif status == 'OVER_DAILY_LIMIT' or status == 'OVER_QUERY_LIMIT':
                 error_msg = "Limite de uso da API Geocoding excedido. Verifique sua configura√ß√£o de cobran√ßa ou espere."
            elif status == 'REQUEST_DENIED':
                 error_msg = "Requisi√ß√£o √† API Geocoding negada. Verifique sua chave, restri√ß√µes de API ou configura√ß√µes de cobran√ßa."
            # Inclui outros status conhecidos
            elif status == 'INVALID_REQUEST':
                 error_msg = "Requisi√ß√£o inv√°lida (endere√ßo mal formatado?)."
            elif status == 'UNKNOWN_ERROR':
                 error_msg = "Erro desconhecido na API Geocoding."
            else:
                 error_msg = f"Status da API: {status}. {error_msg}"


            return {"erro": f"Geocodifica√ß√£o falhou. Status: {status}. Mensagem: {error_msg}"}

        if not data['results']:
             return {"erro": "Geocodifica√ß√£o falhou. Nenhum local exato encontrado para o endere√ßo fornecido. Tente refinar o n√∫mero ou refer√™ncia."}

        location = data['results'][0]['geometry']['location']
        lat = location['lat']
        lng = location['lng']
        formatted_address = data['results'][0].get('formatted_address', address)

        return {
            "latitude": lat,
            "longitude": lng,
            "endereco_formatado_api": formatted_address,
            "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat},{lng}",
            "google_embed_link_gerado": f"https://www.google.com/maps/embed/v1/place?key={api_key}&q={lat},{lng}"
        }
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({10}s) ao tentar geocodificar: {address}"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com a API de Geocodifica√ß√£o: {address}. Detalhes: {e}"}
    except Exception as e:
        return {"erro": f"Ocorreu um erro inesperado durante a geocodifica√ß√£o: {address}. Detalhes: {e}"}


# --- Fun√ß√µes de An√°lise de IA (Cacheado para resultados est√°veis por sess√£o) ---
# Safety settings configuradas para permitir discuss√µes sobre perigos na rua
SAFETY_SETTINGS = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

@st.cache_data(show_spinner="üß† Analisando caracter√≠sticas estruturadas e observa√ß√µes com IA Gemini...")
def analisar_caracteristicas_e_observacoes_gemini(_caracteristicas: Dict[str, Any], _observacoes: str, _model: Optional[genai.GenerativeModel]) -> Dict[str, Any]:
    """
    Utiliza o Gemini (Texto) para analisar as caracter√≠sticas estruturadas e as observa√ß√µes
    e extrair insights estruturados. Retorna um dicion√°rio com o resultado ou mensagem de erro.
    """
    if not _model:
        return {"insights": "ü§ñ An√°lise de descri√ß√£o via IA indispon√≠vel (Motor Gemini Text offline)."}

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in _caracteristicas.items():
        if isinstance(value, list):
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto = "\n".join(caracteristicas_formatadas)

    observacoes_texto = _observacoes.strip() if _observacoes else "Nenhuma observa√ß√£o adicional fornecida."

    prompt = f"""
    Analise as seguintes caracter√≠sticas estruturadas e observa√ß√µes adicionais de uma den√∫ncia de buraco.
    Seu objetivo √© consolidar estas informa√ß√µes e extrair insights CRUCIAIS para um sistema de den√∫ncias de reparo p√∫blico.
    Formate a sa√≠da como um texto claro, usando marcadores (-) ou t√≠tulos para cada categoria.
    Se uma categoria N√ÉO PUDER ser claramente mencionada ou inferida COM ALTA CONFIAN√áA a partir dos dados, indique explicitamente "N√£o especificado/inferido nos dados". Seja honesto sobre o que PODE ser extra√≠do.

    Caracter√≠sticas Estruturadas Fornecidas pelo Denunciante:
    {caracteristicas_texto}

    Observa√ß√µes Adicionais do Denunciante:
    "{observacoes_texto}"

    Categorias para Extrair/Inferir dos Dados Fornecidos:
    - Severidade/Tamanho Estimado (Consolidado dos dados): [Use o valor estruturado e adicione nuances das observa√ß√µes se houverem.]
    - Profundidade Estimada (Consolidado dos dados): [Use o valor estruturado e adicione nuances das observa√ß√µes se houverem.]
    - Presen√ßa de √Ågua/Alagamento (Consolidado dos dados): [Use o valor estruturado e adicione detalhes das observa√ß√µes se houverem.]
    - Tr√°fego Estimado na Via (Consolidado dos dados): [Use o valor estruturado.]
    - Contexto da Via (Consolidado dos dados): [Liste os valores estruturados.]
    - Perigos Potenciais e Impactos Mencionados (Extra√≠do das Observa√ß√µes): [Liste riscos espec√≠ficos citados ou implicados nas *observa√ß√µes* (ex: risco de acidente de carro/moto/bike, perigo para pedestres, causa danos a ve√≠culos - pneu furado, suspens√£o, roda -, dificuldade de desviar, risco de queda, perigo √† noite/chuva). Foque no que foi *adicionado* nas observa√ß√µes.]
    - Contexto Adicional Relevante do Local/Hist√≥rico (Extra√≠do das Observa√ß√µes): [Problema recorrente/antigo/novo *mencionado nas observa√ß√µes*, perto de local importante (se n√£o coberto pelo 'Contexto da Via'), pouca ilumina√ß√£o *mencionada nas observa√ß√µes*.]
    - Sugest√µes de A√ß√£o/Recursos Mencionados pelo Denunciante: [Se o usu√°rio sugere o que fazer (tapa-buraco, recapeamento, sinalizar) ou causas percebidas *mencionadas nas observa√ß√µes*.]
    - Identificadores Visuais Adicionais (se descritos nas Observa√ß√µes): [Coisas √∫nicas pr√≥ximas que ajudam a achar o buraco (poste X, √°rvore Y, em frente a Z), *se mencionadas nas observa√ß√µes*.]
    - Palavras-chave Principais: [Liste 3-7 palavras-chave que capturem a ess√™ncia da den√∫ncia a partir de *todos* os dados de entrada.]

    Formate a resposta de forma limpa e estruturada.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"insights": f"‚ùå An√°lise de caracter√≠sticas/observa√ß√µes bloqueada pelo filtro de seguran√ßa do Gemini. Motivo: {block_reason}"}
        return {"insights": response.text.strip()}
    except Exception as e:
        return {"insights": f"‚ùå Erro ao analisar caracter√≠sticas/observa√ß√µes com IA: {e}"}

@st.cache_data(show_spinner="üß† Calculando o N√≠vel de Prioridade Rob√≥tica...")
def categorizar_urgencia_gemini(_dados_denuncia: Dict[str, Any], _insights_ia_result: Dict[str, Any], _model: Optional[genai.GenerativeModel]) -> Dict[str, Any]:
    """
    Utiliza o Gemini (Texto) para sugerir uma categoria de urg√™ncia com base nos dados estruturados, observa√ß√µes e insights.
    Retorna um dicion√°rio com o resultado ou mensagem de erro.
    """
    if not _model:
        return {"urgencia_ia": "ü§ñ Sugest√£o de urg√™ncia via IA indispon√≠vel (Motor Gemini Text offline)."}

    caracteristicas = _dados_denuncia.get('buraco', {}).get('caracteristicas_estruturadas', {})
    observacoes = _dados_denuncia.get('observacoes_adicionais', 'Sem observa√ß√µes.')
    insights_texto = _insights_ia_result.get('insights', 'An√°lise de insights n√£o dispon√≠vel.')

    localizacao_exata = _dados_denuncia.get('localizacao_exata_processada', {})
    tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
    input_original_loc = localizacao_exata.get('input_original', 'N√£o informado.')

    loc_contexto = f"Localiza√ß√£o informada: Tipo: {tipo_loc}."
    if input_original_loc and input_original_loc != 'N√£o informado.':
         loc_contexto += f" Detalhes originais: '{input_original_loc}'."

    if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
        lat = localizacao_exata.get('latitude')
        lon = localizacao_exata.get('longitude')
        loc_contexto += f" Coordenadas: {lat}, {lon}. Link gerado: {localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')}."

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in caracteristicas.items():
        if isinstance(value, list):
             # Filtra 'Selecione' ou vazios da lista
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto_prompt = "\n".join(caracteristicas_formatadas)


    prompt = f"""
    Com base nos dados da den√∫ncia (caracter√≠sticas estruturadas, observa√ß√µes) e nos insights da an√°lise de texto, sugira a MELHOR categoria de urg√™ncia para o reparo deste buraco.
    Considere a severidade/tamanho, profundidade, PERIGOS POTENCIAIS e impactos mencionados, o CONTEXTO DA VIA (tipo de tr√°fego, contexto espec√≠fico) e qualquer ADICIONAL relevante nas observa√ß√µes ou insights.

    Escolha UMA Categoria de Urg√™ncia entre estas:
    - Urg√™ncia Baixa: Buraco pequeno, sem perigo aparente, em local de baixo tr√°fego. Principalmente est√©tico ou pequeno inc√¥modo.
    - Urg√™ncia M√©dia: Tamanho razo√°vel, pode causar leve inc√¥modo ou dano menor (ex: pneu furado leve), em via secund√°ria ou com tr√°fego moderado. Requer reparo em prazo razo√°vel.
    - Urg√™ncia Alta: Buraco grande, profundo, perigo CLARO e/ou frequente (risco de acidente mais s√©rio, dano significativo a ve√≠culo, alto risco para moto/bike/pedestre), em via movimentada ou √°rea de risco (escola, hospital, curva, subida/descida). Requer aten√ß√£o R√ÅPida, possivelmente em poucos dias.
    - Urg√™ncia Imediata/Cr√≠tica: Buraco ENORME/muito profundo que causa acidentes CONSTANTES ou representa risco GRAVE e iminente a ve√≠culos ou pessoas (ex: cratera na pista principal, buraco em local de desvio imposs√≠vel), afeta severamente a fluidez ou acessibilidade. Requer interven√ß√£o de EMERG√äNCIA (horas/poucas horas).

    Dados da Den√∫ncia:
    Localiza√ß√£o B√°sica: Rua {_dados_denuncia.get('buraco', {}).get('endereco', {}).get('rua', 'N√£o informada')}, N√∫mero Pr√≥ximo/Refer√™ncia: {_dados_denuncia.get('buraco', {}).get('numero_proximo', 'N√£o informado')}. Cidade: {_dados_denuncia.get('buraco', {}).get('endereco', {}).get('cidade_buraco', 'N√£o informada')}, Estado: {_dados_denuncia.get('buraco', {}).get('estado_buraco', 'N√£o informado')}.
    {loc_contexto}

    Caracter√≠sticas Estruturadas Fornecidas:
    {caracteristicas_texto_prompt}

    Observa√ß√µes Adicionais:
    "{observacoes}"

    Insights Extra√≠dos pela An√°lise de Texto/Caracter√≠sticas:
    {insights_texto}

    Com base nestes dados, qual categoria de urg√™ncia voc√™ sugere? Forne√ßa APENAS a categoria (ex: "Urg√™ncia Alta") e uma breve JUSTIFICATIVA (m√°ximo 2 frases) explicando POR QUE essa categoria foi sugerida, citando os elementos mais importantes dos dados fornecidos e insights.

    Formato de sa√≠da (muito importante seguir este formato):
    Categoria Sugerida: [Categoria Escolhida]
    Justificativa: [Justificativa Breve]
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"urgencia_ia": f"‚ùå Sugest√£o de urg√™ncia bloqueada pelo filtro de seguran√ßa do Gemini. Motivo: {block_reason}"}
        return {"urgencia_ia": response.text.strip()}
    except Exception as e:
        return {"urgencia_ia": f"‚ùå Erro ao sugerir urg√™ncia com IA: {e}"}


@st.cache_data(show_spinner="üß† IA est√° pensando... Qual pode ser a causa e a melhor a√ß√£o para este buraco?")
def sugerir_causa_e_acao_gemini(_dados_denuncia: Dict[str, Any], _insights_ia_result: Dict[str, Any], _model: Optional[genai.GenerativeModel]) -> Dict[str, Any]:
    """
    Utiliza o Gemini (Texto) para sugerir poss√≠veis causas do buraco e a√ß√µes de reparo com base nos dados, insights e observa√ß√µes.
    Retorna um dicion√°rio com o resultado ou mensagem de erro.
    """
    if not _model:
        return {"sugestao_acao_ia": "ü§ñ Sugest√µes de causa/a√ß√£o via IA indispon√≠veis (Motor Gemini Text offline)."}

    caracteristicas = _dados_denuncia.get('buraco', {}).get('caracteristicas_estruturadas', {})
    observacoes = _dados_denuncia.get('observacoes_adicionais', 'Sem observa√ß√µes.')
    insights_texto = _insights_ia_result.get('insights', 'An√°lise de insights n√£o dispon√≠vel.')

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in caracteristicas.items():
        if isinstance(value, list):
             # Filtra 'Selecione' ou vazios da lista
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto_prompt = "\n".join(caracteristicas_formatadas)


    prompt = f"""
    Com base nos dados fornecidos pelo denunciante (caracter√≠sticas estruturadas, observa√ß√µes) e nos insights extra√≠dos pela an√°lise de IA de texto, tente sugerir:
    1. Uma ou duas P√ìSSIVEIS CAUSAS para a forma√ß√£o deste buraco espec√≠fico (ex: chuva forte recente, desgaste do asfalto pelo tempo/tr√°fego, problema na drenagem subterr√¢nea, afundamento devido a reparo anterior, obra mal feita na regi√£o). Baseie-se em todos os dados textuais dispon√≠veis.
    2. Sugest√µes de TIPOS DE A√á√ÉO ou REPARO mais adequados ou necess√°rios para resolver este problema (ex: simples tapa-buraco, recapeamento da se√ß√£o, inspe√ß√£o de drenagem, sinaliza√ß√£o de emerg√™ncia, interdi√ß√£o parcial da via, reparo na rede de √°gua/esgoto). Baseie-se na severidade, perigos e o que foi observado/analisado (texto) e as poss√≠veis causas.
    Baseie suas sugest√µes EXCLUSIVAMENTE nas informa√ß√µes e an√°lises dispon√≠veis. Se os dados n√£o derem pistas suficientes, indique "N√£o especificado/inferido nos dados". Seja l√≥gico e pr√°tico.

    Informa√ß√µes Relevantes da Den√∫ncia:
    Caracter√≠sticas Estruturadas:
    {caracteristicas_texto_prompt}
    Observa√ß√µes Adicionais: "{observacoes}"
    Insights Extra√≠dos pela An√°lise de Texto/Caracter√≠sticas:
    {insights_texto}

    Formato de sa√≠da:
    Poss√≠veis Causas Sugeridas: [Lista de causas sugeridas baseadas nos dados ou 'N√£o especificado/inferido nos dados']
    Sugest√µes de A√ß√£o/Reparo Sugeridas: [Lista de a√ß√µes sugeridas baseadas nos dados/insights ou 'N√£o especificado/inferido nos dados']
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"sugestao_acao_ia": f"‚ùå Sugest√£o de causa/a√ß√£o bloqueada pelo filtro de seguran√ßa do Gemini. Motivo: {block_reason}"}
        return {"sugestao_acao_ia": response.text.strip()}
    except Exception as e:
        return {"sugestao_acao_ia": f"‚ùå Erro ao sugerir causa/a√ß√£o com IA: {e}"}

# Removed @st.cache_data from gerar_resumo_completo_gemini for improved stability
def gerar_resumo_completo_gemini(_dados_denuncia_completa: Dict[str, Any], _insights_ia_result: Dict[str, Any], _urgencia_ia_result: Dict[str, Any], _sugestao_acao_ia_result: Dict[str, Any], _model: Optional[genai.GenerativeModel]) -> Dict[str, Any]:
    """
    Utiliza o Gemini (Texto) para gerar um resumo narrativo inteligente da den√∫ncia completa,
    incluindo dados estruturados e resultados das an√°lises de IA (texto).
    Retorna um dicion√°rio com o resultado ou mensagem de erro.
    """
    if not _model:
        return {"resumo_ia": "ü§ñ Resumo inteligente via IA indispon√≠vel (Motor Gemini Text offline)."}

    # Acessando os dados diretamente do dicion√°rio completo passado como argumento
    denunciante = _dados_denuncia_completa.get('denunciante', {})
    buraco = _dados_denuncia_completa.get('buraco', {})
    endereco = buraco.get('endereco', {})
    caracteristicas = buraco.get('caracteristicas_estruturadas', {})
    observacoes = buraco.get('observacoes_adicionais', 'Nenhuma observa√ß√£o adicional fornecida.')
    localizacao_exata = _dados_denuncia_completa.get('localizacao_exata_processada', {})

    # Acessando os resultados das an√°lises anteriores passados como argumentos
    insights_texto = _insights_ia_result.get('insights', 'An√°lise da descri√ß√£o/caracter√≠sticas n√£o dispon√≠vel ou com erro.')
    urgencia_ia_text = _urgencia_ia_result.get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o gerada ou com erro.')
    # Access _sugestao_acao_ia_result safely using the (variable or {}).get() pattern
    sugestao_acao_ia_text = (_sugestao_acao_ia_result or {}).get('sugestao_acao_ia', 'Sugest√µes de causa/a√ß√£o n√£o dispon√≠veis ou com erro.') # Apply safe access here

    loc_info_resumo = "Localiza√ß√£o exata n√£o especificada ou processada."
    tipo_loc_processada = localizacao_exata.get('tipo', 'N√£o informada')
    input_original_loc = localizacao_exata.get('input_original', 'N√£o informado.')
    motivo_falha_geo_resumo = localizacao_exata.get('motivo_falha_geocodificacao_anterior', None)

    if tipo_loc_processada in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
         lat = localizacao_exata.get('latitude')
         lon = localizacao_exata.get('longitude')
         link_gerado = localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')
         loc_info_resumo = f"Localiza√ß√£o Exata: Coordenadas {lat}, {lon} (Obtida via: {tipo_loc_processada.replace(' (API)', ' API').replace('Manual', 'Manual').replace('Fornecidas/Extra√≠das', 'Manual')}). Link Google Maps: {link_gerado}."
         if input_original_loc and input_original_loc != 'N√£o informado.':
             loc_info_resumo += f" (Input original: '{input_original_loc}')"

    elif tipo_loc_processada == 'Descri√ß√£o Manual Detalhada':
         loc_info_resumo = f"Localiza√ß√£o via descri√ß√£o manual detalhada: '{localizacao_exata.get('descricao_manual', 'N√£o informada')}'. (Input original: '{input_original_loc}')"

    elif input_original_loc and input_original_loc != 'N√£o informado.' and tipo_loc_processada == 'N√£o informada':
         loc_info_resumo = f"Localiza√ß√£o informada (tipo n√£o detectado): '{input_original_loc}'."

    if motivo_falha_geo_resumo:
         loc_info_resumo += f" (Nota: {motivo_falha_geo_resumo})"

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in caracteristicas.items():
        if isinstance(value, list):
             # Filtra 'Selecione' ou vazios da lista
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto_prompt = "\n".join(caracteristicas_formatadas)

    data_hora = _dados_denuncia_completa.get('metadata', {}).get('data_hora_utc', 'N√£o registrada')

    prompt = f"""
    Gere um resumo narrativo conciso (m√°ximo 10-12 frases) para a seguinte den√∫ncia de buraco no aplicativo Krateras.
    Este resumo deve ser formal, objetivo e √∫til para equipes de manuten√ß√£o ou gest√£o p√∫blica.
    Combine os dados estruturados, as observa√ß√µes adicionais, a localiza√ß√£o exata processada e os resultados das an√°lises de IA (texto).

    Inclua:
    - Quem denunciou (Nome, Cidade de Resid√™ncia).
    - Onde est√° o buraco (Rua, N√∫mero Pr√≥ximo/Refer√™ncia, Bairro, Cidade do Buraco, Estado do Buraco, CEP se dispon√≠vel).
    - A localiza√ß√£o EXATA processada (mencione como foi obtida e os dados relevantes).
    - O lado da rua.
    - As caracter√≠sticas estruturadas fornecidas (Tamanho, Perigo, Profundidade, √Ågua, Tr√°fego, Contexto da Via).
    - Informa√ß√µes adicionais importantes das Observa√ß√µes.
    - Os principais pontos da An√°lise de Texto/Caracter√≠sticas de IA (Perigos Potenciais, Contexto Adicional).
    - A SUGEST√ÉO de Categoria de Urg√™ncia pela IA e sua Justificativa.
    - As SUGEST√ïES de POSS√çVEIS CAUSAS e TIPOS DE A√á√ÉO/REPARO sugeridas pela IA (se dispon√≠veis).

    Dados Completos da Den√∫ncia:
    Denunciante: {denunciante.get('nome', 'N√£o informado')}, de {denunciante.get('cidade_residencia', 'N√£o informada')}.
    Endere√ßo do Buraco: Rua {endereco.get('rua', 'N√£o informada')}, N¬∫ Pr√≥ximo: {buraco.get('numero_proximo', 'N√£o informado')}. Bairro: {endereco.get('bairro', 'N√£o informado')}. Cidade: {endereco.get('cidade_buraco', 'N√£o informada')}, Estado: {endereco.get('estado_buraco', 'N√£o informado')}. CEP: {buraco.get('cep_informado', 'N√£o informado')}.
    Lado da Rua: {buraco.get('lado_rua', 'N√£o informado')}.
    Localiza√ß√£o Exata Coletada: {loc_info_resumo}
    Caracter√≠sticas Estruturadas Fornecidas:
    {caracteristicas_texto_prompt}
    Observa√ß√µes Adicionais: "{observacoes}"

    Insights da An√°lise de Texto/Caracter√≠sticas de IA:
    {insights_texto}

    Sugest√£o de Urg√™ncia pela IA:
    {urgencia_ia_text}

    Sugest√µes de Causa e A√ß√£o pela IA:
    {sugestao_acao_ia_text}


    Gere o resumo em portugu√™s. Comece com "Relat√≥rio Krateras: Den√∫ncia de buraco..." ou algo similar. Use linguagem clara e direta.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"resumo_ia": f"‚ùå Gera√ß√£o de resumo bloqueada pelo filtro de seguran√ßa do Gemini. Motivo: {block_reason}"}
        return {"resumo_ia": response.text.strip()}
    except Exception as e:
        return {"resumo_ia": f"‚ùå Erro ao gerar resumo completo com IA: {e}"}

@st.cache_data(show_spinner="üîç Analisando imagem com IA Gemini Vision...")
def analisar_imagem_buraco(image_bytes: bytes, _model: Optional[genai.GenerativeModel]) -> Dict[str, Any]:
    """
    Utiliza o Gemini Vision para analisar a imagem do buraco.
    Retorna um dicion√°rio com o resultado ou mensagem de erro.
    """
    if not _model:
        return {"analise_visual": "ü§ñ An√°lise visual via IA indispon√≠vel (Motor Gemini Vision offline)."}

    try:
        prompt = """
        Analise esta imagem de um buraco na rua e forne√ßa uma an√°lise t√©cnica detalhada.
        
        Forne√ßa a an√°lise no seguinte formato:
        
        DESCRI√á√ÉO F√çSICA:
        - Descri√ß√£o detalhada do tamanho aparente, forma e caracter√≠sticas vis√≠veis
        - Profundidade estimada baseada em aspectos visuais
        - Condi√ß√µes do asfalto ao redor
        
        AVALIA√á√ÉO DE SEVERIDADE:
        - Classifica√ß√£o: [BAIXA/M√âDIA/ALTA/CR√çTICA]
        - Justificativa da classifica√ß√£o
        
        RISCOS IDENTIFICADOS:
        - Liste os riscos potenciais para ve√≠culos
        - Liste os riscos potenciais para pedestres/ciclistas
        - Outros riscos relevantes observados
        
        CONDI√á√ïES AGRAVANTES:
        - Problemas adicionais vis√≠veis (rachaduras, √°gua, etc.)
        - Fatores que podem piorar a situa√ß√£o
        
        RECOMENDA√á√ïES:
        - Tipo de interven√ß√£o sugerida
        - Urg√™ncia do reparo
        - Medidas tempor√°rias recomendadas
        
        Seja preciso, t√©cnico e detalhado na an√°lise.
        """

        response = _model.generate_content([prompt, image_bytes], stream=False)
        
        if not hasattr(response, 'text'):
            return {"analise_visual": "‚ùå Erro: A an√°lise da imagem n√£o gerou resposta v√°lida."}
            
        return {"analise_visual": response.text.strip()}
        
    except Exception as e:
        return {"analise_visual": f"‚ùå Erro ao analisar imagem com IA: {e}"}


# --- Fun√ß√µes de Navega√ß√£o e Renderiza√ß√£o de UI ---

def next_step():
    """Avan√ßa para o pr√≥ximo passo no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_address', # Etapa consolidada
        'collect_buraco_details_and_location', # Etapa consolidada
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index < len(steps) - 1:
            st.session_state.step = steps[current_index + 1]
            st.rerun()
    except ValueError:
        st.session_state.step = steps[0]
        st.rerun()


def prev_step():
    """Volta para o passo anterior no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_address', # Etapa consolidada
        'collect_buraco_details_and_location', # Etapa consolidada
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index > 0:
             st.session_state.step = steps[current_index - 1]
             st.rerun()
    except ValueError:
         st.session_state.step = steps[0]
         st.rerun()


# --- Layout Principal da Aplica√ß√£o ---

#st.title("Krateras üößüößüöß")
st.subheader("O Especialista Rob√≥tico de Den√∫ncia de Buracos")

# --- Fluxo da Aplica√ß√£o baseado no Estado ---

if st.session_state.step == 'start':
    st.write("""
    Ol√°! Krateras v10.1 entrando em √≥rbita com **Estabilidade Refor√ßada Final**! Sua miss√£o, caso aceite: denunciar buracos na rua
    para que possam ser consertados. A seguran√ßa dos seus dados e a precis√£o da den√∫ncia
    s√£o nossas prioridades m√°ximas.

    Nesta vers√£o, as etapas de coleta de endere√ßo e detalhes foram otimizadas para um fluxo mais suave.
    Uma imagem pode ser inclu√≠da no relat√≥rio final.
    A geolocaliza√ß√£o no relat√≥rio agora inclui mapas Google Maps e OpenStreetMap incorporados e links diretos para refer√™ncia visual.

    Utilizamos intelig√™ncia artificial (Google Gemini Text) e APIs de localiza√ß√£o (Google Geocoding,
    ViaCEP) para coletar, analisar (via texto) e gerar um relat√≥rio detalhado para as autoridades competentes.

    Fui criado com o que h√° de mais avan√ßado em Programa√ß√£o, IA (An√°lise de Texto!), Design Inteligente,
    Matem√°tica e L√≥gica Inabal√°vel. Com acesso seguro √†s APIs, sou impar√°vel.

    Clique em Iniciar para come√ßarmos a coleta de dados.
    """)




    if st.button("Iniciar Miss√£o Den√∫ncia!"):
        # Limpa o estado da den√∫ncia completa ao iniciar uma nova
        st.session_state.denuncia_completa = {
            "metadata": {
                "data_hora_utc": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            }
        }
        # Limpa estados espec√≠ficos da coleta de endere√ßo para garantir um in√≠cio limpo
        st.session_state.cep_input_consolidated = ''
        st.session_state.cep_error_consolidated = False
        st.session_state.cep_success_message = ''
        st.session_state.cep_error_message = ''
        # Limpa tamb√©m o estado de 'buraco' na sess√£o_state fora de denuncia_completa
        # que era usado para pr√©-preencher na etapa 'collect_address'
        if 'buraco' in st.session_state:
            del st.session_state.buraco
        # Carregar chaves e inicializar APIs (cache_resource mant√©m os objetos model/key)
        gemini_api_key, geocoding_api_key = load_api_keys()
        st.session_state.geocoding_api_key = geocoding_api_key
        st.session_state.gemini_model, st.session_state.gemini_vision_model = init_gemini_text_model(gemini_api_key) 
        st.session_state.api_keys_loaded = True
        next_step()

elif st.session_state.step == 'collect_denunciante':
    st.header("--- üë§ Dados do Her√≥i/Hero√≠na da Vez! ---")
    st.write("Sua contribui√ß√£o √© super valiosa! üí™")

    # Formul√°rio para coletar dados do denunciante
    with st.form("form_denunciante"):
        # Using .get() with a default value for robustness in case state is cleared unexpectedly mid-run
        current_denunciante_data = st.session_state.denuncia_completa.get('denunciante', {})

        nome = st.text_input("Seu nome completo:", value=current_denunciante_data.get('nome', ''), key='nome_denunciante')
        # Adjusting number_input value handling for None
        current_idade = current_denunciante_data.get('idade')
        idade_value = current_idade if current_idade is not None else None # Use None directly
        idade = st.number_input("Sua idade (opcional, aproximada üòâ):", min_value=0, max_value=120, value=idade_value, help="Deixe em branco ou use 0 se n√£o quiser informar.", key='idade_denunciante_input')
        cidade_residencia = st.text_input("Em qual cidade voc√™ reside?:", value=current_denunciante_data.get('cidade_residencia', ''), key='cidade_residencia_denunciante')

        submitted = st.form_submit_button("Avan√ßar (Dados Denunciante)")

        if submitted:
            if not nome or not cidade_residencia:
                st.error("‚ùó Nome e Cidade de resid√™ncia s√£o campos obrigat√≥rios. Por favor, preencha-os.")
            else:
                st.session_state.denuncia_completa['denunciante'] = {
                    "nome": nome.strip(),
                    # Store as None if 0 or None input, only store positive integers
                    "idade": st.session_state.idade_denunciante_input if st.session_state.idade_denunciante_input is not None and st.session_state.idade_denunciante_input > 0 else None,
                    "cidade_residencia": cidade_residencia.strip()
                }
                st.success(f"Ol√°, {nome}! Dados coletados. Preparando para dados do buraco...")
                next_step()

    st.button("Voltar", on_click=prev_step)

# --- ETAPA CONSOLIDADA: COLETAR ENDERE√áO BASE ---
elif st.session_state.step == 'collect_address':
    st.header("--- üöß Detalhes do Buraco (Endere√ßo Base) ---")
    st.subheader("Forne√ßa a rua do buraco.")

    # Initialize buraco/endereco data in state if not present.
    # This state is separate from denuncia_completa until submission for cleaner handling in this step.
    if 'buraco' not in st.session_state:
        st.session_state.buraco = {'endereco': {}}
    if 'endereco' not in st.session_state.buraco:
         st.session_state.buraco['endereco'] = {}

    endereco_atual = st.session_state.buraco.get('endereco', {})

    # Initialize/manage CEP state
    if 'cep_input_consolidated' not in st.session_state:
         st.session_state.cep_input_consolidated = ''
    if 'cep_error_consolidated' not in st.session_state:
         st.session_state.cep_error_consolidated = False
    if 'cep_success_message' not in st.session_state:
         st.session_state.cep_success_message = ''
    if 'cep_error_message' not in st.session_state:
         st.session_state.cep_error_message = ''

    # --- CEP Section ---
    st.subheader("Op√ß√£o 1: Buscar por CEP")
    st.info("Digite o CEP para preencher automaticamente os campos de Rua, Bairro, Cidade e Estado. Voc√™ poder√° corrigir os dados se necess√°rio.")
    col1, col2 = st.columns([3,1])
    with col1:
         cep_atual = st.text_input("Digite o CEP (apenas n√∫meros):", max_chars=8, key='cep_input_field_consolidated', value=st.session_state.cep_input_consolidated, help="Ex: 12345678")
    with col2:
         # Button to trigger CEP search
         if st.button("Buscar CEP", key='buscar_cep_button_consolidated'):
             st.session_state.cep_input_consolidated = cep_atual # Store the input value
             # Clear previous CEP messages
             st.session_state.cep_success_message = ''
             st.session_state.cep_error_message = ''

             if not st.session_state.cep_input_consolidated:
                 st.session_state.cep_error_consolidated = True
                 st.session_state.cep_error_message = "‚ùó Por favor, digite um CEP para buscar."
             else:
                 # Show spinner explicitly for this uncached API call
                 with st.spinner("‚è≥ Interrogando o ViaCEP..."):
                    dados_cep_result = buscar_cep_uncached(st.session_state.cep_input_consolidated) # Use uncached version

                 if 'erro' in dados_cep_result:
                     st.session_state.cep_error_consolidated = True
                     st.session_state.cep_error_message = f"‚ùå Falha na busca por CEP: {dados_cep_result['erro']}"
                     st.session_state.cep_success_message = ''
                     # Do NOT clear manual fields on CEP error, user might want to correct them
                     # endereco_atual remains as it was or as manually edited
                 else:
                     st.session_state.cep_error_consolidated = False
                     st.session_state.cep_error_message = ''
                     st.session_state.cep_success_message = "‚úÖ Endere√ßo Encontrado (ViaCEP)! Por favor, confirme ou corrija abaixo."
                     # Update buraco.endereco state and potentially the manual fields display
                     st.session_state.buraco['endereco'].update({
                         'rua': dados_cep_result.get('logradouro', ''),
                         'bairro': dados_cep_result.get('bairro', ''),
                         'cidade_buraco': dados_cep_result.get('localidade', ''),
                         'estado_buraco': dados_cep_result.get('uf', '')
                     })
                     # Store CEP in buraco data if search was successful
                     st.session_state.buraco['cep_informado'] = st.session_state.cep_input_consolidated


             st.rerun() # Rerun to update the display based on CEP result and state

    # Display CEP messages after the button action
    if st.session_state.cep_success_message:
         st.success(st.session_state.cep_success_message)
    if st.session_state.cep_error_message:
         st.error(st.session_state.cep_error_message)


    st.markdown("---")
    st.subheader("Op√ß√£o 2: Digitar Endere√ßo Manualmente")
    st.info("Digite o endere√ßo da rua do buraco nos campos abaixo.")

    # Manual input fields (always displayed, potentially pre-filled by CEP result or previous state)
    # Wrap these in a form to allow validation and advancing the step
    with st.form("form_manual_address_submit"):
        # Use the current state (potentially updated by CEP) as initial value for manual fields
        rua_manual = st.text_input("Nome completo da rua:", value=endereco_atual.get('rua', ''), key='rua_manual_buraco_form_submit', help="Ex: Rua das Ac√°cias")
        bairro_manual = st.text_input("Bairro onde est√° o buraco (opcional):", value=endereco_atual.get('bairro', ''), key='bairro_manual_buraco_form_submit', help="Ex: Centro")
        cidade_manual = st.text_input("Cidade onde est√° o buraco:", value=endereco_atual.get('cidade_buraco', ''), key='cidade_manual_buraco_form_submit', help="Ex: Belo Horizonte")
        estado_manual = st.text_input("Estado (UF) onde est√° o buraco:", value=endereco_atual.get('estado_buraco', ''), max_chars=2, key='estado_manual_buraco_form_submit', help="Ex: MG")

        # Use a single submit button to advance the step after confirming address
        submitted_address = st.form_submit_button("Confirmar Endere√ßo Base e Avan√ßar")

        if submitted_address:
            if not rua_manual or not cidade_manual or not estado_manual:
                st.error("‚ùó Rua, Cidade e Estado s√£o campos obrigat√≥rios para o endere√ßo do buraco.")
            else:
                # Update the address in buraco.endereco state from the manual fields (most current values from the form)
                st.session_state.buraco['endereco'] = {
                    'rua': rua_manual.strip(),
                    'bairro': bairro_manual.strip(),
                    'cidade_buraco': cidade_manual.strip(),
                    'estado_buraco': estado_manual.strip().upper()
                }
                # If manual entry was used, clear CEP info from buraco data state
                # This ensures CEP is only kept if the CEP search was the LAST successful operation AND the user confirms via this form.
                if st.session_state.get('cep_input_field_consolidated') and not st.session_state.get('cep_error_consolidated') and st.session_state.get('cep_success_message'):
                     # CEP search was successful and user confirmed, keep the CEP that was stored in buraco state.
                     pass # CEP is already in st.session_state.buraco from the CEP search logic
                else:
                     # Manual entry was used, or CEP failed. Clear potential old CEP info from buraco state.
                     if 'cep_informado' in st.session_state.buraco:
                          del st.session_state.buraco['cep_informado']

                # Store the buraco data (including address and possibly cep) in the full denunciation state
                st.session_state.denuncia_completa['buraco'] = st.session_state.buraco
                # Clear the separate 'buraco' state managed within this step after transferring it
                del st.session_state.buraco


                next_step() # Move to the next stage (collecting details and location)

    st.button("Voltar", on_click=prev_step)


# --- ETAPA CONSOLIDADA: COLETAR DETALHES E LOCALIZA√á√ÉO EXATA ---
elif st.session_state.step == 'collect_buraco_details_and_location':
    st.header("--- üöß Detalhes Finais e Localiza√ß√£o Exata ---")
    st.subheader("Informa√ß√µes cruciais para a localiza√ß√£o e an√°lise!")

    # Access buraco data from the full denunciation state
    buraco_data_current = st.session_state.denuncia_completa.get('buraco', {})
    endereco_basico = buraco_data_current.get('endereco', {})

    # Check if basic address info is present (safety check)
    if not endereco_basico or not endereco_basico.get('rua') or not endereco_basico.get('cidade_buraco') or not endereco_basico.get('estado_buraco'):
         st.error("‚ùó Erro interno: Informa√ß√µes b√°sicas de endere√ßo est√£o faltando. Por favor, volte para a etapa anterior.")
         st.button("Voltar para Endere√ßo Base", on_click=prev_step) # Provide a way back
         st.stop() # Stop execution here if critical data is missing


    st.write(f"Endere√ßo Base: Rua **{endereco_basico.get('rua', 'N√£o informada')}**, Cidade: **{endereco_basico.get('cidade_buraco', 'N√£o informada')}** - **{endereco_basico.get('estado_buraco', 'N√£o informado')}**")
    if endereco_basico.get('bairro'):
         st.write(f"Bairro: **{endereco_basico.get('bairro')}**")
    if buraco_data_current.get('cep_informado'):
         st.write(f"CEP informado: **{buraco_data_current.get('cep_informado')}**")

    st.markdown("---") # Separador visual

    with st.form("form_buraco_details_location"):
        st.subheader("üìã Caracter√≠sticas do Buraco (Escolha as op√ß√µes)")
        col1, col2 = st.columns(2)
        with col1:
             tamanho = st.selectbox(
                 "Tamanho Estimado:",
                 ['Selecione', 'Pequeno (cabe um pneu)', 'M√©dio (maior que um pneu, mas cabe em uma faixa)', 'Grande (ocupa mais de uma faixa, dif√≠cil desviar)', 'Enorme (cratera, impede passagem)', 'Cr√≠tico (buraco na pista principal, risco iminente de acidente grave)'],
                 key='tamanho_buraco'
             )
             perigo = st.selectbox(
                 "Perigo Estimado:",
                 ['Selecione', 'Baixo (principalmente est√©tico, risco m√≠nimo)', 'M√©dio (risco de dano leve ao pneu ou suspens√£o)', 'Alto (risco de acidente/dano s√©rio para carro, alto risco para moto/bike/pedestre)', 'Alt√≠ssimo (risco grave e iminente de acidente, hist√≥rico de acidentes no local)'],
                 key='perigo_buraco'
             )
             profundidade = st.selectbox(
                 "Profundidade Estimada:",
                 ['Selecione', 'Raso (menos de 5 cm)', 'M√©dio (5-15 cm)', 'Fundo (15-30 cm)', 'Muito Fundo (mais de 30 cm / "engole" um pneu)'],
                 key='profundidade_buraco'
             )
        with col2:
             agua = st.selectbox(
                 "Presen√ßa de √Ågua/Alagamento:",
                 ['Selecione', 'Seco', 'Acumula pouca √°gua', 'Acumula muita √°gua (vira piscina)', 'Problema de drenagem vis√≠vel (jato de √°gua, nascente)'],
                 key='agua_buraco'
             )
             trafego = st.selectbox(
                 "Tr√°fego Estimado na Via:",
                 ['Selecione', 'Muito Baixo (rua local sem sa√≠da)', 'Baixo (rua residencial calma)', 'M√©dio (rua residencial/comercial com algum fluxo)', 'Alto (avenida movimentada, via de acesso)', 'Muito Alto (via expressa, anel vi√°rio)'],
                 key='trafego_buraco'
             )
             contexto_via = st.multiselect(
                 "Contexto da Via (selecione um ou mais):",
                 ['Reta', 'Curva acentuada', 'Cruzamento/Esquina', 'Subida', 'Descida', 'Pr√≥ximo a faixa de pedestre', 'Pr√≥ximo a sem√°foro/lombada', '√Årea escolar/Universit√°ria', '√Årea hospitalar/Sa√∫de', '√Årea comercial intensa', 'Via de acesso principal', 'Via secund√°ria', 'Pr√≥ximo a ponto de √¥nibus/transporte p√∫blico', 'Pr√≥ximo a ciclovia/ciclofaixa'],
                 key='contexto_buraco'
             )

        st.subheader("‚úçÔ∏è Localiza√ß√£o Exata e Outros Detalhes")
        st.write("‚û°Ô∏è Utilize o n√∫mero pr√≥ximo ou ponto de refer√™ncia para ajudar na geocodifica√ß√£o autom√°tica. Se falhar ou for impreciso, forne√ßa COORDENADAS ou LINK do Google Maps com coordenadas.")
        numero_proximo = st.text_input("N√∫mero do im√≥vel mais pr√≥ximo ou ponto de refer√™ncia (ESSENCIAL para precis√£o! Ex: 'Em frente ao 123', 'Esquina c/ Rua X', 'Entre os n√∫meros 45 e 60'):", key='numero_proximo_buraco')
        lado_rua = st.text_input("Lado da rua onde est√° o buraco (Ex: 'lado par', 'lado √≠mpar', 'lado direito (sentido centro)', 'lado esquerdo (sentido bairro)'):", key='lado_rua_buraco')

        st.markdown("""
        <p>Localiza√ß√£o EXATA (opcional, mas altamente recomendado se a geocodifica√ß√£o falhar):</p>
        <p>A MELHOR forma √© COPIAR AS COORDENADAS (Lat,Long) ou um LINK do Google Maps que as contenha.<br>
        Sugest√£o: Abra o Google Maps, encontre o buraco, <strong>TOQUE/CLIQUE E SEGURE NO LOCAL PREOCUPANTE</strong>.
        As coordenadas ou um link aparecer√£o na barra de busca ou ao compartilhar.</p>
        <p>Alternativamente, uma DESCRI√á√ÉO MUITO DETALHADA do local EXATO no mapa (Ex: 'Exatamente 5 metros √† esquerda do poste Y, em frente ao port√£o azul do n¬∫ 456').</p>
        """, unsafe_allow_html=True)
        localizacao_manual_input = st.text_input("Insira COORDENADAS (Lat,Long), LINK do Maps com Coordenadas, OU DESCRI√á√ÉO DETALHADA manual:", key='localizacao_manual')

        st.subheader("üì∑ Foto do Buraco (Opcional, para refer√™ncia visual no relat√≥rio)")
        st.write("Uma boa foto ajuda as equipes de reparo a identificar o problema rapidamente. Por favor, envie uma imagem clara.")
        uploaded_image = st.file_uploader("Carregar Imagem do Buraco:", type=['jpg', 'jpeg', 'png', 'webp'], key='uploaded_image_buraco')
        if uploaded_image:
             st.info(f"Imagem '{uploaded_image.name}' carregada e ser√° inclu√≠da no relat√≥rio.")


        st.subheader("üìù Observa√ß√µes Adicionais")
        st.write("Algo mais a acrescentar que n√£o foi coberto pelas op√ß√µes? Detalhes como: 'problema recorrente (h√° quanto tempo?)', 'surgiu depois da √∫ltima chuva', 'muito dif√≠cil desviar √† noite', 'causou X dano ao meu carro', 'vi um acidente aqui':")
        observacoes_adicionais = st.text_area("Suas observa√ß√µes:", key='observacoes_buraco')


        submitted = st.form_submit_button("Enviar Den√∫ncia para An√°lise Rob√≥tica!")

        if submitted:
            # Validate required fields
            required_selects = {'tamanho_buraco': 'Tamanho Estimado', 'perigo_buraco': 'Perigo Estimado', 'profundidade_buraco': 'Profundidade Estimada', 'agua_buraco': 'Presen√ßa de √Ågua', 'trafego_buraco': 'Tr√°fego Estimado na Via'}
            missing_selects = [label for key, label in required_selects.items() if st.session_state.get(key, 'Selecione') == 'Selecione'] # Use .get for safety


            if not numero_proximo or not lado_rua or not observacoes_adicionais:
                 st.error("‚ùó N√∫mero pr√≥ximo/refer√™ncia, Lado da rua e Observa√ß√µes adicionais s√£o campos obrigat√≥rios.")
            elif missing_selects:
                 st.error(f"‚ùó Por favor, selecione uma op√ß√£o para os seguintes campos: {', '.join(missing_selects)}.")
            else:
                # Update buraco data with details and observations
                st.session_state.denuncia_completa['buraco'].update({
                    'numero_proximo': numero_proximo.strip(),
                    'lado_rua': lado_rua.strip(),
                    'caracteristicas_estruturadas': {
                         'Tamanho Estimado': tamanho,
                         'Perigo Estimado': perigo,
                         'Profundidade Estimada': profundidade,
                         'Presen√ßa de √Ågua/Alagamento': agua,
                         'Tr√°fego Estimado na Via': st.session_state.get('trafego_buraco', 'Selecione'), # Use .get
                         'Contexto da Via': contexto_via if contexto_via else [] # Ensure it's a list, can be empty
                    },
                    'observacoes_adicionais': observacoes_adicionais.strip()
                })

                # --- Processar Imagem Upload ---
                # Clear previous image data before processing the new one
                st.session_state.denuncia_completa['buraco']['imagem_denuncia'] = None
                if uploaded_image is not None:
                    try:
                        # Read the image bytes
                        image_bytes = uploaded_image.getvalue()
                        st.session_state.denuncia_completa['buraco']['imagem_denuncia'] = {
                            "filename": uploaded_image.name,
                            "type": uploaded_image.type,
                            "bytes": image_bytes # Store the bytes
                        }
                    except Exception as e:
                        st.error(f"‚ùå Erro ao processar a imagem para inclus√£o no relat√≥rio: {e}. Por favor, tente novamente.")
                        st.session_state.denuncia_completa['buraco']['imagem_denuncia'] = {"erro": f"Erro ao carregar: {e}"}


                # --- Tentar Geocodifica√ß√£o Autom√°tica ---
                # Clear previous processed location data
                st.session_state.denuncia_completa['localizacao_exata_processada'] = {"tipo": "N√£o informada"}
                tentou_geocodificar = False
                geocodificacao_sucesso_coords = False # Flag specifically for getting coordinates
                geo_resultado: Dict[str, Any] = {} # Initialize to store auto-geo result

                rua_buraco = endereco_basico.get('rua')
                cidade_buraco = endereco_basico.get('cidade_buraco')
                estado_buraco = endereco_basico.get('estado_buraco')

                # Try to use the number/reference for geocoding
                num_referencia_geo = numero_proximo.strip()

                # We need Street, Number/Reference, City, State and Geocoding API Key to attempt auto-geocoding
                tem_dados_para_geo_completo = (st.session_state.geocoding_api_key and rua_buraco and num_referencia_geo and cidade_buraco and estado_buraco)

                if tem_dados_para_geo_completo:
                    st.info("‚úÖ Chave de Geocodifica√ß√£o e dados completos para tentativa autom√°tica encontrados. Tentando gerar o link do Google Maps automaticamente...")
                    tentou_geocodificar = True
                    # Show spinner for geocoding API call
                    with st.spinner("‚è≥ Tentando localizar o buraco no mapa global via Geocoding API..."):
                         geo_resultado = geocodificar_endereco_uncached( # Use uncached version
                            rua_buraco,
                            num_referencia_geo, # Use the number/reference as base for geocoding
                            cidade_buraco,
                            estado_buraco,
                            st.session_state.geocoding_api_key
                        )

                    if 'erro' not in geo_resultado:
                        geocodificacao_sucesso_coords = True
                        st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                            "tipo": "Geocodificada (API)",
                            "latitude": geo_resultado['latitude'],
                            "longitude": geo_resultado['longitude'],
                            "endereco_formatado_api": geo_resultado.get('endereco_formatado_api', ''),
                            "google_maps_link_gerado": geo_resultado['google_maps_link_gerado'],
                            "google_embed_link_gerado": geo_resultado.get('google_embed_link_gerado'),
                            "input_original": num_referencia_geo # Reference what input was used for geocoding
                        }
                        st.success("‚úÖ Localiza√ß√£o Obtida (via Geocodifica√ß√£o Autom√°tica)!")
                    # If there's an error in geo_resultado, it's handled later when setting the failure reason.
                elif not st.session_state.geocoding_api_key:
                     st.warning("‚ö†Ô∏è AVISO: Chave de API de Geocodifica√ß√£o N√ÉO fornecida. Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                elif st.session_state.geocoding_api_key and not tem_dados_para_geo_completo:
                     st.warning("‚ö†Ô∏è AVISO: Chave de Geocodifica√ß√£o fornecida, mas dados de endere√ßo insuficientes para tentativa autom√°tica (precisa de Rua, N√∫mero Pr√≥ximo/Refer√™ncia, Cidade, Estado). Geocodifica√ß√£o autom√°tica N√ÉO tentada.")


                # --- Processar Coordenadas/Link/Descri√ß√£o Manual (if provided) ---
                # This is done *regardless* of the success of automatic geocoding,
                # as manual entry might be more accurate or correct the automatic one.
                localizacao_manual_input_processed = localizacao_manual_input.strip()
                lat_manual: Optional[float] = None
                lon_manual: Optional[float] = None
                tipo_manual_processado = "Descri√ß√£o Manual Detalhada" # Assume manual description by default
                input_original_manual = localizacao_manual_input_processed

                if localizacao_manual_input_processed:
                     # Regex to try to find coordinates in different formats (Lat,Lon or in common links)
                     # Tries to cover "lat,lon", "@lat,lon" in links, "lat lon"
                     # More robust regex: allows spaces or commas as separators, supports negative signs
                     match_coords = re.search(r'(-?\d+\.\d+)[,\s]+(-?\d+\.\d+)', input_original_manual)
                     if match_coords:
                         try:
                             teste_lat = float(match_coords.group(1))
                             teste_lon = float(match_coords.group(2))
                             # Basic coordinate validation
                             if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                 lat_manual = teste_lat
                                 lon_manual = teste_lon
                                 tipo_manual_processado = "Coordenadas Fornecidas/Extra√≠das Manualmente"
                                 st.info("‚úÖ Coordenadas v√°lidas detectadas no input manual!")
                             else:
                                 st.warning("‚ö†Ô∏è Parece um formato de coordenadas, mas fora da faixa esperada (-90 a 90 Latitude, -180 a 180 Longitude). Tratando como descri√ß√£o detalhada.")
                         except ValueError:
                             pass # Not a valid float, proceed to next attempt (link)

                     # If coordinates haven't been found yet, try from a link if it's a link
                     if lat_manual is None and input_original_manual.startswith("http"):
                          st.info("‚ÑπÔ∏è Entrada manual √© um link. Tentando extrair coordenadas (sujeito a formato do link)...")
                          # Try regex for Google Maps links (with @lat,lon) or search (with ?,query=lat,lon)
                          match_maps_link = re.search(r'(?:/@|/search/\?api=1&query=)(-?\d+\.?\d*),(-?\d+\.?\d*)', input_original_manual)
                          if match_maps_link:
                              try:
                                  teste_lat = float(match_maps_link.group(1))
                                  teste_lon = float(match_maps_link.group(2))
                                  if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                       lat_manual = teste_lat
                                       lon_manual = teste_lon
                                       tipo_manual_processado = "Coordenadas Extra√≠das de Link (Manual)"
                                       st.info("‚úÖ Coordenadas extra√≠das de link do Maps no input manual!")
                                  else:
                                       st.warning("‚ö†Ô∏è Coordenadas extra√≠das do link no input manual fora da faixa esperada. Tratando como descri√ß√£o detalhada.")
                              except ValueError:
                                 st.info("‚ÑπÔ∏è Valores no link n√£o parecem coordenadas v√°lidas. Tratando como descri√ß√£o.")
                          else:
                               st.info("‚ÑπÔ∏è N√£o foi poss√≠vel extrair coordenadas reconhec√≠veis do link do Maps fornecido manualmente.")
                               lat_manual = None
                               lon_manual = None
                               tipo_manual_processado = "Descri√ß√£o Manual Detalhada"
                     # If coordinates weren't found and it's not a link, it's a manual description
                     elif lat_manual is None:
                         st.info("‚ÑπÔ∏è Entrada manual n√£o detectada como coordenadas ou link. Tratando como descri√ß√£o detalhada.")
                         tipo_manual_processado = "Descri√ß√£o Manual Detalhada"


                     # Store the result of the manual input.
                     # If coordinates were found manually, they *override* the result of automatic geocoding.
                     # Manual entry with coordinates has PRIORITY over automatic geocoding.
                     if lat_manual is not None and lon_manual is not None:
                         st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                              "tipo": tipo_manual_processado, # Will be 'Coordenadas Fornecidas/Extra√≠das Manualmente' or 'Coordenadas Extra√≠das de Link (Manual)'
                              "input_original": input_original_manual,
                              "latitude": lat_manual,
                              "longitude": lon_manual,
                              # Generate links using manual coordinates
                              "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat_manual},{lon_manual}",
                              "google_embed_link_gerado": f"https://www.google.com/maps/embed/v1/place?key={st.session_state.geocoding_api_key}&q={lat_manual},{lon_manual}" if st.session_state.geocoding_api_key else None # Try to generate embed link if key exists
                         }
                         geocodificacao_sucesso_coords = True # We have coordinates (via manual)!
                         st.success(f"‚úÖ Localiza√ß√£o Exata Obtida (via Input Manual - {tipo_manual_processado})!")
                     # If manual input exists but isn't coordinates, store as manual description:
                     elif localizacao_manual_input_processed:
                         # Only set this if manual input was provided and NO coordinates were found by any method (auto or manual regex)
                         if not geocodificacao_sucesso_coords and lat_manual is None and lon_manual is None: # Added check for manual lat/lon
                             st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                                  "tipo": "Descri√ß√£o Manual Detalhada",
                                  "input_original": input_original_manual,
                                  "descricao_manual": input_original_manual
                             }
                             # geocodificacao_sucesso_coords remains False if auto-geo failed and manual didn't give coords
                             st.info("‚ÑπÔ∏è Localiza√ß√£o exata processada como Descri√ß√£o Manual Detalhada.")
                     # else: If manual input is empty, keep whatever came from auto-geocoding or the default "N√£o informada"


                # --- Final check and setting the failure reason ---
                # Check if the *final* processed location type is one that does NOT have coordinates
                final_loc_type = st.session_state.denuncia_completa['localizacao_exata_processada'].get('tipo')

                if final_loc_type not in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Coordenadas Extra√≠das de Link (Manual)', 'Geocodificada (API)']:
                     # If we ended up *without* coordinates, let's store the reason why we couldn't get them.
                     reason_parts = []

                     # Reason 1: Auto-geocoding failed (if it was attempted)
                     if tentou_geocodificar and 'erro' in geo_resultado:
                          reason_parts.append(f"Geocodifica√ß√£o autom√°tica falhou: {geo_resultado['erro']}")
                     # Reason 2: Auto-geocoding not attempted due to missing key
                     elif not st.session_state.geocoding_api_key:
                          reason_parts.append("Chave de API de Geocodifica√ß√£o n√£o fornecida.")
                     # Reason 3: Auto-geocoding not attempted due to insufficient data (but key existed)
                     elif st.session_state.geocoding_api_key and not tem_dados_para_geo_completo:
                          reason_parts.append("Dados insuficientes para Geocodifica√ß√£o autom√°tica (requer Rua, N√∫mero Pr√≥ximo/Refer√™ncia, Cidade, Estado).")

                     # Reason 4: Manual input was given, but wasn't coordinates that could be extracted
                     # Only add this if manual input was provided AND it did NOT result in coordinates
                     if localizacao_manual_input_processed and not (lat_manual is not None and lon_manual is not None):
                          reason_parts.append("Coordenadas n√£o encontradas ou extra√≠das do input manual.")

                     # Combine and store the reasons if any
                     if reason_parts:
                          # Only update if the current processed type is not already 'Descri√ß√£o Manual Detalhada'
                          # or if it is, but we have new failure reasons to add.
                          current_failure_reason = st.session_state.denuncia_completa['localizacao_exata_processada'].get('motivo_falha_geocodificacao_anterior', '')
                          new_failure_reason = " / ".join(reason_parts)
                          # Prevent adding redundant messages if it's already set to a specific error
                          if 'motivo_falha_geocodificacao_anterior' not in st.session_state.denuncia_completa['localizacao_exata_processada'] or (current_failure_reason and new_failure_reason != current_failure_reason): # Check if current exists and is different
                                st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = new_failure_reason
                          elif not current_failure_reason and new_failure_reason: # If current is empty but new exists
                               st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = new_failure_reason

                     elif final_loc_type == "N√£o informada":
                         # Fallback reason if it's "N√£o informada" and no specific failure reason was captured
                          st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Localiza√ß√£o exata baseada em coordenadas n√£o obtida por nenhum m√©todo."


                # Everything processed, advance to the IA analysis step
                next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'processing_ia':
    st.header("--- üß† Processamento Rob√≥tico de IA ---")
    st.write("Por favor, aguarde enquanto o Krateras analisa os dados (via texto) e gera o relat√≥rio com a intelig√™ncia do Google Gemini.")

    # Access data needed for IA functions
    buraco_data = st.session_state.denuncia_completa.get('buraco', {})
    imagem_data = buraco_data.get('imagem_denuncia')
    caracteristicas = buraco_data.get('caracteristicas_estruturadas', {})
    observacoes = buraco_data.get('observacoes_adicionais', '')

    if imagem_data and 'bytes' in imagem_data and st.session_state.gemini_vision_model:
        st.info("üîç Iniciando an√°lise visual da imagem com Gemini Vision...")
        st.session_state.denuncia_completa['analise_visual_ia'] = analisar_imagem_buraco(
            imagem_data['bytes'],
            st.session_state.gemini_vision_model
        )

    # Ensure IA result dicts exist in state before populating them with results
    # Initialize with default error/unavailable messages instead of empty dicts for clarity in report if IA fails
    if 'insights_ia' not in st.session_state.denuncia_completa: st.session_state.denuncia_completa['insights_ia'] = {"insights": "An√°lise de caracter√≠sticas/observa√ß√µes n√£o realizada ou com error."}
    if 'urgencia_ia' not in st.session_state.denuncia_completa: st.session_state.denuncia_completa['urgencia_ia'] = {"urgencia_ia": "Sugest√£o de urg√™ncia n√£o gerada ou com error."}
    if 'sugestao_acao_ia' not in st.session_state.denuncia_completa: st.session_state.denuncia_completa['sugestao_acao_ia'] = {"sugestao_acao_ia": "Sugest√µes de causa/a√ß√£o n√£o geradas ou com error."}
    if 'resumo_ia' not in st.session_state.denuncia_completa: st.session_state.denuncia_completa['resumo_ia'] = {"resumo_ia": "Resumo n√£o gerado ou com error."}


    # Use a spinner context manager for the whole processing block
    with st.spinner("Executando an√°lises de IA..."):
        # Rodar an√°lise de texto/caracter√≠sticas
        # Passa o modelo Gemini (pode ser None). Store result directly in state inside the spinner
        st.session_state.denuncia_completa['insights_ia'] = analisar_caracteristicas_e_observacoes_gemini(
            caracteristicas,
            observacoes,
            st.session_state.gemini_model
        )

        # Rodar categoriza√ß√£o de urg√™ncia
        # Passa o modelo Gemini (pode ser None) E o resultado da an√°lise anterior (acessado diretamente do state)
        st.session_state.denuncia_completa['urgencia_ia'] = categorizar_urgencia_gemini(
            st.session_state.denuncia_completa, # Passa todos os dados
            st.session_state.denuncia_completa['insights_ia'], # Passa o resultado da an√°lise de insights (garantido ser um dict ou fallback)
            st.session_state.gemini_model
        )


        # Rodar sugest√£o de causa e a√ß√£o
        # Passa o modelo Gemini (pode ser None) E o resultado da an√°lise anterior (acessado diretamente do state)
        st.session_state.denuncia_completa['sugestao_acao_ia'] = sugerir_causa_e_acao_gemini(
            st.session_state.denuncia_completa, # Passa todos os dados
            st.session_state.denuncia_completa['insights_ia'], # Passa o resultado da an√°lise de insights (garantido ser um dict ou fallback)
            st.session_state.gemini_model
        )


        # Gerar resumo completo
        # Passa o modelo Gemini (pode ser None) E os resultados das an√°lises anteriores (acessados diretamente do state)
        # Note: This function is not cached
        st.session_state.denuncia_completa['resumo_ia'] = gerar_resumo_completo_gemini(
            st.session_state.denuncia_completa, # Passa todos os dados
            st.session_state.denuncia_completa['insights_ia'], # Passa o resultado da an√°lise de insights (garantido ser um dict ou fallback)
            st.session_state.denuncia_completa['urgencia_ia'], # Passa o resultado da sugest√£o de urg√™ncia (garantido ser um dict ou fallback)
            st.session_state.denuncia_completa['sugestao_acao_ia'], # Passa o resultado da sugest√£o de causa/a√ß√£o (garantido ser um dict ou fallback)
            st.session_state.gemini_model
        )

        # Avan√ßa para exibir o relat√≥rio ap√≥s o processamento (mesmo que algumas IAs falhem/estejam indispon√≠veis)
    next_step() # Called outside the spinner, after all IA calls are attempted


elif st.session_state.step == 'show_report':
    st.header("üìä RELAT√ìRIO FINAL DA DEN√öNCIA KRATERAS üìä")
    st.write("‚úÖ MISS√ÉO KRATERAS CONCLU√çDA! RELAT√ìRIO GERADO. ‚úÖ")

    # Access data from the state with fallbacks for safety
    dados_completos = st.session_state.denuncia_completa
    denunciante = dados_completos.get('denunciante', {})
    buraco = dados_completos.get('buraco', {})
    endereco = buraco.get('endereco', {})
    caracteristicas = buraco.get('caracteristicas_estruturadas', {})
    observacoes = buraco.get('observacoes_adicionais', 'Nenhuma observa√ß√£o adicional fornecida.')
    imagem_data = buraco.get('imagem_denuncia') # Image data
    localizacao_exata = dados_completos.get('localizacao_exata_processada', {})
    insights_ia = dados_completos.get('insights_ia', {})
    urgencia_ia = dados_completos.get('urgencia_ia', {})
    sugestao_acao_ia = dados_completos.get('sugestao_acao_ia', {})
    resumo_ia = dados_completos.get('resumo_ia', {})
    data_hora = dados_completos.get('metadata', {}).get('data_hora_utc', 'N√£o registrada')
    st.write(f"üìÖ Data/Hora do Registro (UTC): **{data_hora}**")

    st.markdown("---")

    # Display all steps open in expanders
    with st.expander("üë§ Dados do Denunciante", expanded=True):
        st.write(f"**Nome:** {denunciante.get('nome', 'N√£o informado')}")
        st.write(f"**Idade:** {denunciante.get('idade', 'N√£o informado')}") # Will be None if not informed
        st.write(f"**Cidade de Resid√™ncia:** {denunciante.get('cidade_residencia', 'N√£o informada')}")

    with st.expander("üöß Dados Base do Endere√ßo do Buraco", expanded=True):
        st.write(f"**Rua:** {endereco.get('rua', 'N√£o informada')}")
        if buraco.get('numero_proximo'):
            st.write(f"**Refer√™ncia/N√∫mero Pr√≥ximo:** {buraco.get('numero_proximo')}")
        if endereco.get('bairro'):
            st.write(f"**Bairro:** {endereco.get('bairro')}")
        if endereco.get('cidade_buraco'):
             st.write(f"**Cidade do Buraco:** {endereco.get('cidade_buraco')}")
        if endereco.get('estado_buraco'):
            st.write(f"**Estado do Buraco:** {endereco.get('estado_buraco')}")
        if buraco.get('cep_informado'):
            st.write(f"**CEP Informado:** {buraco.get('cep_informado')}")
        st.write(f"**Lado da Rua:** {buraco.get('lado_rua', 'N√£o informado')}")


    with st.expander("üìã Caracter√≠sticas Estruturadas e Observa√ß√µes (Denunciante)", expanded=True):
         st.write("**Caracter√≠sticas Selecionadas:**")
         if caracteristicas:
             # Display only characteristics that are not "Selecione" or None/empty list
             caracteristicas_exibir = {k: v for k, v in caracteristicas.items() if v and v != 'Selecione' and (not isinstance(v, list) or v)}
             if caracteristicas_exibir:
                for key, value in caracteristicas_exibir.items():
                     if isinstance(value, list):
                         st.write(f"- **{key}:** {', '.join([item for item in value if item and item != 'Selecione'])}") # Filter here too for display
                     else:
                       st.write(f"- **{key}:** {value}")
             else:
                 st.info("Nenhuma caracter√≠stica estruturada significativa foi selecionada.")
         else:
              st.info("Nenhuma caracter√≠stica estruturada coletada.")


         st.write("**Observa√ß√µes Adicionais Fornecidas:**")
         st.info(observacoes if observacoes else 'Nenhuma observa√ß√£o adicional fornecida.')

    with st.expander("üìç Localiza√ß√£o Exata Processada", expanded=True):
        tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
        st.write(f"**Tipo de Coleta:** {tipo_loc}")

        if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
            lat = localizacao_exata.get('latitude')
            lon = localizacao_exata.get('longitude')

            if lat is not None and lon is not None:
                 st.write(f"**Coordenadas:** `{lat}, {lon}`")

                 st.subheader("Visualiza√ß√µes de Mapa")

                 # 1. Google Maps Embed and Link (Combined)
                 embed_link_google = localizacao_exata.get('google_embed_link_gerado')
                 link_maps_google = localizacao_exata.get('google_maps_link_gerado')

                 # Display Google Maps section only if embed link was generated (requires key & API) OR direct link exists
                 if (embed_link_google and st.session_state.geocoding_api_key) or link_maps_google:
                     st.markdown("---")
                     st.write("**Google Maps:**")

                     if embed_link_google and st.session_state.geocoding_api_key:
                          try:
                              st.components.v1.html(
                                  f'<iframe width="100%" height="450" frameborder="0" style="border:0" src="{embed_link_google}" allowfullscreen></iframe>',
                                  height=470, # A bit taller to include border
                                  scrolling=False
                              )
                              st.info("‚ÑπÔ∏è Mapa Google Maps gerado usando a chave de Geocoding API. Requer Embed API habilitada.")
                          except Exception as e:
                               st.error(f"‚ùå Erro ao gerar mapa Google Maps incorporado: {e}")
                     elif st.session_state.geocoding_api_key:
                          st.warning("‚ö†Ô∏è Chave de Geocodifica√ß√£o fornecida, mas n√£o foi poss√≠vel gerar um mapa Google Maps incorporado. Verifique se a Embed API est√° habilitada no Google Cloud ou se a geocodifica√ß√£o autom√°tica falhou.")
                     elif not st.session_state.geocoding_api_key and link_maps_google:
                           st.info("‚ÑπÔ∏è Chave de API de Geocodifica√ß√£o n√£o fornecida. Mapa Google Maps incorporado indispon√≠vel, apenas link direto.")
                     elif not st.session_state.geocoding_api_key and not link_maps_google:
                           st.warning("‚ö†Ô∏è Chave de API de Geocodifica√ß√£o n√£o fornecida. Mapas Google indispon√≠veis.")


                     # Display the link below the embed if it exists
                     if link_maps_google:
                         st.write(f"[Abrir no Google Maps]({link_maps_google})")


                 # 2. OpenStreetMap Embed and Link (Combined)
                 st.markdown("---")
                 st.write("**OpenStreetMap:**")

                 # Generate the detailed OpenStreetMap embed iframe URL
                 # A reasonable delta for a small area view. Adjust zoom if needed.
                 delta = 0.005
                 bbox = f"{lon - delta},{lat - delta},{lon + delta},{lat + delta}"
                 # Encode bbox and marker coordinates for the URL
                 encoded_bbox = urllib.parse.quote(bbox)
                 encoded_marker = urllib.parse.quote(f"{lat},{lon}")
                 osm_embed_url = f"https://www.openstreetmap.org/export/embed.html?bbox={encoded_bbox}&layer=mapnik&marker={encoded_marker}"


                 try:
                     # Use st.components.v1.html to embed the detailed OSM map
                     st.components.v1.html(
                         f'<iframe width="100%" height="450" frameborder="0" style="border:0" src="{osm_embed_url}" allowfullscreen></iframe>',
                         height=470, # A bit taller to include border
                         scrolling=False
                     )
                     st.info("‚ÑπÔ∏è Mapa OpenStreetMap detalhado incorporado (via openstreetmap.org).")
                 except Exception as embed_error:
                      st.error(f"‚ùå Erro ao gerar mapa OpenStreetMap incorporado: {embed_error}")


                 # Display the direct link below the embed
                 osm_link = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=18/{lat}/{lon}"
                 st.write(f"[Abrir no OpenStreetMap.org]({osm_link})")

                 # Add the simple st.map version back as well for diversity
                 st.markdown("---")
                 st.write("**OpenStreetMap (Mapa Simplificado Streamlit):**")
                 try:
                     map_data = pd.DataFrame({'lat': [lat], 'lon': [lon]})
                     st.map(map_data, zoom=18, use_container_width=True) # Correct parameter
                     st.info("‚ÑπÔ∏è Este √© um mapa simplificado gerado diretamente no Streamlit usando dados OpenStreetMap.")
                 except Exception as map_error:
                      st.error(f"‚ùå Erro ao gerar visualiza√ß√£o do mapa OpenStreetMap simplificado: {map_error}")


                 if localizacao_exata.get('endereco_formatado_api'):
                      st.markdown("---")
                      st.write(f"**Endere√ßo Formatado (API):** {localizacao_exata.get('endereco_formatado_api')}")
                 if localizacao_exata.get('input_original'):
                     st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")


        elif tipo_loc == 'Descri√ß√£o Manual Detalhada':
            st.write(f"**Descri√ß√£o Manual:**")
            st.info(localizacao_exata.get('descricao_manual', 'N√£o informada'))
            if localizacao_exata.get('input_original'):
                st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")

        else: # Type "N√£o informada"
            st.warning("Localiza√ß√£o exata n√£o coletada de forma estruturada (coordenadas/link), nem descri√ß√£o manual. O relat√≥rio depender√° da descri√ß√£o e endere√ßo base.")

        # Include reason for geocoding failure if applicable and not overridden by manual coords
        if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
             st.info(f"‚ÑπÔ∏è Nota: Motivo da falha na geocodifica√ß√£o autom√°tica ou input manual sem coordenadas: {localizacao_exata.get('motivo_falha_geocodificacao_anterior')}")


    with st.expander("üì∑ Imagem da Den√∫ncia (Refer√™ncia Visual)", expanded=True):
         if imagem_data and 'bytes' in imagem_data:
              try:
                   # Use io.BytesIO to display the image from bytes
                   # Corrected deprecated parameter
                   st.image(io.BytesIO(imagem_data['bytes']), caption=imagem_data.get('filename', 'Imagem Carregada'), use_container_width=True)
                   st.write(f"**Nome do Arquivo:** {imagem_data.get('filename', 'N√£o informado')}")
                   st.write(f"**Tipo:** {imagem_data.get('type', 'N√£o informado')}")
                   st.info("Esta imagem √© inclu√≠da no relat√≥rio para refer√™ncia visual e ser√° analisada pelo modelo Gemini Vision.")
              except Exception as e:
                   st.error(f"‚ùå N√£o foi poss√≠vel exibir a imagem carregada: {e}")
         elif imagem_data and 'erro' in imagem_data:
              st.error(f"‚ùå Erro ao carregar a imagem: {imagem_data.get('erro', 'Detalhe desconhecido.')}")
         else:
              st.info("‚ÑπÔ∏è Nenhuma imagem foi carregada para esta den√∫ncia.")

    with st.expander("üîç An√°lise Visual por IA (Gemini Vision)", expanded=True):
        if imagem_data and 'bytes' in imagem_data and st.session_state.gemini_vision_model:
            analise_visual = dados_completos.get('analise_visual_ia', {}).get('analise_visual', 'An√°lise visual n√£o realizada ou com erro.')
            st.write(analise_visual)
        elif not st.session_state.gemini_vision_model:
            st.warning("‚ö†Ô∏è An√°lise visual por IA indispon√≠vel (Modelo Gemini Vision n√£o inicializado)")
        else:
            st.info("‚ÑπÔ∏è Nenhuma imagem fornecida para an√°lise visual.")


    st.markdown("---")
    st.subheader("ü§ñ An√°lises Rob√≥ticas de IA (Google Gemini Text)")

    if st.session_state.gemini_model:
        with st.expander("üß† An√°lise de Caracter√≠sticas e Observa√ß√µes (IA Gemini)", expanded=True):
            st.write(insights_ia.get('insights', 'An√°lise n√£o realizada ou com erro.'))

        # Image analysis expander removed.

        with st.expander("üö¶ Sugest√£o de Urg√™ncia (IA Gemini)", expanded=True):
            st.write(urgencia_ia.get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o gerada ou com erro.'))

        with st.expander("üõ†Ô∏è Sugest√µes de Causa e A√ß√£o (IA Gemini)", expanded=True):
            st.write(sugestao_acao_ia.get('sugestao_acao_ia', 'Sugest√µes n√£o geradas ou com erro.'))

        st.markdown("---")
        st.subheader("üìú Resumo Narrativo Inteligente (IA Gemini)")
        st.write(resumo_ia.get('resumo_ia', 'Resumo n√£o gerado ou com erro.'))
    else:
        st.warning("‚ö†Ô∏è An√°lises e Resumo da IA n√£o dispon√≠veis (Chave Google API KEY n√£o configurada ou modelo de texto n√£o inicializado).")


    st.markdown("---")
    st.write("Esperamos que este relat√≥rio ajude a consertar o buraco!")

    # Option to restart the process
    if st.button("Iniciar Nova Den√∫ncia"):
        # Clear the session state for a fresh start (except cache_resource objects)
        all_keys = list(st.session_state.keys())
        for key in all_keys:
             del st.session_state[key]
        st.rerun()

    # Option to display raw data (useful for debugging or export)
    with st.expander("üîå Ver Dados Brutos (JSON)"):
        # Remove image bytes to avoid polluting the raw JSON, if present
        dados_para_json = dados_completos.copy()
        if 'buraco' in dados_para_json and 'imagem_denuncia' in dados_para_json['buraco']:
             img_data = dados_para_json['buraco']['imagem_denuncia']
             if img_data and 'bytes' in img_data:
                  # Create a copy and remove the 'bytes' key
                  img_data_copy = img_data.copy()
                  del img_data_copy['bytes']
                  dados_para_json['buraco']['imagem_denuncia'] = img_data_copy
                  st.info("Conte√∫do da imagem (bytes) omitido do JSON bruto.")
             # else: If imagem_denuncia exists but doesn't have 'bytes' (e.g., error), keep as is

        st.json(dados_para_json)


# --- Run the application ---
# The main execution of the Streamlit script is managed by Streamlit itself.
# Functions are called based on the session state and user interactions.
# The code below is just to ensure the script runs as a Streamlit app.
if __name__ == "__main__":
    # Streamlit handles the main loop, no traditional main function needed
    # Code outside functions and at the top is executed on each rerun.
    # Flow is controlled by ifs/elifs based on st.session_state.step
    pass # Nothing to do here beyond what's already in the main body of the script

# -*- coding: utf-8 -*-
"""
Krateras üöÄ‚ú®üîí: O Especialista Rob√≥tico de Den√∫ncia de Buracos (v3.2 - Streamlit Advanced Edition)

Bem-vindo √† vers√£o visual e aprimorada do Krateras! Agora com interface rica,
an√°lise de imagem por IA, inputs estruturados e seguran√ßa de credenciais refor√ßada.

Tecnologias: Python, Streamlit, Google Gemini API (Vision & Pro), Google Geocoding API, ViaCEP.
Objetivo: Coletar dados estruturados e ricos de den√∫ncias de buracos, analisar texto E imagem
com IA, gerar relat√≥rios detalhados, priorizados e acion√°veis, incluindo localiza√ß√£o
visual em mapa e resumo inteligente.

Vamos juntos consertar essas ruas com a mais alta tecnologia dispon√≠vel!
Iniciando sistemas visuais, rob√≥ticos e de intelig√™ncia artificial...
"""

import streamlit as st
import requests
import google.generativeai as genai
from typing import Dict, Any, Optional, List
import re
import json
import pandas as pd
from PIL import Image # Para trabalhar com imagens

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Krateras üöÄ‚ú®üîí - Den√∫ncia de Buracos",
    page_icon="üöß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Estilos CSS Personalizados (Para um toque extra de tecnologia e clareza) ---
st.markdown("""
<style>
    /* Geral */
    .reportview-container .main .block-container {
        padding-top: 2rem;
        padding-right: 3rem;
        padding-left: 3rem;
        padding-bottom: 2rem;
    }
    h1, h2, h3, h4 {
        color: #4A90E2; /* Azul Cratera */
        font-weight: bold;
    }
    h1 { font-size: 2.5em; margin-bottom: 0.5em; }
    h2 { font-size: 1.8em; margin-top: 1.5em; margin-bottom: 0.8em;}
    h3 { font-size: 1.4em; margin-top: 1.2em; margin-bottom: 0.6em;}
    h4 { font-size: 1.1em; margin-top: 1em; margin-bottom: 0.4em;}

    /* Bot√µes */
    .stButton>button {
        background-color: #50E3C2; /* Verde Rob√¥ */
        color: white;
        font-weight: bold;
        border-radius: 10px;
        padding: 0.6rem 1.2rem;
        margin-top: 1rem;
        margin-right: 0.5rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }
    .stButton>button:hover {
        background-color: #00B894; /* Verde Rob√¥ Escuro */
        color: white;
    }
    .stButton>button:active {
         background-color: #008C74;
    }

    /* Inputs */
    .stTextInput>div>div>input, .stNumberInput>div>div>input, .stTextArea>div>div>textarea {
        border-radius: 5px;
        padding: 0.5rem;
        border: 1px solid #ccc;
    }
     .stSelectbox>div>div, .stRadio>div {
         margin-bottom: 10px;
     }

    /* Feedback Boxes */
    .css-1aumqxt { border-left: 5px solid #4A90E2 !important; background-color: #E6F3FF; } /* st.info */
    .css-1r6cdft { border-left: 5px solid #F5A623 !important; background-color: #FFF8E1; } /* st.warning */
    .css-t9s6qg { border-left: 5px solid #D0021B !important; background-color: #FFEBEE; } /* st.error */
    .css-1u3jtzg { border-left: 5px solid #7ED321 !important; background-color: #F1F8E9; } /* st.success */

    /* Spinners */
    .stSpinner > div > div {
        border-top-color: #4A90E2 !important;
    }

    /* Expanders (Menus Sanfona) */
    .streamlit-expanderHeader {
        font-size: 1.1em !important;
        font-weight: bold !important;
        color: #4A90E2 !important;
        background-color: #F0F2F6; /* Cinza claro para cabe√ßalhos */
        border-radius: 5px;
        padding: 0.8rem;
        margin-top: 1rem;
        border: 1px solid #ccc;
    }
    .streamlit-expanderContent {
         background-color: #FFFFFF; /* Fundo branco para o conte√∫do */
         padding: 1rem;
         border-left: 1px solid #ccc;
         border-right: 1px solid #ccc;
         border-bottom: 1px solid #ccc;
         border-radius: 0 0 5px 5px;
    }

    /* Separadores */
    hr {
        margin-top: 2em;
        margin-bottom: 2em;
        border: 0;
        border-top: 1px solid #eee;
    }

    /* Imagem upload area */
    .stFileUploader label {
        font-weight: bold;
        color: #4A90E2;
    }

</style>
""", unsafe_allow_html=True)


# --- Inicializa√ß√£o de Estado da Sess√£o ---
# Gerencia o fluxo da aplica√ß√£o web e os dados coletados/processados
if 'step' not in st.session_state:
    st.session_state.step = 'start'
if 'denuncia_completa' not in st.session_state:
    st.session_state.denuncia_completa = {}
if 'api_keys_loaded' not in st.session_state:
    st.session_state.api_keys_loaded = False
if 'gemini_pro_model' not in st.session_state: # Modelo para texto
    st.session_state.gemini_pro_model = None
if 'gemini_vision_model' not in st.session_state: # Modelo para vis√£o
    st.session_state.gemini_vision_model = None
if 'geocoding_api_key' not in st.session_state:
    st.session_state.geocoding_api_key = None
if 'uploaded_image' not in st.session_state:
    st.session_state.uploaded_image = None
if 'image_analysis_result' not in st.session_state:
     st.session_state.image_analysis_result = None


# --- üîë Gerenciamento de Chaves Secretas (Streamlit Secrets) ---
# Utiliza o .streamlit/secrets.toml para carregar chaves de forma segura

def load_api_keys() -> tuple[Optional[str], Optional[str]]:
    """
    Tenta obter as chaves de API do Google Gemini e Google Maps Geocoding de Streamlit Secrets.
    Retorna None se n√£o encontradas.
    """
    # Chaves definidas no .streamlit/secrets.toml
    gemini_key = st.secrets.get('GOOGLE_API_KEY') # Usada para Gemini-Pro e Gemini-Vision
    geocoding_key = st.secrets.get('geocoding_api_key') # Usada para Geocoding e Embed

    if not gemini_key:
        st.warning("‚ö†Ô∏è Segredo 'GOOGLE_API_KEY' n√£o encontrado nos Streamlit Secrets. Funcionalidades de IA do Gemini estar√£o desabilitadas.")
    if not geocoding_key:
        st.warning("‚ö†Ô∏è Segredo 'geocoding_api_key' n√£o encontrado nos Streamlit Secrets. Geocodifica√ß√£o autom√°tica e Visualiza√ß√£o Google Maps Embed estar√£o desabilitadas.")
        st.info("‚ÑπÔ∏è Para configurar os segredos, crie um arquivo `.streamlit/secrets.toml` na raiz do seu projeto Streamlit (se ainda n√£o existir a pasta `.streamlit`) com:\n```toml\nGOOGLE_API_KEY = \"SUA_CHAVE_GEMINI\"\ngeocoding_api_key = \"SUA_CHAVE_GEOCODING\"\n```\n**IMPORTANTE:** N√£o comite o arquivo `secrets.toml` para reposit√≥rios p√∫blicos no GitHub! O Streamlit Cloud tem uma interface segura para adicionar estes segredos.")
        st.info("‚ùó A API Geocoding e a Maps Embed API PODE gerar custos. Verifique a precifica√ß√£o do Google Cloud e habilite-as no seu projeto Google Cloud Platform (Console -> APIs & Services -> Library). O erro 'This API project is not authorized to use this API' para o mapa Embed geralmente significa que a 'Maps Embed API' n√£o est√° habilitada ou autorizada para a chave.")


    return gemini_key, geocoding_key

# --- Inicializar APIs (Cacheado para performance) ---

@st.cache_resource
def init_gemini_models(api_key: Optional[str]) -> tuple[Optional[genai.GenerativeModel], Optional[genai.GenerativeModel]]:
    """Inicializa os modelos Google Gemini (Pro e Vision) com cache."""
    if not api_key:
        return None, None # Retorna None para ambos se a chave n√£o for fornecida

    model_pro = None
    model_vision = None

    try:
        genai.configure(api_key=api_key)
        available_models = [m.name for m in genai.list_models()]

        # Inicializar Gemini-Pro (ou Flash) para texto
        preferred_text_models: list[str] = ['gemini-1.5-flash-latest', 'gemini-1.0-pro', 'gemini-pro']
        text_model_name: Optional[str] = None
        for pref_model in preferred_text_models:
            if f'models/{pref_model}' in available_models:
                text_model_name = pref_model
                break
            if pref_model in available_models:
                 text_model_name = pref_model
                 break

        if text_model_name:
             model_pro = genai.GenerativeModel(text_model_name)
             st.success(f"‚úÖ Conex√£o com Google Gemini (Texto) estabelecida usando modelo '{text_model_name}'.")
        else:
             st.warning("‚ö†Ô∏è Nenhum modelo de texto Gemini compat√≠vel encontrado na sua conta.")


        # Inicializar Gemini-Vision para an√°lise de imagem
        vision_model_name = 'gemini-pro-vision'
        if f'models/{vision_model_name}' in available_models or vision_model_name in available_models:
            model_vision = genai.GenerativeModel(vision_model_name)
            st.success(f"‚úÖ Conex√£o com Google Gemini (Vis√£o) estabelecida usando modelo '{vision_model_name}'.")
        else:
            st.warning(f"‚ö†Ô∏è Modelo Gemini Vision ('{vision_model_name}') n√£o encontrado ou compat√≠vel na sua conta. An√°lise de imagem desabilitada.")


        if model_pro or model_vision:
            st.info("A IA est√° online e pensativa!")

        return model_pro, model_vision

    except Exception as e:
        st.error(f"‚ùå ERRO no Painel de Controle Gemini: Falha na inicializa√ß√£o dos modelos Google Gemini. Verifique sua chave e status do servi√ßo.")
        st.exception(e)
        return None, None


# --- Fun√ß√µes de API Call (Cacheado para resultados est√°veis por sess√£o) ---

@st.cache_data(show_spinner="‚è≥ Interrogando o ViaCEP...")
def buscar_cep(cep: str) -> Dict[str, Any]:
    """Consulta a API ViaCEP para obter dados de endere√ßo com tratamento de erros."""
    cep_limpo = cep.replace("-", "").replace(".", "").strip()
    if len(cep_limpo) != 8 or not cep_limpo.isdigit():
        return {"erro": "Formato de CEP inv√°lido. Precisa de 8 d√≠gitos, amig√£o!"}

    url = f"https://viacep.com.br/ws/{cep_limpo}/json/"
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()
        if 'erro' in data and data['erro'] is True:
            return {"erro": f"CEP '{cep_limpo}' n√£o encontrado no ViaCEP. Ele se escondeu! üßê"}
        if not data.get('logradouro') or not data.get('localidade') or not data.get('uf'):
             return {"erro": f"CEP '{cep_limpo}' encontrado, mas os dados de endere√ßo est√£o incompletos. O ViaCEP s√≥ contou parte da hist√≥ria!"}
        return data
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao buscar o CEP '{cep_limpo}'. O ViaCEP n√£o responde! üò¥"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com o ViaCEP para o CEP '{cep_limpo}': {e}. Problemas na linha!"}
    except Exception as e:
         return {"erro": f"Ocorreu um erro inesperado ao buscar o CEP '{cep_limpo}': {e}. Isso n√£o estava nos meus manuais!"}

# N√£o cachear a Geocodifica√ß√£o diretamente, pois depende de inputs no formul√°rio
# e o resultado da localiza√ß√£o manual tamb√©m precisa ser processado no mesmo fluxo.
# A chamada ser√° feita dentro do fluxo do Streamlit.
# @st.cache_data(show_spinner="‚è≥ Tentando localizar o buraco no mapa global via Geocoding API...")
def geocodificar_endereco(rua: str, numero: str, cidade: str, estado: str, api_key: str) -> Dict[str, Any]:
    """Tenta obter coordenadas geogr√°ficas e link Google Maps via Google Maps Geocoding API."""
    if not api_key:
        return {"erro": "Chave de API de Geocodifica√ß√£o n√£o fornecida."}
    if not rua or not numero or not cidade or not estado:
         return {"erro": "Dados de endere√ßo insuficientes (requer rua, n√∫mero, cidade, estado) para geocodificar."}

    address = f"{rua}, {numero}, {cidade}, {estado}"
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={requests.utils.quote(address)}&key={api_key}"

    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()

        if data['status'] != 'OK':
            status = data.get('status', 'STATUS DESCONHECIDO')
            error_msg = data.get('error_message', 'Sem mensagem adicional.')
            return {"erro": f"Geocodifica√ß√£o falhou. Status: {status}. Mensagem: {error_msg}"}
        if not data['results']:
             return {"erro": "Geocodifica√ß√£o falhou. Nenhum local exato encontrado para o endere√ßo fornecido."}

        location = data['results'][0]['geometry']['location']
        lat = location['lat']
        lng = location['lng']
        formatted_address = data['results'][0].get('formatted_address', address)

        # O link embed usa a mesma chave da Geocoding API, mas a Maps Embed API precisa estar habilitada
        google_embed_link = None
        if api_key: # Verifica se a chave existe antes de gerar o link embed
             google_embed_link = f"https://www.google.com/maps/embed/v1/place?key={api_key}&q={lat},{lng}"


        return {
            "latitude": lat,
            "longitude": lng,
            "endereco_formatado_api": formatted_address,
            "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat},{lng}",
            "google_embed_link_gerado": google_embed_link
        }
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao tentar geocodificar: {address}"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com a API de Geocodifica√ß√£o: {address}. Detalhes: {e}"}
    except Exception as e:
        return {"erro": f"Ocorreu um erro inesperado durante a geocodifica√ß√£o: {address}. Detalhes: {e}"}


# --- Fun√ß√µes de An√°lise de IA (Cacheado para resultados est√°veis por sess√£o, exceto an√°lise de imagem) ---
# Safety settings configuradas para permitir discuss√µes sobre perigos na rua
SAFETY_SETTINGS = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# N√£o cachear a an√°lise de imagem diretamente aqui, ser√° chamada no fluxo principal se houver imagem
# @st.cache_data(show_spinner="üß† Analisando a imagem do buraco com IA Gemini Vision...")
def analyze_image_with_gemini_vision(image_bytes: bytes, model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini Vision para analisar uma imagem e extrair caracter√≠sticas do buraco."""
    if not model:
        return {"image_analysis": "ü§ñ An√°lise de imagem via IA indispon√≠vel (Motor Gemini Vision offline)."}
    if not image_bytes:
         return {"image_analysis": "üîç Nenhuma imagem fornecida para an√°lise de IA."}

    try:
        # O Gemini Vision aceita bytes da imagem
        image_parts = [{"mime_type": "image/jpeg", "data": image_bytes}]

        prompt = [
            "Analyze the provided image of a hole in the road. Describe the visible characteristics relevant to a road repair report. Focus on:",
            "- Estimated size (e.g., small, medium, large, diameter relative to common objects if visible)",
            "- Estimated depth (e.g., shallow, deep, relative to visible objects)",
            "- Presence of water or moisture",
            "- Any obvious visible dangers or context clues in the immediate vicinity of the hole itself (e.g., cracked pavement around it, debris)",
            "Provide a concise textual analysis based SOLELY on the image content.",
            image_parts[0] # Adiciona a imagem ao prompt
        ]

        response = model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)

        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"image_analysis": f"‚ùå An√°lise de imagem bloqueada pelos protocolos de seguran√ßa do Gemini Vision. Motivo: {block_reason}"}

        return {"image_analysis": response.text.strip()}
    except Exception as e:
        return {"image_analysis": f"‚ùå Erro ao analisar a imagem com IA: {e}"}


@st.cache_data(show_spinner="üß† Executando an√°lise profunda dos dados do buraco com IA Gemini...")
def analisar_dados_com_gemini(_dados_buraco: Dict[str, Any], _image_analysis_ia: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini (texto) para analisar dados estruturados, observa√ß√µes e an√°lise de imagem."""
    if not _model:
        return {"insights": "ü§ñ An√°lise de dados via IA indispon√≠vel (Motor Gemini Texto offline)."}

    # Formatar os dados estruturados e observa√ß√µes para o prompt
    structured_details = _dados_buraco.get('structured_details', {})
    observacoes_adicionais = _dados_buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')

    structured_text = "Detalhes Estruturados Fornecidos pelo Usu√°rio:\n"
    for key, value in structured_details.items():
         # Trata listas (como perigos) para um formato leg√≠vel
         if isinstance(value, list):
              value_str = ", ".join(value) if value else "Nenhum selecionado"
         else:
              value_str = value if value else "N√£o informado"
         # Traduz as chaves para o prompt de forma mais amig√°vel (manter consist√™ncia com os inputs)
         key_translated = {
             'tamanho': 'Tamanho Estimado',
             'perigo': 'N√≠vel de Perigo',
             'profundidade': 'Profundidade Estimada',
             'presenca_agua': 'Presen√ßa de √Ågua',
             'contexto': 'Contexto/Hist√≥rico',
             'perigos_detalhados': 'Perigos e Impactos Detalhados (Selecionados)',
             'identificadores_visuais': 'Identificadores Visuais Adicionais',
         }.get(key, key) # Usa a chave original se n√£o houver tradu√ß√£o

         structured_text += f"- {key_translated}: {value_str}\n"

    # Adiciona a an√°lise de imagem ao contexto da IA, se dispon√≠vel
    image_analysis_text = _image_analysis_ia.get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel ou com erro.')
    if "An√°lise de imagem via IA indispon√≠vel" in image_analysis_text or "Nenhuma imagem fornecida" in image_analysis_text:
         image_context = "Nota: An√°lise de imagem n√£o foi realizada ou est√° indispon√≠vel."
    else:
         image_context = f"Insights da An√°lise de Imagem (IA Gemini Vision):\n{image_analysis_text}"


    prompt = f"""
    Analise os seguintes dados estruturados, observa√ß√µes adicionais e (se dispon√≠vel) a an√°lise de uma imagem, todos relacionados a uma den√∫ncia de um buraco em uma rua. Seu objetivo √© extrair insights CRUCIAIS e gerar uma an√°lise detalhada objetiva para um sistema de reparo p√∫blico.

    {structured_text}

    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"

    {image_context}

    Com base NESTAS informa√ß√µes (estruturadas, observa√ß√µes e an√°lise de imagem), gere uma an√°lise detalhada. Formate a sa√≠da como texto claro, usando marcadores (-) ou t√≠tulos. Se uma categoria N√ÉO PUDER ser confirmada com ALTA CONFIAN√áA pelas informa√ß√µes fornecidas, indique "N√£o especificado/inferido".

    Categorias para An√°lise Detalhada:
    - Severidade/Tamanho Consolidado (Baseado em dados estruturados, observa√ß√µes e imagem): [Ex: Pequeno, M√©dio, Grande, Enorme, Cr√≠tico. Comente se os inputs divergem ou refor√ßam a mesma conclus√£o.]
    - Profundidade Consolidada: [Ex: Raso, Fundo, Muito Fundo. Comente se os inputs divergem ou refor√ßam.]
    - Presen√ßa de √Ågua/Alagamento (Confirmado pelos inputs): [Sim/N√£o/N√£o mencionado/N√£o confirmado.]
    - Perigos Potenciais e Impactos Consolidado: [Liste riscos espec√≠ficos citados nos inputs estruturados, observa√ß√µes e/ou vis√≠veis na imagem. Consolide e destaque os mais graves.]
    - Contexto Adicional Relevante Consolidado: [Problema recorrente/antigo/novo, perto de local importante, em via movimentada, em curva, etc., conforme os inputs.]
    - Identificadores Visuais Adicionais (Conforme input): [Detalhes √∫nicos pr√≥ximos que ajudam a achar o buraco.]
    - Palavras-chave Principais: [Liste 3-7 palavras-chave que capturem a ess√™ncia da den√∫ncia e o problema principal.]

    Formate a resposta de forma limpa e estruturada.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"insights": f"‚ùå An√°lise de dados bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"insights": response.text.strip()}
    except Exception as e:
        return {"insights": f"‚ùå Erro ao analisar os dados com IA: {e}"}


@st.cache_data(show_spinner="üß† Calculando o N√≠vel de Prioridade Rob√≥tica para esta den√∫ncia...")
def categorizar_urgencia_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para sugerir uma categoria de urg√™ncia com base em todos os dados e insights."""
    if not _model:
        return {"urgencia_ia": "ü§ñ Sugest√£o de urg√™ncia via IA indispon√≠vel (Motor Gemini Texto offline)."}

    # Acessa todos os dados relevantes do dicion√°rio completo
    buraco = _dados_denuncia_completa.get('buraco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')
    image_analysis_text = _dados_denuncia_completa.get('image_analysis_ia', {}).get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel.')
    insights_text = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise detalhada n√£o dispon√≠vel.')

    localizacao_exata = _dados_denuncia_completa.get('localizacao_exata_processada', {})
    tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
    loc_contexto = f"Localiza√ß√£o informada: Tipo: {tipo_loc}."
    if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
        loc_contexto += f" Coordenadas: {localizacao_exata.get('latitude')}, {localizacao_exata.get('longitude')}. Link: {localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')}."
    elif tipo_loc == 'Descri√ß√£o Manual Detalhada':
        loc_contexto += f" Descri√ß√£o Manual: '{localizacao_exata.get('descricao_manual', 'N√£o informada')}'."
    if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
         loc_contexto += f" (Nota: Geocodifica√ß√£o autom√°tica falhou/n√£o tentada: {localizacao_exata.get('motivo_falha_geocodificacao_anterior', 'Motivo desconhecido')})"


    # Formatar os detalhes estruturados para o prompt de urg√™ncia
    structured_urgency_factors = []
    if structured_details.get('tamanho'): structured_urgency_factors.append(f"Tamanho Estimado: {structured_details['tamanho']}")
    if structured_details.get('profundidade'): structured_urgency_factors.append(f"Profundidade Estimada: {structured_details['profundidade']}")
    if structured_details.get('perigo'): structured_urgency_factors.append(f"N√≠vel de Perigo: {structured_details['perigo']}")
    if structured_details.get('presenca_agua'): structured_urgency_factors.append(f"Presen√ßa de √Ågua: {structured_details['presenca_agua']}")
    if structured_details.get('perigos_detalhados'): structured_urgency_factors.append(f"Perigos Detalhados (Selecionados): {', '.join(structured_details['perigos_detalhados'])}")
    if structured_details.get('contexto'): structured_urgency_factors.append(f"Contexto/Hist√≥rico: {structured_details['contexto']}")
    structured_urgency_text = "Detalhes Estruturados: " + ("; ".join(structured_urgency_factors) if structured_urgency_factors else "Nenhum informado.")


    prompt = f"""
    Com base nas informa√ß√µes completas da den√∫ncia, an√°lise de imagem (se dispon√≠vel) e insights extra√≠dos, sugira a MELHOR categoria de urg√™ncia para o reparo deste buraco.
    Considere a severidade/tamanho, profundidade, PERIGOS POTENCIAIS e impactos mencionados/vis√≠veis, e qualquer CONTEXTO ADICIONAL relevante (como ser recorrente, em √°rea de alto tr√°fego/risco, perto de local importante). D√™ peso especial aos PERIGOS mencionados ou vis√≠veis.

    Escolha UMA Categoria de Urg√™ncia entre estas:
    - Urg√™ncia Baixa: Buraco pequeno, sem perigo aparente, em local de baixo tr√°fego. Principalmente est√©tico ou pequeno inc√¥modo.
    - Urg√™ncia M√©dia: Tamanho razo√°vel, pode causar leve inc√¥modo ou dano menor (ex: pneu furado leve), em via secund√°ria ou com tr√°fego moderado. Requer reparo em prazo razo√°vel.
    - Urg√™ncia Alta: Buraco grande, profundo, perigo CLARO e/ou frequente (risco de acidente mais s√©rio, dano significativo a ve√≠culo, perigo para motos/bikes/pedestres), em via movimentada ou √°rea de risco (escola, hospital). Requer aten√ß√£o R√ÅPIDA, possivelmente em poucos dias.
    - Urg√™ncia Imediata/Cr√≠tica: Buraco ENORME/muito profundo que causa acidentes CONSTANTES ou representa risco GRAVE e iminente a ve√≠culos ou pessoas (ex: cratera na pista principal), afeta severamente a fluidez ou acessibilidade. Requer interven√ß√£o de EMERG√äNCIA (horas/poucas horas).

    Informa√ß√µes Relevantes da Den√∫ncia:
    Localiza√ß√£o B√°sica do Buraco: Rua {buraco.get('endereco', {}).get('rua', 'N√£o informada')}, N√∫mero Pr√≥ximo/Refer√™ncia: {buraco.get('numero_proximo', 'N√£o informado')}. Cidade: {buraco.get('endereco', {}).get('cidade_buraco', 'N√£o informada')}. {loc_contexto}
    {structured_urgency_text}
    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"
    Insights da An√°lise Detalhada de IA: {insights_text}
    Insights da An√°lise de Imagem (se dispon√≠vel): {image_analysis_text}

    Com base nestes dados consolidados, qual categoria de urg√™ncia voc√™ sugere? Forne√ßa APENAS a categoria (ex: "Urg√™ncia Alta") e uma breve JUSTIFICATIVA (m√°ximo 3 frases) explicando POR QUE essa categoria foi sugerida, citando os elementos mais relevantes (tamanho, perigo, contexto, etc.) dos inputs ou an√°lises.

    Formato de sa√≠da (muito importante seguir este formato):
    Categoria Sugerida: [Categoria Escolhida]
    Justificativa: [Justificativa Breve]
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"urgencia_ia": f"‚ùå Sugest√£o de urg√™ncia bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"urgencia_ia": response.text.strip()}
    except Exception as e:
        return {"urgencia_ia": f"‚ùå Erro ao sugerir urg√™ncia com IA: {e}"}


@st.cache_data(show_spinner="üß† IA est√° pensando... Qual pode ser a causa e a melhor a√ß√£o para este buraco?")
def sugerir_causa_e_acao_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para sugerir poss√≠veis causas do buraco e a√ß√µes de reparo com base nos dados e insights."""
    if not _model:
        return {"sugestao_acao_ia": "ü§ñ Sugest√µes de causa/a√ß√£o via IA indispon√≠veis (Motor Gemini Texto offline)."}

    # Acessa todos os dados relevantes
    buraco = _dados_denuncia_completa.get('buraco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')
    image_analysis_text = _dados_denuncia_completa.get('image_analysis_ia', {}).get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel.')
    insights_text = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise detalhada n√£o dispon√≠vel.')

    structured_action_factors = []
    if structured_details.get('tamanho'): structured_action_factors.append(f"Tamanho Estimado: {structured_details['tamanho']}")
    if structured_details.get('profundidade'): structured_action_factors.append(f"Profundidade Estimada: {structured_details['profundidade']}")
    if structured_details.get('presenca_agua'): structured_action_factors.append(f"Presen√ßa de √Ågua: {structured_details['presenca_agua']}")
    if structured_details.get('contexto'): structured_action_factors.append(f"Contexto/Hist√≥rico: {structured_details['contexto']}")
    structured_action_text = "Detalhes Estruturados: " + ("; ".join(structured_action_factors) if structured_action_factors else "Nenhum informado.")


    prompt = f"""
    Com base nas informa√ß√µes completas da den√∫ncia (dados estruturados, observa√ß√µes, an√°lise de imagem e insights), tente sugerir:
    1. Uma ou duas P√ìSSIVEIS CAUSAS para a forma√ß√£o deste buraco espec√≠fico. Baseie-se em pistas nos inputs (ex: se √© recorrente, se choveu muito - se mencionado nas observa√ß√µes/insights/imagem -, desgaste vis√≠vel na imagem, etc.). Seja especulativo, mas baseado nos dados.
    2. Sugest√µes de TIPOS DE A√á√ÉO ou REPARO mais adequados ou necess√°rios para resolver este problema. Baseie-se na severidade, profundidade, perigos e contexto. (ex: simples tapa-buraco, recapeamento da se√ß√£o, inspe√ß√£o de drenagem, sinaliza√ß√£o de emerg√™ncia, interdi√ß√£o parcial da via).

    Baseie suas sugest√µes nos dados fornecidos. Se a informa√ß√£o for insuficiente, indique "N√£o especificado/inferido nos dados".

    Informa√ß√µes Relevantes da Den√∫ncia:
    {structured_action_text}
    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"
    Insights da An√°lise Detalhada de IA: {insights_text}
    Insights da An√°lise de Imagem (se dispon√≠vel): {image_analysis_text}


    Formato de sa√≠da:
    Poss√≠veis Causas Sugeridas: [Lista de causas sugeridas baseadas nos dados ou 'N√£o especificado/inferido']
    Sugest√µes de A√ß√£o/Reparo Sugeridas: [Lista de a√ß√µes sugeridas baseadas nos dados ou 'N√£o especificado/inferido']
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"sugestao_acao_ia": f"‚ùå Sugest√£o de causa/a√ß√£o bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"sugestao_acao_ia": response.text.strip()}
    except Exception as e:
        return {"sugestao_acao_ia": f"‚ùå Erro ao sugerir causa/a√ß√£o com IA: {e}"}


@st.cache_data(show_spinner="üß† Compilando o Relat√≥rio Final Rob√≥tico e Inteligente com IA Gemini...")
def gerar_resumo_completo_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para gerar um resumo narrativo inteligente da den√∫ncia completa."""
    if not _model:
        return {"resumo_ia": "ü§ñ Resumo inteligente via IA indispon√≠vel (Motor Gemini Texto offline)."}

    # Acessa todos os dados coletados e resultados das IAs
    denunciante = _dados_denuncia_completa.get('denunciante', {})
    buraco = _dados_denuncia_completa.get('buraco', {})
    endereco = buraco.get('endereco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')
    localizacao_exata = _dados_denuncia_completa.get('localizacao_exata_processada', {})

    insights_ia = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise detalhada n√£o dispon√≠vel ou com erro.')
    urgencia_ia_text = _dados_denuncia_completa.get('urgencia_ia', {}).get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o dispon√≠vel ou com erro.')
    sugestao_acao_ia_text = _dados_denuncia_completa.get('sugestao_acao_ia', {}).get('sugestao_acao_ia', 'Sugest√µes de causa/a√ß√£o n√£o dispon√≠veis ou com erro.')
    image_analysis_text = _dados_denuncia_completa.get('image_analysis_ia', {}).get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel.')


    # Formatar a string de localiza√ß√£o para o resumo
    loc_info_resumo = "Localiza√ß√£o exata n√£o especificada ou processada."
    tipo_loc_processada = localizacao_exata.get('tipo', 'N√£o informada')

    if tipo_loc_processada in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
         lat = localizacao_exata.get('latitude')
         lon = localizacao_exata.get('longitude')
         link_gerado = localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')
         loc_info_resumo = f"Localiza√ß√£o: Coordenadas {lat}, {lon} (Obtida via: {tipo_loc_processada.replace(' (API)', ' API').replace('Manual', 'Manual').replace('Fornecidas/Extra√≠das', 'Manual')}). Link Google Maps: {link_gerado}."
         # N√£o inclui input original aqui para manter o resumo mais limpo, j√° que est√° no relat√≥rio completo

    elif tipo_loc_processada == 'Descri√ß√£o Manual Detalhada':
         loc_info_resumo = f"Localiza√ß√£o via descri√ß√£o manual detalhada: '{localizacao_exata.get('descricao_manual', 'N√£o informada')}'."

    elif localizacao_exata.get('input_original') and tipo_loc_processada == 'N√£o informada':
         loc_info_resumo = f"Localiza√ß√£o informada (tipo n√£o detectado): '{localizacao_exata.get('input_original')}'."

    # N√£o inclui motivo da falha da geocodifica√ß√£o no resumo para concis√£o, mas est√° no relat√≥rio completo.

    # Formatar os detalhes estruturados para inclus√£o no resumo
    structured_summary_items = []
    if structured_details.get('tamanho'): structured_summary_items.append(f"Tamanho: {structured_details['tamanho']}")
    if structured_details.get('profundidade'): structured_summary_items.append(f"Profundidade: {structured_details['profundidade']}")
    if structured_details.get('perigo'): structured_summary_items.append(f"Perigo: {structured_details['perigo']}")
    if structured_details.get('presenca_agua'): structured_summary_items.append(f"√Ågua: {structured_details['presenca_agua']}")
    if structured_details.get('perigos_detalhados'): structured_summary_items.append(f"Perigos Espec√≠ficos: {', '.join(structured_details['perigos_detalhados'])}")
    if structured_details.get('contexto'): structured_summary_items.append(f"Contexto: {structured_details['contexto']}")
    if structured_details.get('identificadores_visuais'): structured_summary_items.append(f"Identificadores Visuais: {structured_details['identificadores_visuais']}")

    structured_summary_text = " / ".join(structured_summary_items) if structured_summary_items else "Detalhes estruturados n√£o fornecidos."


    prompt = f"""
    Gere um resumo narrativo conciso (m√°ximo 8-10 frases) para a seguinte den√∫ncia de buraco no aplicativo Krateras.
    Este resumo deve ser formal, objetivo e √∫til para equipes de manuten√ß√£o ou gest√£o p√∫blica.
    Combine os dados do denunciante, detalhes estruturados do buraco, observa√ß√µes adicionais, localiza√ß√£o exata processada e os resultados de TODAS as an√°lises de IA (an√°lise de imagem, an√°lise detalhada, urg√™ncia, causa/a√ß√£o).

    Inclua:
    - Denunciante (Nome, Cidade de Resid√™ncia).
    - Localiza√ß√£o base (Rua, N¬∫ Pr√≥ximo/Refer√™ncia, Cidade do Buraco, Estado do Buraco).
    - Localiza√ß√£o EXATA processada (mencione como foi obtida e os dados relevantes).
    - Resumo dos DETALHES ESTRUTURADOS e Observa√ß√µes Adicionais.
    - Principais pontos da AN√ÅLISE DE IMAGEM (se dispon√≠vel).
    - Principais pontos da AN√ÅLISE DETALHADA.
    - A SUGEST√ÉO de Categoria de Urg√™ncia pela IA e sua Justificativa.
    - As SUGEST√ïES de POSS√çVEIS CAUSAS e TIPOS DE A√á√ÉO/REPARO sugeridas pela IA (se dispon√≠veis).

    Dados da Den√∫ncia Completa:
    Denunciante: {denunciante.get('nome', 'N√£o informado')}, de {denunciante.get('cidade_residencia', 'N√£o informada')}.
    Endere√ßo do Buraco (Base): Rua {endereco.get('rua', 'N√£o informada')}, N¬∫ Pr√≥ximo: {buraco.get('numero_proximo', 'N√£o informado')}. Cidade: {endereco.get('cidade_buraco', 'N√£o informada')}, Estado: {endereco.get('estado_buraco', 'N√£o informado')}. CEP: {buraco.get('cep_informado', 'N√£o informado') if buraco.get('cep_informado') else 'N√£o informado'}.
    Lado da Rua: {buraco.get('lado_rua', 'N√£o informado')}.
    Localiza√ß√£o Exata Coletada: {loc_info_resumo}
    Detalhes Estruturados do Buraco: {structured_summary_text}
    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"

    Insights da An√°lise de Imagem (se dispon√≠vel): {image_analysis_text}
    Insights da An√°lise Detalhada (IA Texto): {insights_ia}
    Sugest√£o de Urg√™ncia (IA Texto): {urgencia_ia_text}
    Sugest√µes de Causa e A√ß√£o (IA Texto): {sugestao_acao_ia_text}


    Gere o resumo em portugu√™s. Comece com "Relat√≥rio Krateras: Den√∫ncia de buraco..." ou algo similar. Use linguagem clara, formal e direta, focando nas informa√ß√µes mais relevantes para a a√ß√£o de reparo.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"resumo_ia": f"‚ùå Gera√ß√£o de resumo bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"resumo_ia": response.text.strip()}
    except Exception as e:
        return {"resumo_ia": f"‚ùå Erro ao gerar resumo completo com IA: {e}"}


# --- Fun√ß√µes de Navega√ß√£o e Renderiza√ß√£o de UI ---

def next_step():
    """Avan√ßa para o pr√≥ximo passo no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep',
        'collect_buraco_address_manual',
        'collect_buraco_details', # Esta etapa coleta o resto dos dados, foto e localiza√ß√£o manual se geocoding falhar
        'processing_ia', # Nova etapa unificada para todas as an√°lises IA (imagem + texto)
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index < len(steps) - 1:
            st.session_state.step = steps[current_index + 1]
            st.rerun()
    except ValueError:
        st.session_state.step = steps[0]
        st.rerun()

def prev_step():
    """Volta para o passo anterior no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep',
        'collect_buraco_address_manual',
        'collect_buraco_details',
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index > 0:
             # L√≥gica para pular passos de CEP/Manual se n√£o foram usados ao voltar de 'collect_buraco_details'
             if st.session_state.step == 'collect_buraco_details':
                  if st.session_state.get('endereco_coletado_via') == 'cep':
                      st.session_state.step = 'collect_buraco_address_cep'
                  elif st.session_state.get('endereco_coletado_via') == 'manual':
                      st.session_state.step = 'collect_buraco_address_manual'
                  else: # Fallback seguro
                       st.session_state.step = steps[current_index - 1]
             elif st.session_state.step in ['collect_buraco_address_cep', 'collect_buraco_address_manual']:
                  st.session_state.step = 'collect_buraco_address_method'
             else:
                  st.session_state.step = steps[current_index - 1]

             st.rerun()
    except ValueError:
         st.session_state.step = steps[0]
         st.rerun()

# --- Layout Principal da Aplica√ß√£o ---

st.title("Krateras üöÄ‚ú®üîí")
st.subheader("O Especialista Rob√≥tico de Den√∫ncia de Buracos")

# --- Fluxo da Aplica√ß√£o baseado no Estado ---

if st.session_state.step == 'start':
    st.write("""
    Ol√°! Krateras v3.2 entrando em √≥rbita! Sua miss√£o, caso aceite: denunciar buracos na rua
    para que possam ser consertados. A seguran√ßa dos seus dados e a precis√£o da den√∫ncia
    s√£o nossas prioridades m√°ximas.

    Utilizamos intelig√™ncia artificial avan√ßada (Google Gemini Pro para texto e Gemini Vision
    para an√°lise de imagem) e APIs de localiza√ß√£o (Google Geocoding, ViaCEP) para coletar,
    analisar e gerar um relat√≥rio detalhado e acion√°vel para as autoridades competentes.

    Fui criado com o que h√° de mais avan√ßado em Programa√ß√£o, IA, Design Inteligente,
    Matem√°tica e L√≥gica Inabal√°vel. Com acesso seguro √†s APIs, sou impar√°vel.

    Clique em Iniciar para come√ßarmos a coleta de dados.
    """)

    st.info("‚ö†Ô∏è Suas chaves de API do Google (Gemini e Geocoding/Embed) devem ser configuradas nos Streamlit Secrets (`.streamlit/secrets.toml`) para que as funcionalidades de IA e a geocodifica√ß√£o/visualiza√ß√£o autom√°tica no mapa funcionem corretamente e de forma segura. Consulte o `README.md` ou as instru√ß√µes ao lado para mais detalhes.")


    if st.button("Iniciar Miss√£o Den√∫ncia!"):
        # Carregar chaves e inicializar APIs antes de coletar dados
        gemini_api_key, geocoding_api_key = load_api_keys()
        st.session_state.geocoding_api_key = geocoding_api_key # Armazena a chave de geocoding no estado
        st.session_state.gemini_pro_model, st.session_state.gemini_vision_model = init_gemini_models(gemini_api_key) # Inicializa os modelos Gemini (cacheados)
        st.session_state.api_keys_loaded = True # Marca que tentamos carregar as chaves
        next_step()

elif st.session_state.step == 'collect_denunciante':
    st.header("--- üë§ Dados do Her√≥i/Hero√≠na da Vez! ---")
    st.write("Sua contribui√ß√£o √© super valiosa! üí™")

    # Formul√°rio para coletar dados do denunciante
    with st.form("form_denunciante"):
        nome = st.text_input("Seu nome completo:", key='nome_denunciante_input') # Added _input to avoid state key collision
        idade = st.number_input("Sua idade (aproximada, se preferir, sem press√£o üòâ):", min_value=1, max_value=120, value=30, key='idade_denunciante_input')
        cidade_residencia = st.text_input("Em qual cidade voc√™ reside?:", key='cidade_residencia_denunciante_input')

        submitted = st.form_submit_button("Avan√ßar (Dados Denunciante)")

        if submitted:
            if not nome or not cidade_residencia:
                st.error("‚ùó Nome e Cidade de resid√™ncia s√£o campos obrigat√≥rios. Por favor, preencha-os.")
            else:
                st.session_state.denuncia_completa['denunciante'] = {
                    "nome": nome.strip(),
                    "idade": idade,
                    "cidade_residencia": cidade_residencia.strip()
                }
                st.success(f"Ol√°, {nome}! Dados coletados. Preparando para dados do buraco...")
                next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_method':
    st.header("--- üöß Detalhes do Buraco (Nosso Alvo!) ---")
    st.subheader("Como identificar a rua do buraco?")

    opcao_localizacao = st.radio(
        "Escolha o m√©todo:",
        ('Digitar nome manualmente', 'Buscar por CEP'),
        key='endereco_method_radio'
    )

    # Use um bot√£o para confirmar a escolha e mover para o pr√≥ximo sub-step
    if st.button("Selecionar M√©todo"):
         if opcao_localizacao == 'Digitar nome manualmente':
              st.session_state.endereco_coletado_via = 'manual' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_manual'
         elif opcao_localizacao == 'Buscar por CEP':
              st.session_state.endereco_coletado_via = 'cep' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_cep'
         st.rerun()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_cep':
    st.header("--- üöß Detalhes do Buraco (Busca por CEP) ---")
    st.write("Digite o CEP do local do buraco.")

    with st.form("form_cep"):
        # Use um placeholder se veio do manual com CEP, ou vazio se for a primeira vez no CEP
        initial_cep = st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado', '')
        cep_input = st.text_input("Digite o CEP (apenas n√∫meros):", value=initial_cep, max_chars=8, key='cep_buraco_input')
        buscar_button = st.form_submit_button("Buscar CEP")

        if buscar_button:
            if not cep_input:
                st.error("‚ùó Por favor, digite um CEP.")
            else:
                dados_cep = buscar_cep(cep_input.strip())

                if 'erro' in dados_cep:
                    st.error(f"‚ùå Falha na busca por CEP: {dados_cep['erro']}")
                    st.session_state.cep_search_error = True # Marca que houve erro no CEP
                    st.session_state.dados_cep_validos = None # Limpa dados v√°lidos
                else:
                    st.session_state.dados_cep_validos = dados_cep # Armazena dados do CEP v√°lidos
                    st.session_state.cep_search_error = False # Limpa erro
                    st.success("‚úÖ Endere√ßo Encontrado (ViaCEP):")
                    st.write(f"**Rua:** {dados_cep.get('logradouro', 'N√£o informado')}")
                    st.write(f"**Bairro:** {dados_cep.get('bairro', 'N√£o informado')}")
                    st.write(f"**Cidade:** {dados_cep.get('localidade', 'N√£o informado')}")
                    st.write(f"**Estado:** {dados_cep.get('uf', 'N√£o informado')}")
                    st.write(f"**CEP:** {cep_input.strip()}")
                    st.info("Por favor, confirme se estes dados parecem corretos. Se n√£o, use o bot√£o 'Corrigir Endere√ßo Manualmente'.")
                    # Salva os dados b√°sicos do CEP no buraco_data, mas ainda pode ser corrigido
                    st.session_state.denuncia_completa['buraco'] = {
                         'endereco': {
                             'rua': dados_cep.get('logradouro', ''),
                             'bairro': dados_cep.get('bairro', ''),
                             'cidade_buraco': dados_cep.get('localidade', ''),
                             'estado_buraco': dados_cep.get('uf', '')
                         },
                         'cep_informado': cep_input.strip()
                    }
                    # For√ßar reload para exibir os bot√µes de a√ß√£o ap√≥s a busca bem-sucedida
                    st.rerun()


    # Exibe bot√µes de a√ß√£o APENAS se tentou buscar CEP
    # Verifica se o formul√°rio de busca foi processado e h√° um resultado (v√°lido ou com erro)
    if 'cep_buraco_input' in st.session_state:
        if st.session_state.get('dados_cep_validos'): # Se dados do CEP foram encontrados e s√£o v√°lidos
            st.button("Confirmar Endere√ßo e Avan√ßar", on_click=next_step)
            if st.button("Corrigir Endere√ßo Manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.rerun()

        elif st.session_state.get('cep_search_error'): # Se houve erro na busca por CEP
            st.warning("N√£o foi poss√≠vel obter o endere√ßo por CEP.")
            # Removido "Tentar novamente por CEP" pois basta digitar outro CEP no input e clicar buscar novamente
            if st.button("Digitar endere√ßo manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.rerun()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_manual':
    st.header("--- üöß Detalhes do Buraco (Entrada Manual) ---")
    st.write("Digite os dados do endere√ßo do buraco manualmente.")

    # Use os dados do CEP pr√©-preenchidos se veio dessa rota, ou use o que j√° foi digitado manualmente
    endereco_inicial = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})

    with st.form("form_manual_address"):
        rua_manual = st.text_input("Nome completo da rua:", value=endereco_inicial.get('rua', ''), key='rua_manual_buraco_input')
        bairro_manual = st.text_input("Bairro onde est√° o buraco (opcional):", value=endereco_inicial.get('bairro', ''), key='bairro_manual_buraco_input')
        cidade_manual = st.text_input("Cidade onde est√° o buraco:", value=endereco_inicial.get('cidade_buraco', ''), key='cidade_manual_buraco_input')
        estado_manual = st.text_input("Estado (UF) onde est√° o buraco:", value=endereco_inicial.get('estado_buraco', ''), max_chars=2, key='estado_manual_buraco_input')

        submitted = st.form_submit_button("Avan√ßar (Endere√ßo Manual)")

        if submitted:
            if not rua_manual or not cidade_manual or not estado_manual:
                st.error("‚ùó Rua, Cidade e Estado s√£o campos obrigat√≥rios para o endere√ßo do buraco.")
            else:
                # Salva o endere√ßo manual no dicion√°rio buraco
                st.session_state.denuncia_completa['buraco'] = {
                    'endereco': {
                        'rua': rua_manual.strip(),
                        'bairro': bairro_manual.strip(),
                        'cidade_buraco': cidade_manual.strip(),
                        'estado_buraco': estado_manual.strip().upper()
                    },
                    # Mant√©m o CEP se ele foi informado na etapa anterior, mesmo usando entrada manual agora
                    'cep_informado': st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado', '')
                }
                next_step() # Move para a pr√≥xima etapa (coleta de detalhes + foto + localiza√ß√£o exata)

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_details':
    st.header("--- üöß Detalhes Finais do Buraco ---")
    st.subheader("Informa√ß√µes cruciais para a localiza√ß√£o, an√°lise e reparo!")

    # Exibe o endere√ßo b√°sico j√° coletado para refer√™ncia
    endereco_basico = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})
    st.write(f"**Endere√ßo Base:** Rua {endereco_basico.get('rua', 'N√£o informada')}, {endereco_basico.get('cidade_buraco', 'N√£o informada')} - {endereco_basico.get('estado_buraco', 'N√£o informado')}")
    if endereco_basico.get('bairro'):
         st.write(f"**Bairro:** {endereco_basico.get('bairro')}")
    if st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado'):
         st.write(f"**CEP informado:** {st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado')}")

    st.markdown("---")

    with st.form("form_buraco_details_structured"):
        st.subheader("Detalhes Estruturados do Buraco")

        col1, col2 = st.columns(2)

        with col1:
            tamanho = st.radio(
                "**Tamanho Estimado:**",
                ['N√£o Informado', 'Pequeno', 'M√©dio', 'Grande', 'Enorme', 'Cr√≠tico (Cratera)'],
                key='tamanho_buraco'
            )
            profundidade = st.radio(
                "**Profundidade Estimada:**",
                ['N√£o Informado', 'Raso', 'M√©dio', 'Fundo', 'Muito Fundo'],
                key='profundidade_buraco'
            )
            presenca_agua = st.radio(
                 "**Presen√ßa de √Ågua/Alagamento:**",
                 ['N√£o Informado', 'Sim', 'N√£o'],
                 key='agua_buraco'
            )

        with col2:
             perigo = st.radio(
                 "**N√≠vel de Perigo Aparente:**",
                 ['N√£o Informado', 'Baixo (Principalmente est√©tico)', 'M√©dio (Pode causar dano menor)', 'Alto (Risco de acidente s√©rio ou dano significativo)', 'Alt√≠ssimo (Risco grave e iminente, acidentes frequentes)'],
                 key='perigo_buraco'
             )
             contexto = st.selectbox(
                 "**Contexto ou Hist√≥rico do Local:**",
                 ['N√£o Informado', 'Via de Alto Tr√°fego', 'Via de Baixo Tr√°fego', 'Perto de Escola/Hospital', 'Em Curva', 'Na Esquina', 'Em Subida/Descida', 'Pouca Ilumina√ß√£o', 'Problema Recorrente', 'Obra Recente na Regi√£o'],
                 key='contexto_buraco'
             )
             perigos_detalhados = st.multiselect(
                 "**Perigos e Impactos Detalhados (Selecione todos que se aplicam):**",
                 ['Risco para Carros (Pneu/Suspens√£o/Roda)', 'Risco para Motos/Bikes', 'Risco para Pedestres', 'Dificulta Desvio', 'Perigoso √† Noite', 'Perigoso na Chuva', 'Causa Lentid√£o no Tr√¢nsito', 'J√° Causou Acidentes (Se souber)'],
                 key='perigos_detalhados_buraco'
             )


        identificadores_visuais = st.text_input(
             "**Identificadores Visuais Adicionais Pr√≥ximos (Ex: Em frente ao poste X, perto da √°rvore Y):**",
             key='identificadores_visuais_buraco'
        )

        st.markdown("---")
        st.subheader("Observa√ß√µes Adicionais (Texto Livre)")
        observacoes_adicionais = st.text_area(
            "Qualquer outra informa√ß√£o relevante sobre o buraco ou o local (Hist√≥rico, chuva recente, etc.):",
            key='observacoes_adicionais_buraco'
        )

        st.markdown("---")
        st.subheader("Adicionar Foto do Buraco")
        st.write("Anexe uma foto n√≠tida do buraco (JPG, PNG). A IA Gemini Vision pode analisar a imagem para complementar a den√∫ncia!")
        uploaded_image = st.file_uploader("Escolha uma imagem...", type=["jpg", "jpeg", "png"], key='uploader_buraco_image')

        if uploaded_image is not None:
             st.session_state.uploaded_image = uploaded_image.getvalue() # Armazena os bytes da imagem no estado
             try:
                 img = Image.open(uploaded_image)
                 st.image(img, caption="Foto do buraco carregada.", use_column_width=True)
             except Exception as e:
                  st.error(f"‚ùå Erro ao carregar a imagem: {e}")
                  st.session_state.uploaded_image = None # Limpa se der erro ao abrir


        st.markdown("---")
        st.subheader("üìç Localiza√ß√£o Exata (Coordenadas ou Descri√ß√£o)")

        # --- Tentar Geocodifica√ß√£o Autom√°tica ao submeter ---
        # A geocodifica√ß√£o agora acontece AP√ìS submeter este formul√°rio
        # O input para localiza√ß√£o manual s√≥ aparece se a geocodifica√ß√£o falhar ou n√£o for tentada.

        submitted_details = st.form_submit_button("Finalizar Coleta e Analisar Den√∫ncia!")

        if submitted_details:
            # Armazena os detalhes estruturados e observa√ß√µes no dicion√°rio buraco
            st.session_state.denuncia_completa['buraco'].update({
                'structured_details': {
                     'tamanho': tamanho,
                     'perigo': perigo,
                     'profundidade': profundidade,
                     'presenca_agua': presenca_agua,
                     'contexto': contexto,
                     'perigos_detalhados': perigos_detalhados,
                     'identificadores_visuais': identificadores_visuais.strip(),
                },
                'observacoes_adicionais': observacoes_adicionais.strip(),
                # A imagem j√° est√° no st.session_state.uploaded_image
            })

            st.subheader("Processando Localiza√ß√£o Exata...")

            st.session_state.denuncia_completa['localizacao_exata_processada'] = {"tipo": "N√£o informada"} # Reseta localiza√ß√£o processada
            tentou_geocodificar = False
            geocodificacao_sucesso = False
            motivo_falha_geo = ""

            rua_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('rua')
            cidade_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('cidade_buraco')
            estado_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('estado_buraco')
            numero_proximo_geo = st.session_state.denuncia_completa['buraco'].get('numero_proximo') # Usa o numero_proximo para geocoding

            tem_dados_para_geo = (st.session_state.geocoding_api_key and rua_buraco and numero_proximo_geo and cidade_buraco and estado_buraco)

            if tem_dados_para_geo:
                st.info("‚úÖ Chave de Geocodifica√ß√£o e dados b√°sicos de endere√ßo completos encontrados. Tentando gerar o link do Google Maps automaticamente...")
                tentou_geocodificar = True
                # Chamar a fun√ß√£o de geocodifica√ß√£o (N√ÉO cacheada)
                geo_resultado = geocodificar_endereco(
                    rua_buraco,
                    numero_proximo_geo.strip(), # Usa o n√∫mero/refer√™ncia como base para geocodifica√ß√£o
                    cidade_buraco,
                    estado_buraco,
                    st.session_state.geocoding_api_key
                )

                if 'erro' not in geo_resultado:
                    geocodificacao_sucesso = True
                    st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                        "tipo": "Geocodificada (API)",
                        "latitude": geo_resultado['latitude'],
                        "longitude": geo_resultado['longitude'],
                        "endereco_formatado_api": geo_resultado.get('endereco_formatado_api', ''),
                        "google_maps_link_gerado": geo_resultado['google_maps_link_gerado'],
                        "google_embed_link_gerado": geo_resultado.get('google_embed_link_gerado') # Pode ser None se chave faltar/API desabilitada
                    }
                    st.success("‚úÖ Localiza√ß√£o Obtida (via Geocodifica√ß√£o Autom√°tica)!")
                else: # Erro na geocodifica√ß√£o
                    st.warning(f"‚ùå Falha na Geocodifica√ß√£o autom√°tica: {geo_resultado['erro']}")
                    motivo_falha_geo = f"Erro da API de Geocodifica√ß√£o: {geo_resultado.get('erro', 'Motivo desconhecido')}"
            elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                st.warning("‚ö†Ô∏è AVISO: Chave de Geocodifica√ß√£o fornecida, mas dados de endere√ßo insuficientes (precisa de Rua, N√∫mero Pr√≥ximo, Cidade, Estado). Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                motivo_falha_geo = "Dados insuficientes para Geocodifica√ß√£o (requer Rua, N√∫mero Pr√≥ximo, Cidade, Estado)."
            elif not st.session_state.geocoding_api_key:
                st.warning("‚ö†Ô∏è AVISO: Chave de API de Geocodifica√ß√£o N√ÉO fornecida. Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                motivo_falha_geo = "Chave de API de Geocodifica√ß√£o n√£o fornecida."


            # --- Coleta/Processamento de Localiza√ß√£o Manual (se a geocodifica√ß√£o falhou ou n√£o foi tentada) ---
            # Este input aparece SOMENTE AP√ìS a submiss√£o do formul√°rio principal,
            # E SOMENTE SE a geocodifica√ß√£o autom√°tica n√£o foi bem-sucedida.
            # Usamos um novo formul√°rio ou tratamos no fluxo. Vamos tratar no fluxo ap√≥s o form submetido.

            if not geocodificacao_sucesso:
                 st.subheader("--- ‚úçÔ∏è Fornecer Localiza√ß√£o Exata Manualmente (Alternativa ou Corre√ß√£o) ---")
                 if motivo_falha_geo:
                      st.info(f"(Motivo para entrada manual: {motivo_falha_geo})")

                 st.write("‚û°Ô∏è Por favor, forne√ßa a localiza√ß√£o EXATA do buraco de forma manual:")
                 st.markdown("""
                 <p>A MELHOR forma √© COPIAR AS COORDENADAS (Lat,Long) ou um LINK do Google Maps que as contenha.<br>
                 Sugest√£o: Abra o Google Maps, encontre o buraco, <strong>TOQUE/CLIQUE E SEGURE NO LOCAL PREOCUPANTE</strong>.
                 As coordenadas ou um link aparecer√£o.</p>
                 <p>Alternativamente, uma DESCRI√á√ÉO MUITO DETALHADA do local EXATO no mapa.</p>
                 """, unsafe_allow_html=True)

                 # Este input √© exibido e processado imediatamente ap√≥s a falha da geocodifica√ß√£o
                 localizacao_manual_input = st.text_input("Insira COORDENADAS (Lat,Long), LINK do Maps com Coordenadas, OU DESCRI√á√ÉO DETALHADA:", key='localizacao_manual_input')

                 # Tentar extrair coordenadas do input manual
                 lat: Optional[float] = None
                 lon: Optional[float] = None
                 tipo_manual_processado = "Descri√ß√£o Manual Detalhada"
                 input_original_manual = localizacao_manual_input.strip()

                 if input_original_manual:
                     match_coords = re.search(r'(-?\d+\.?\d*)[,\s/]+(-?\d+\.?\d*)', input_original_manual)
                     if match_coords:
                         try:
                             teste_lat = float(match_coords.group(1))
                             teste_lon = float(match_coords.group(2))
                             if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                 lat = teste_lat
                                 lon = teste_lon
                                 tipo_manual_processado = "Coordenadas Fornecidas/Extra√≠das Manualmente"
                                 st.info("‚úÖ Coordenadas v√°lidas detectadas no input manual! Navega√ß√£o calibrada.")
                             else:
                                 st.warning("‚ö†Ô∏è Parece um formato de coordenadas, mas fora da faixa esperada. Tratando como descri√ß√£o.")
                         except ValueError:
                             st.info("‚ÑπÔ∏è Entrada manual n√£o parece ser coordenadas v√°lidas. Tratando como descri√ß√£o detalhada.")
                     elif input_original_manual.startswith("http"):
                          st.info("‚ÑπÔ∏è Entrada manual √© um link. Tentando extrair coordenadas (sujeito a formato do link)...")
                          match_maps_link = re.search(r'/@(-?\d+\.?\d*),(-?\d+\.?\d*)', input_original_manual)
                          if match_maps_link:
                              try:
                                  teste_lat = float(match_maps_link.group(1))
                                  teste_lon = float(match_maps_link.group(2))
                                  if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                       lat = teste_lat
                                       lon = teste_lon
                                       tipo_manual_processado = "Coordenadas Extra√≠das de Link (Manual)"
                                       st.info("‚úÖ Coordenadas extra√≠das de link do Maps no input manual!")
                                  else:
                                       st.warning("‚ö†Ô∏è Coordenadas extra√≠das do link no input manual fora da faixa esperada. Tratando como descri√ß√£o.")
                              except ValueError:
                                 st.info("‚ÑπÔ∏è Valores no link n√£o parecem coordenadas v√°lidas. Tratando como descri√ß√£o.")
                              except Exception as e:
                                   st.info(f"‚ÑπÔ∏è Ocorreu um erro ao tentar processar o link no input manual: {e}. Tratando como descri√ß√£o.")
                          else:
                               st.info("‚ÑπÔ∏è N√£o foi poss√≠vel extrair coordenadas reconhec√≠veis do link fornecido manualmente.")
                     else:
                          st.info("‚ÑπÔ∏è Entrada manual n√£o detectada como coordenadas ou link. Tratando como descri√ß√£o detalhada.")


                 # Armazenar o resultado do input manual no dicion√°rio de localiza√ß√£o processada
                 if lat is not None and lon is not None:
                     st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                          "tipo": tipo_manual_processado,
                          "input_original": input_original_manual,
                          "latitude": lat,
                          "longitude": lon,
                          "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat},{lon}",
                          # Tenta gerar link embed APENAS se tiver a chave Geocoding (necess√°ria para o Embed API)
                          "google_embed_link_gerado": f"https://www.google.com/maps/embed/v1/place?key={st.session_state.geocoding_api_key}&q={lat},{lon}" if st.session_state.geocoding_api_key else None
                     }
                     if st.session_state.geocoding_api_key and st.session_state.denuncia_completa['localizacao_exata_processada'].get('google_embed_link_gerado') is None:
                          # Adiciona um aviso espec√≠fico se tinha chave mas n√£o gerou embed link
                          st.warning("‚ö†Ô∏è N√£o foi poss√≠vel gerar o link Google Maps Embed com a chave fornecida. Verifique se a 'Maps Embed API' est√° habilitada e autorizada para sua chave no Google Cloud.")

                 elif input_original_manual: # Se h√° input manual, mas n√£o extraiu Lat/Long
                     st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                          "tipo": "Descri√ß√£o Manual Detalhada",
                          "input_original": input_original_manual,
                          "descricao_manual": input_original_manual
                     }
                     st.warning("‚ö†Ô∏è Nenhuma localiza√ß√£o exata estruturada (coordenadas ou link) foi fornecida ou detectada no input manual. O relat√≥rio depender√° apenas da descri√ß√£o textual e endere√ßo base.")

                 else: # Input manual estava vazio, localizacao_exata_processada continua como "N√£o informada"
                      st.warning("‚ö†Ô∏è Nenhuma localiza√ß√£o exata estruturada (coordenadas, link) foi fornecida, detectada automaticamente (Geocoding) ou inserida manualmente. O relat√≥rio depender√° apenas dos detalhes estruturados, observa√ß√µes e endere√ßo base.")


                 # Se houve uma tentativa de geocodifica√ß√£o autom√°tica que falhou, registra o motivo
                 if tentou_geocodificar and not geocodificacao_sucesso:
                      st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = motivo_falha_geo
                 elif not st.session_state.geocoding_api_key:
                      st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Chave de API de Geocodifica√ß√£o n√£o fornecida."
                 elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                      st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Dados insuficientes para Geocodifica√ß√£o (requer Rua, N√∫mero Pr√≥ximo, Cidade, Estado)."


                 # Ap√≥s processar o input manual (se necess√°rio), avan√ßamos para o passo de processamento IA
                 next_step()

            else: # Se a geocodifica√ß√£o autom√°tica foi bem-sucedida, apenas avan√ßamos para o passo de processamento IA
                next_step()


    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'processing_ia':
    st.header("--- üß† Processamento Rob√≥tico de IA ---")
    st.write("Por favor, aguarde enquanto o Krateras analisa todos os dados (texto, imagem) e gera o relat√≥rio com a intelig√™ncia do Google Gemini.")

    # Verifica se o modelo Gemini (texto ou vis√£o) est√° dispon√≠vel antes de processar
    gemini_available = st.session_state.gemini_pro_model or st.session_state.gemini_vision_model

    # Inicializa resultados IA com valores padr√£o
    st.session_state.denuncia_completa['image_analysis_ia'] = {"image_analysis": "An√°lise de imagem via IA indispon√≠vel."}
    st.session_state.denuncia_completa['insights_ia'] = {"insights": "An√°lise detalhada via IA indispon√≠vel."}
    st.session_state.denuncia_completa['urgencia_ia'] = {"urgencia_ia": "Sugest√£o de urg√™ncia via IA indispon√≠vel."}
    st.session_state.denuncia_completa['sugestao_acao_ia'] = {"sugestao_acao_ia": "Sugest√µes de causa/a√ß√£o via IA indispon√≠veis."}
    st.session_state.denuncia_completa['resumo_ia'] = {"resumo_ia": "Resumo completo via IA indispon√≠vel."}

    if gemini_available:
        # 1. An√°lise de Imagem (se houver imagem e modelo Vision)
        if st.session_state.uploaded_image and st.session_state.gemini_vision_model:
             st.info("üß† Analisando a imagem do buraco com IA Gemini Vision...")
             st.session_state.denuncia_completa['image_analysis_ia'] = analyze_image_with_gemini_vision(st.session_state.uploaded_image, st.session_state.gemini_vision_model)
             # Exibe o resultado da an√°lise de imagem imediatamente ap√≥s processar
             # st.write("**An√°lise de Imagem (IA):**")
             # st.write(st.session_state.denuncia_completa['image_analysis_ia'].get('image_analysis', 'Erro ou sem an√°lise.'))


        # 2. An√°lise de Texto/Dados Consolidados (se modelo Pro)
        if st.session_state.gemini_pro_model:
             buraco_data = st.session_state.denuncia_completa.get('buraco', {})
             image_analysis_result_for_text_model = st.session_state.denuncia_completa.get('image_analysis_ia', {}) # Passa o resultado da an√°lise de imagem

             st.info("üß† Executando an√°lise profunda dos dados do buraco com IA Gemini (Texto)...")
             # A an√°lise detalhada agora recebe os dados estruturados, observa√ß√µes E o resultado da an√°lise de imagem
             st.session_state.denuncia_completa['insights_ia'] = analisar_dados_com_gemini(
                 buraco_data,
                 image_analysis_result_for_text_model,
                 st.session_state.gemini_pro_model
             )
             # st.write("**An√°lise Detalhada (IA):**")
             # st.write(st.session_state.denuncia_completa['insights_ia'].get('insights', 'Erro ou sem an√°lise.'))


             st.info("üß† Calculando o N√≠vel de Prioridade Rob√≥tica para esta den√∫ncia...")
             # A sugest√£o de urg√™ncia recebe TODOS os dados completos
             st.session_state.denuncia_completa['urgencia_ia'] = categorizar_urgencia_gemini(
                 st.session_state.denuncia_completa, # Passa o dicion√°rio completo
                 st.session_state.gemini_pro_model
            )
             # st.write("**Sugest√£o de Urg√™ncia (IA):**")
             # st.write(st.session_state.denuncia_completa['urgencia_ia'].get('urgencia_ia', 'Erro ou sem sugest√£o.'))


             st.info("üß† IA est√° pensando... Qual pode ser a causa e a melhor a√ß√£o para este buraco?")
             # As sugest√µes de causa/a√ß√£o recebem TODOS os dados completos
             st.session_state.denuncia_completa['sugestao_acao_ia'] = sugerir_causa_e_acao_gemini(
                 st.session_state.denuncia_completa, # Passa o dicion√°rio completo
                 st.session_state.gemini_pro_model
            )
             # st.write("**Sugest√µes de Causa e A√ß√£o (IA):**")
             # st.write(st.session_state.denuncia_completa['sugestao_acao_ia'].get('sugestao_acao_ia', 'Erro ou sem sugest√µes.'))

             st.info("üß† Compilando o Relat√≥rio Final Rob√≥tico e Inteligente com IA Gemini...")
             # A gera√ß√£o do resumo recebe TODOS os dados completos
             st.session_state.denuncia_completa['resumo_ia'] = gerar_resumo_completo_gemini(
                 st.session_state.denuncia_completa, # Passa o dicion√°rio completo
                 st.session_state.gemini_pro_model
            )
             # st.write("**Resumo Narrativo (IA):**")
             # st.write(st.session_state.denuncia_completa['resumo_ia'].get('resumo_ia', 'Erro ou sem resumo.'))


        # Avan√ßa para exibir o relat√≥rio ap√≥s TODO o processamento de IA
        st.success("‚úÖ An√°lises de IA conclu√≠das!")
        next_step()

    else:
        st.warning("‚ö†Ô∏è Funcionalidades de An√°lise e Resumo da IA n√£o executadas (Modelos Gemini n√£o configurados ou indispon√≠veis).")
        # Avan√ßa mesmo sem IA se n√£o estiver dispon√≠vel
        next_step()

    # Nota: As chamadas √†s fun√ß√µes de IA s√£o cacheada (@st.cache_data),
    # ent√£o elas s√≥ rodar√£o a primeira vez que o estado atingir este passo
    # com os inputs mudados. Se o usu√°rio voltar e mudar inputs, o cache invalida
    # e elas rodam novamente. Isso √© o comportamento desejado.
    # O `st.rerun()` √© impl√≠cito no `next_step()`.


elif st.session_state.step == 'show_report':
    st.header("üìä RELAT√ìRIO FINAL DA DEN√öNCIA KRATERAS üìä")
    st.write("‚úÖ MISS√ÉO KRATERAS CONCLU√çDA! RELAT√ìRIO GERADO. ‚úÖ")

    dados_completos = st.session_state.denuncia_completa
    denunciante = dados_completos.get('denunciante', {})
    buraco = dados_completos.get('buraco', {})
    endereco = buraco.get('endereco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Nenhuma observa√ß√£o adicional fornecida.')
    localizacao_exata = dados_completos.get('localizacao_exata_processada', {})

    image_analysis_ia = dados_completos.get('image_analysis_ia', {})
    insights_ia = dados_completos.get('insights_ia', {})
    urgencia_ia = dados_completos.get('urgencia_ia', {})
    sugestao_acao_ia = dados_completos.get('sugestao_acao_ia', {})
    resumo_ia = dados_completos.get('resumo_ia', {})

    st.markdown("---")

    # Exibir todas as etapas em expanders abertos por padr√£o
    with st.expander("üë§ Dados do Denunciante", expanded=True):
        st.write(f"**Nome:** {denunciante.get('nome', 'N√£o informado')}")
        st.write(f"**Idade:** {denunciante.get('idade', 'N√£o informado')}")
        st.write(f"**Cidade de Resid√™ncia:** {denunciante.get('cidade_residencia', 'N√£o informada')}")

    with st.expander("üöß Dados do Buraco Coletados", expanded=True):
        st.subheader("Endere√ßo Base")
        st.write(f"**Rua:** {endereco.get('rua', 'N√£o informada')}")
        if buraco.get('numero_proximo'):
            st.write(f"**Refer√™ncia/N√∫mero Pr√≥ximo:** {buraco.get('numero_proximo')}")
        if endereco.get('bairro'):
            st.write(f"**Bairro:** {endereco.get('bairro')}")
        if endereco.get('cidade_buraco'):
             st.write(f"**Cidade do Buraco:** {endereco.get('cidade_buraco')}")
        if endereco.get('estado_buraco'):
            st.write(f"**Estado do Buraco:** {endereco.get('estado_buraco')}")
        if buraco.get('cep_informado'):
            st.write(f"**CEP Informado:** {buraco.get('cep_informado')}")
        st.write(f"**Lado da Rua:** {buraco.get('lado_rua', 'N√£o informado')}")

        st.subheader("Detalhes Estruturados Preenchidos")
        if structured_details:
            st.write(f"**Tamanho Estimado:** {structured_details.get('tamanho', 'N√£o Informado')}")
            st.write(f"**Profundidade Estimada:** {structured_details.get('profundidade', 'N√£o Informado')}")
            st.write(f"**Presen√ßa de √Ågua/Alagamento:** {structured_details.get('presenca_agua', 'N√£o Informado')}")
            st.write(f"**N√≠vel de Perigo Aparente:** {structured_details.get('perigo', 'N√£o Informado')}")
            st.write(f"**Contexto ou Hist√≥rico:** {structured_details.get('contexto', 'N√£o Informado')}")
            st.write(f"**Perigos e Impactos Detalhados:** {', '.join(structured_details.get('perigos_detalhados', ['Nenhum selecionado']))}")
            st.write(f"**Identificadores Visuais Adicionais:** {structured_details.get('identificadores_visuais', 'N√£o informado')}")
        else:
            st.info("Detalhes estruturados n√£o foram coletados.")

        st.subheader("Observa√ß√µes Adicionais (Texto Livre)")
        st.info(observacoes_adicionais if observacoes_adicionais else "Nenhuma observa√ß√£o adicional fornecida.")

        st.subheader("Foto Anexada")
        if st.session_state.get('uploaded_image'):
             try:
                 img = Image.open(io.BytesIO(st.session_state.uploaded_image))
                 st.image(img, caption="Foto do buraco.", use_column_width=True)
             except Exception as e:
                  st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel exibir a imagem anexada. Erro: {e}")
        else:
            st.info("Nenhuma foto foi anexada a esta den√∫ncia.")


    with st.expander("üìç Localiza√ß√£o Exata Processada", expanded=True):
        tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
        st.write(f"**Tipo de Coleta/Processamento:** {tipo_loc}")

        if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
            lat = localizacao_exata.get('latitude')
            lon = localizacao_exata.get('longitude')

            if lat is not None and lon is not None:
                 st.write(f"**Coordenadas:** `{lat}, {lon}`")

                 st.subheader("Visualiza√ß√£o no Mapa (OpenStreetMap/MapLibre)")
                 try:
                     # Tenta usar st.map se coordenadas v√°lidas (N√£o precisa de chave Google)
                     map_data = pd.DataFrame({'lat': [lat], 'lon': [lon]})
                     st.map(map_data, zoom=18, use_container_width=True)
                     st.info("‚ÑπÔ∏è O mapa acima √© uma representa√ß√£o aproximada usando MapLibre/OpenStreetMap.")
                 except Exception as map_error:
                     st.error(f"‚ùå Erro ao gerar visualiza√ß√£o do mapa OpenStreetMap/MapLibre: {map_error}")

                 st.subheader("Visualiza√ß√£o no Google Maps")

                 # Tenta incorporar Google Maps se houver link embed gerado E CHAVE
                 embed_link = localizacao_exata.get('google_embed_link_gerado')
                 if embed_link:
                     try:
                         # Use um placeholder para indicar que est√° tentando carregar
                         with st.spinner("‚è≥ Carregando visualiza√ß√£o do Google Maps Embed..."):
                              st.components.v1.html(
                                  f'<iframe width="100%" height="450" frameborder="0" style="border:0" src="{embed_link}" allowfullscreen></iframe>',
                                  height=470, # Altura um pouco maior para incluir borda
                                  scrolling=False
                              )
                         st.info("‚úÖ Visualiza√ß√£o do Google Maps Embed carregada (requer API habilitada).")
                     except Exception as embed_error:
                          st.error(f"‚ùå Erro ao carregar visualiza√ß√£o do Google Maps Embed: {embed_error}")
                          st.warning("‚ö†Ô∏è A visualiza√ß√£o do Google Maps Embed requer que a 'Maps Embed API' esteja habilitada e autorizada para sua chave de API Geocoding no Google Cloud.")
                 elif st.session_state.geocoding_api_key:
                      st.warning("‚ö†Ô∏è Chave de API Geocoding fornecida, mas n√£o foi poss√≠vel gerar o link Google Maps Embed ou carreg√°-lo. Verifique se a 'Maps Embed API' est√° habilitada e autorizada para sua chave no Google Cloud.")
                 else:
                      st.warning("‚ö†Ô∏è Chave de API Geocoding n√£o fornecida. Visualiza√ß√£o Google Maps Embed n√£o dispon√≠vel.")


                 link_maps = localizacao_exata.get('google_maps_link_gerado')
                 if link_maps:
                     st.write(f"**Link Direto Google Maps:** [Abrir no Google Maps]({link_maps})")

                 if localizacao_exata.get('endereco_formatado_api'):
                      st.write(f"**Endere√ßo Formatado (API):** {localizacao_exata.get('endereco_formatado_api')}")
                 if localizacao_exata.get('input_original') and tipo_loc != 'Descri√ß√£o Manual Detalhada': # S√≥ mostra o input original se n√£o for s√≥ descri√ß√£o
                      st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")


        elif tipo_loc == 'Descri√ß√£o Manual Detalhada':
            st.write(f"**Descri√ß√£o Manual da Localiza√ß√£o:**")
            st.info(localizacao_exata.get('descricao_manual', 'N√£o informada'))
            if localizacao_exata.get('input_original'):
                st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")

        else:
            st.warning("Localiza√ß√£o exata n√£o coletada de forma estruturada (coordenadas/link/descri√ß√£o manual detalhada).")

        # Inclui motivo da falha na geocodifica√ß√£o se aplic√°vel
        if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
             st.info(f"‚ÑπÔ∏è Nota: N√£o foi poss√≠vel obter a localiza√ß√£o exata via Geocodifica√ß√£o autom√°tica. Motivo: {localizacao_exata.get('motivo_falha_geocodificacao_anterior')}")

    st.markdown("---")

    # Exibir an√°lises de IA (se o modelo de texto estava dispon√≠vel)
    if st.session_state.gemini_pro_model or st.session_state.gemini_vision_model:

        with st.expander("üß† An√°lise de Imagem (IA Gemini Vision)", expanded=True):
             st.write(image_analysis_ia.get('image_analysis', 'An√°lise n√£o realizada, sem imagem ou com erro.'))
             if st.session_state.gemini_vision_model is None:
                  st.info("‚ÑπÔ∏è Motor Gemini Vision indispon√≠vel.")

        with st.expander("üß† An√°lise Detalhada Consolidada (IA Gemini Texto)", expanded=True):
            st.write(insights_ia.get('insights', 'An√°lise n√£o realizada ou com erro.'))
            if st.session_state.gemini_pro_model is None:
                 st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")


        with st.expander("üö¶ Sugest√£o de Urg√™ncia (IA Gemini Texto)", expanded=True):
            st.write(urgencia_ia.get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o gerada ou com erro.'))
            if st.session_state.gemini_pro_model is None:
                 st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")


        with st.expander("üõ†Ô∏è Sugest√µes de Causa e A√ß√£o (IA Gemini Texto)", expanded=True):
            st.write(sugestao_acao_ia.get('sugestao_acao_ia', 'Sugest√µes n√£o geradas ou com erro.'))
            if st.session_state.gemini_pro_model is None:
                 st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")

        st.markdown("---")
        st.subheader("üìú Resumo Narrativo Inteligente (IA Gemini Texto)")
        st.write(resumo_ia.get('resumo_ia', 'Resumo n√£o gerado ou com erro.'))
        if st.session_state.gemini_pro_model is None:
             st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")


    else:
        st.warning("‚ö†Ô∏è An√°lises e Resumo da IA n√£o dispon√≠veis (Chaves Gemini n√£o configuradas ou modelos indispon√≠veis).")


    st.markdown("---")
    st.write("Esperamos que este relat√≥rio ajude a consertar o buraco!")

    # Op√ß√£o para reiniciar o processo
    if st.button("Iniciar Nova Den√∫ncia", key='new_denuncia_button'):
        # Limpa o estado da sess√£o para recome√ßar
        for key in st.session_state.keys():
            # Mant√©m as chaves de API e modelos cacheada, pois n√£o mudam por sess√£o do app
            if key not in ['geocoding_api_key', 'gemini_pro_model', 'gemini_vision_model', 'api_keys_loaded']:
                 del st.session_state[key]
        st.rerun()

    # Op√ß√£o para exibir dados brutos (√∫til para debug ou exporta√ß√£o)
    with st.expander("üîå Ver Dados Brutos da Den√∫ncia (JSON)"):
        st.json(dados_completos)

# --- Rodar a aplica√ß√£o ---
# A execu√ß√£o principal do script Streamlit √© gerenciada pelo pr√≥prio Streamlit.
# As fun√ß√µes s√£o chamadas conforme o estado da sess√£o e as intera√ß√µes do usu√°rio.
# O c√≥digo abaixo √© apenas para garantir que o script seja executado como um app Streamlit.
# Adicionado import io para lidar com uploaded_image bytes.
import io
if __name__ == "__main__":
    # Streamlit cuida do loop principal, n√£o precisamos de uma fun√ß√£o main tradicional
    # O c√≥digo fora das fun√ß√µes e no topo √© executado em cada rerun.
    # O fluxo √© controlado pelos ifs/elifs baseados em st.session_state.step
    pass # Nada a fazer aqui al√©m do que j√° est√° no corpo principal do script

# -*- coding: utf-8 -*-
"""
Krateras üöÄ‚ú®üîí: O Especialista Rob√≥tico de Den√∫ncia de Buracos (v5.0 - Estabilidade Aprimorada)

Bem-vindo √† vers√£o visual do Krateras, agora focada na estabilidade e fluxo!
An√°lise de imagem por IA desativada, mas upload para visualiza√ß√£o mantido.
Interface amig√°vel, intelig√™ncia da IA (Texto) otimizada e seguran√ßa de chaves mantida.

Tecnologias: Python, Streamlit, Google Gemini API (Text ONLY), Google Geocoding API, ViaCEP.
Objetivo: Coletar dados de den√∫ncias de buracos com detalhes estruturados e observa√ß√µes,
incluir imagem para refer√™ncia visual, geocodifica√ß√£o, e gerar relat√≥rios
detalhados e priorizados com visualiza√ß√£o de mapa.

Vamos juntos consertar essas ruas! Priorizando estabilidade e precis√£o textual...
"""

import streamlit as st
import requests
import google.generativeai as genai
from typing import Dict, Any, Optional
import re
import json
import pandas as pd
import io

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Krateras üöÄ‚ú®üîí - Den√∫ncia de Buracos",
    page_icon="üöß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Estilos CSS Personalizados (Opcional, para um toque extra) ---
st.markdown("""
<style>
.reportview-container .main .block-container {
    padding-top: 2rem;
    padding-right: 3rem;
    padding-left: 3rem;
    padding-bottom: 2 Chapadasrem;
}
h1, h2, h3 {
    color: #4A90E2; /* Azul Cratera */
}
.stButton>button {
    background-color: #50E3C2; /* Verde Rob√¥ */
    color: white;
    font-weight: bold;
    border-radius: 10px;
    padding: 0.5rem 1rem;
    transition: all 0.2s ease-in-out;
}
.stButton>button:hover {
    background-color: #00B894; /* Verde Rob√¥ Escuro */
    color: white;
}
.stTextInput, .stNumberInput, .stTextArea, .stRadio, .stSelectbox, .stFileUploader {
    margin-bottom: 10px;
}
.stSpinner > div > div {
    border-top-color: #4A90E2 !important;
}
.css-1aumqxt { /* Estilo para st.info */
    border-left: 5px solid #4A90E2 !important;
}
.css-1r6cdft { /* Estilo para st.warning */
     border-left: 5px solid #F5A623 !important;
}
.css-t9s6qg { /* Estilo para st.error */
     border-left: 5px solid #D0021B !important;
}
.css-1u3jtzg { /* Estilo para st.success */
     border-left: 5px solid #7ED321 !important;
}
/* Ajustes para expanders */
.streamlit-expanderHeader {
    font-size: 1.1em !important;
    font-weight: bold !important;
    color: #4A90E2 !important;
}
/* Classe para ajustar o padding interno dos expanders */
/* st-emotion-cache-s5fjsg pode variar, inspecione o elemento se n√£o funcionar */
.st-emotion-cache-s5fjsg, .st-emotion-cache-1njf35f {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
}
</style>
""", unsafe_allow_html=True)


# --- Inicializa√ß√£o de Estado da Sess√£o ---
# Gerencia o fluxo da aplica√ß√£o web
if 'step' not in st.session_state:
    st.session_state.step = 'start'
if 'denuncia_completa' not in st.session_state:
    st.session_state.denuncia_completa = {}
if 'api_keys_loaded' not in st.session_state:
    st.session_state.api_keys_loaded = False
if 'gemini_model' not in st.session_state:
    st.session_state.gemini_model = None
# if 'gemini_vision_model' not in st.session_state: # Removido estado para modelo de vis√£o
#     st.session_state.gemini_vision_model = None
if 'geocoding_api_key' not in st.session_state:
    st.session_state.geocoding_api_key = None

# --- üîë Gerenciamento de Chaves Secretas (Streamlit Secrets) ---
# Utiliza o .streamlit/secrets.toml para carregar chaves

def load_api_keys() -> tuple[Optional[str], Optional[str]]:
    """
    Tenta obter as chaves de API do Google Gemini (Text) e Google Maps Geocoding de Streamlit Secrets.
    Retorna None se n√£o encontradas.
    """
    # Assume que a mesma chave GOOGLE_API_KEY serve apenas para modelo de texto agora
    gemini_key = st.secrets.get('GOOGLE_API_KEY')
    geocoding_key = st.secrets.get('geocoding_api_key')

    if not gemini_key:
        st.warning("‚ö†Ô∏è Segredo 'GOOGLE_API_KEY' n√£o encontrado nos Streamlit Secrets. Funcionalidades de IA (Gemini Text) estar√£o desabilitadas.")
    if not geocoding_key:
        st.warning("‚ö†Ô∏è Segredo 'geocoding_api_key' n√£o encontrado nos Streamlit Secrets. Geocodifica√ß√£o autom√°tica e mapa Google Embed estar√£o desabilitados.")
        st.info("‚ÑπÔ∏è Para configurar os segredos, crie um arquivo `.streamlit/secrets.toml` na raiz do seu projeto Streamlit com:\n```toml\nGOOGLE_API_KEY = \"SUA_CHAVE_GEMINI\"\ngeocoding_api_key = \"SUA_CHAVE_GEOCODING\"\n```\nLembre-se que as APIs Geocoding e Gemini podem gerar custos. Ative-as no Google Cloud e verifique sua configura√ß√£o de cobran√ßa.")

    return gemini_key, geocoding_key

# --- Inicializar APIs (Cacheado para performance) ---

@st.cache_resource
# def init_gemini_models(api_key: Optional[str]) -> tuple[Optional[genai.GenerativeModel], Optional[genai.GenerativeModel]]: # Assinatura antiga
def init_gemini_text_model(api_key: Optional[str]) -> Optional[genai.GenerativeModel]:
    """Inicializa o modelo Google Gemini (Texto APENAS) com cache."""
    if not api_key:
        st.error("‚ùå ERRO na F√°brica de Modelos: Chave de API Gemini n√£o fornecida.")
        # return None, None # Retorno antigo
        return None # Retorno novo
    try:
        genai.configure(api_key=api_key)
        st.success("‚úÖ Conex√£o com API Google Gemini estabelecida.")

        available_models = list(genai.list_models())
        text_models = [m for m in available_models if 'generateContent' in m.supported_generation_methods]

        # Selecionar modelo de Texto preferencial
        text_model_obj: Optional[genai.GenerativeModel] = None
        preferred_text_names = ['gemini-1.5-flash-latest', 'gemini-1.0-pro', 'gemini-pro']
        for name in preferred_text_names:
            # Verifica se o nome preferencial est√° na lista de modelos de texto dispon√≠veis
            found_model = next((m for m in text_models if m.name.endswith(name)), None)
            if found_model:
                text_model_obj = genai.GenerativeModel(found_model.name)
                st.success(f"‚úÖ Modelo de Texto Gemini selecionado: '{found_model.name.replace('models/', '')}'. A IA Textual est√° online!")
                break
        if not text_model_obj:
            if text_models:
                # Fallback para o primeiro modelo de texto dispon√≠vel
                text_model_obj = genai.GenerativeModel(text_models[0].name)
                st.warning(f"‚ö†Ô∏è AVISO: Modelos de texto Gemini preferenciais n√£o encontrados. Usando fallback: '{text_models[0].name.replace('models/', '')}'.")
            else:
                 st.error("‚ùå ERRO na F√°brica de Modelos: Nenhum modelo de texto Gemini compat√≠vel encontrado na sua conta.")


        # Modelo de Vis√£o removido
        # vision_model_obj: Optional[genai.GenerativeModel] = None
        # # Listar modelos que suportam generateContent E t√™m o atributo supported_input_response_mime_types E suportam algum tipo de imagem
        # vision_models_candidates = [
        #     m for m in available_models
        #     if 'generateContent' in m.supported_generation_methods
        #     and hasattr(m, 'supported_input_response_mime_types') # **CORRE√á√ÉO APLICADA AQUI**
        #     and any(mime_type.startswith('image/') for mime_type in m.supported_input_response_mime_types)
        # ]

        # preferred_vision_names = ['gemini-1.5-flash-latest', 'gemini-1.5-pro-latest', 'gemini-pro-vision']
        # for name in preferred_vision_names:
        #      # Verifica se o nome preferencial est√° na lista de candidatos visuais filtrados
        #      found_model = next((m for m in vision_models_candidates if m.name.endswith(name)), None)
        #      if found_model:
        #         vision_model_obj = genai.GenerativeModel(found_model.name)
        #         st.success(f"‚úÖ Modelo de Vis√£o Gemini selecionado: '{found_model.name.replace('models/', '')}'.")
        #         break

        # if not vision_model_obj:
        #     st.warning("‚ö†Ô∏è AVISO: Nenhum modelo Gemini compat√≠vel com an√°lise de imagem ('gemini-pro-vision', 'gemini-1.5-*') encontrado ou dispon√≠vel. An√°lise visual por IA estar√° desabilitada. Verifique se ativou modelos como 'gemini-1.5-flash-latest' na sua conta.")


        # return text_model_obj, vision_model_obj # Retorno antigo
        return text_model_obj # Retorno novo

    except Exception as e:
        st.error(f"‚ùå ERRO no Painel de Controle Gemini: Falha na inicializa√ß√£o dos modelos Google Gemini. Verifique sua chave e status do servi√ßo.")
        st.exception(e)
        # return None, None # Retorno antigo
        return None # Retorno novo


# --- Fun√ß√µes de API Call (Cacheado para resultados est√°veis por sess√£o) ---

@st.cache_data(show_spinner="‚è≥ Interrogando o ViaCEP...")
def buscar_cep(cep: str) -> Dict[str, Any]:
    """Consulta a API ViaCEP para obter dados de endere√ßo com tratamento de erros."""
    cep_limpo = cep.replace("-", "").replace(".", "").strip()
    if len(cep_limpo) != 8 or not cep_limpo.isdigit():
        return {"erro": "Formato de CEP inv√°lido. Precisa de 8 d√≠gitos, amig√£o!"}

    url = f"https://viacep.com.br/ws/{cep_limpo}/json/"
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()
        if 'erro' in data and data['erro'] is True:
            return {"erro": f"CEP '{cep_limpo}' n√£o encontrado no ViaCEP. Ele se escondeu! üßê"}
        if not data.get('logradouro') or not data.get('localidade') or not data.get('uf'):
             return {"erro": f"CEP '{cep_limpo}' encontrado, mas os dados de endere√ßo est√£o incompletos. O ViaCEP s√≥ contou parte da hist√≥ria!"}
        return data
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao buscar o CEP '{cep_limpo}'. O ViaCEP n√£o responde! üò¥"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com o ViaCEP para o CEP '{cep_limpo}': {e}. Problemas na linha!"}
    except Exception as e:
         return {"erro": f"Ocorreu um erro inesperado ao buscar o CEP '{cep_limpo}': {e}. Isso n√£o estava nos meus manuais!"}

@st.cache_data(show_spinner="‚è≥ Tentando localizar o buraco no mapa global via Geocoding API...")
def geocodificar_endereco(rua: str, numero: str, cidade: str, estado: str, api_key: str) -> Dict[str, Any]:
    """Tenta obter coordenadas geogr√°ficas e link Google Maps via Google Maps Geocoding API."""
    if not api_key:
        return {"erro": "Chave de API de Geocodifica√ß√£o n√£o fornecida."}
    if not rua or not numero or not cidade or not estado:
         return {"erro": "Dados de endere√ßo insuficientes (requer rua, n√∫mero, cidade, estado) para geocodificar."}

    address = f"{rua}, {numero}, {cidade}, {estado}"
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={requests.utils.quote(address)}&key={api_key}"

    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()

        if data['status'] != 'OK':
            status = data.get('status', 'STATUS DESCONHECIDO')
            error_msg = data.get('error_message', 'Sem mensagem adicional.')
            # Trata casos espec√≠ficos comuns
            if status == 'ZERO_RESULTS':
                 error_msg = "Nenhum local exato encontrado para o endere√ßo fornecido. Tente refinar o n√∫mero ou refer√™ncia, ou use a entrada manual de coordenadas/descri√ß√£o."
            elif status == 'OVER_DAILY_LIMIT' or status == 'OVER_QUERY_LIMIT':
                 error_msg = "Limite de uso da API Geocoding excedido. Verifique sua configura√ß√£o de cobran√ßa ou espere."
            elif status == 'REQUEST_DENIED':
                 error_msg = "Requisi√ß√£o √† API Geocoding negada. Verifique sua chave, restri√ß√µes de API ou configura√ß√µes de cobran√ßa."
            # Inclui outros status conhecidos como INVALID_REQUEST, UNKNOWN_ERROR, etc.
            elif status == 'INVALID_REQUEST':
                 error_msg = "Requisi√ß√£o inv√°lida (endere√ßo mal formatado?)."
            elif status == 'UNKNOWN_ERROR':
                 error_msg = "Erro desconhecido na API Geocoding."
            else:
                 error_msg = f"Status da API: {status}. {error_msg}"


            return {"erro": f"Geocodifica√ß√£o falhou. Status: {status}. Mensagem: {error_msg}"}

        if not data['results']:
             return {"erro": "Geocodifica√ß√£o falhou. Nenhum local exato encontrado para o endere√ßo fornecido. Tente refinar o n√∫mero ou refer√™ncia."}

        location = data['results'][0]['geometry']['location']
        lat = location['lat']
        lng = location['lng']
        formatted_address = data['results'][0].get('formatted_address', address)

        return {
            "latitude": lat,
            "longitude": lng,
            "endereco_formatado_api": formatted_address,
            "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat},{lng}",
            "google_embed_link_gerado": f"https://www.google.com/maps/embed/v1/place?key={api_key}&q={lat},{lng}"
        }
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao tentar geocodificar: {address}"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com a API de Geocodifica√ß√£o: {address}. Detalhes: {e}"}
    except Exception as e:
        return {"erro": f"Ocorreu um erro inesperado durante a geocodifica√ß√£o: {address}. Detalhes: {e}"}


# --- Fun√ß√µes de An√°lise de IA (Cacheado para resultados est√°veis por sess√£o) ---
# Safety settings configuradas para permitir discuss√µes sobre perigos na rua
SAFETY_SETTINGS = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]


@st.cache_data(show_spinner="üß† Analisando caracter√≠sticas estruturadas e observa√ß√µes com IA Gemini...")
def analisar_caracteristicas_e_observacoes_gemini(_caracteristicas: Dict[str, Any], _observacoes: str, _model: genai.GenerativeModel) -> Dict[str, Any]:
    """
    Utiliza o Gemini (Texto) para analisar as caracter√≠sticas estruturadas e as observa√ß√µes
    e extrair insights estruturados.
    """
    if not _model:
        return {"insights": "ü§ñ An√°lise de descri√ß√£o via IA indispon√≠vel (Motor Gemini Text offline)."}

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in _caracteristicas.items():
        if isinstance(value, list):
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto = "\n".join(caracteristicas_formatadas)

    observacoes_texto = _observacoes.strip() if _observacoes else "Nenhuma observa√ß√£o adicional fornecida."

    prompt = f"""
    Analise as seguintes caracter√≠sticas estruturadas e observa√ß√µes adicionais de uma den√∫ncia de buraco.
    Seu objetivo √© consolidar estas informa√ß√µes e extrair insights CRUCIAIS para um sistema de den√∫ncias de reparo p√∫blico.
    Formate a sa√≠da como um texto claro, usando marcadores (-) ou t√≠tulos para cada categoria de insight.
    Se uma categoria N√ÉO PUDER ser claramente mencionada ou inferida COM ALTA CONFIAN√áA a partir dos dados, indique explicitamente "N√£o especificado/inferido nos dados". Seja honesto sobre o que PODE ser extra√≠do.

    Caracter√≠sticas Estruturadas Fornecidas pelo Denunciante:
    {caracteristicas_texto}

    Observa√ß√µes Adicionais do Denunciante:
    "{observacoes_texto}"

    Categorias para Extrair/Inferir dos Dados Fornecidos:
    - Severidade/Tamanho Estimado (Consolidado dos dados): [Use o valor estruturado e adicione nuances das observa√ß√µes se houverem.]
    - Profundidade Estimada (Consolidado dos dados): [Use o valor estruturado e adicione nuances das observa√ß√µes se houverem.]
    - Presen√ßa de √Ågua/Alagamento (Consolidado dos dados): [Use o valor estruturado e adicione detalhes das observa√ß√µes se houverem.]
    - Tr√°fego Estimado na Via (Consolidado dos dados): [Use o valor estruturado.]
    - Contexto da Via (Consolidado dos dados): [Liste os valores estruturados.]
    - Perigos Potenciais e Impactos Mencionados (Extra√≠do das Observa√ß√µes): [Liste riscos espec√≠ficos citados ou implicados nas *observa√ß√µes* (ex: risco de acidente de carro/moto/bike, perigo para pedestres, causa danos a ve√≠culos - pneu furado, suspens√£o, roda -, dificuldade de desviar, risco de queda, perigo √† noite/chuva). Foque no que foi *adicionado* nas observa√ß√µes.]
    - Contexto Adicional Relevante do Local/Hist√≥rico (Extra√≠do das Observa√ß√µes): [Problema recorrente/antigo/novo *mencionado nas observa√ß√µes*, perto de local importante (se n√£o coberto pelo 'Contexto da Via'), pouca ilumina√ß√£o *mencionada nas observa√ß√µes*.]
    - Sugest√µes de A√ß√£o/Recursos Mencionados pelo Denunciante (Extra√≠do das Observa√ß√µes): [Se o usu√°rio sugere o que fazer (tapa-buraco, recapeamento, sinalizar) ou causas percebidas *mencionadas nas observa√ß√µes*.]
    - Identificadores Visuais Adicionais (se descritos nas Observa√ß√µes): [Coisas √∫nicas pr√≥ximas que ajudam a achar o buraco (poste X, √°rvore Y, em frente a Z), *se mencionadas nas observa√ß√µes*.]
    - Palavras-chave Principais: [Liste 3-7 palavras-chave que capturem a ess√™ncia da den√∫ncia a partir de *todos* os dados de entrada.]

    Formate a resposta de forma limpa e estruturada.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"insights": f"‚ùå An√°lise de caracter√≠sticas/observa√ß√µes bloqueada pelo filtro de seguran√ßa do Gemini. Motivo: {block_reason}"}
        return {"insights": response.text.strip()}
    except Exception as e:
        return {"insights": f"‚ùå Erro ao analisar caracter√≠sticas/observa√ß√µes com IA: {e}"}

# @st.cache_data(show_spinner="üß† IA est√° vendo... Analisando a imagem do buraco...") # REMOVIDO
# def analisar_imagem_gemini(_image_bytes: bytes, _mime_type: str, _model: genai.GenerativeModel) -> Dict[str, Any]: # REMOVIDO
#     """Utiliza o modelo Gemini Vision para analisar uma imagem do buraco.""" # REMOVIDO
#     # ... c√≥digo de an√°lise de imagem ... # REMOVIDO

@st.cache_data(show_spinner="üß† Calculando o N√≠vel de Prioridade Rob√≥tica...")
def categorizar_urgencia_gemini(_dados_denuncia: Dict[str, Any], _insights_ia: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]: # Removido _analise_imagem_ia
    """Utiliza o Gemini (Texto) para sugerir uma categoria de urg√™ncia com base nos dados estruturados, observa√ß√µes e insights."""
    if not _model:
        return {"urgencia_ia": "ü§ñ Sugest√£o de urg√™ncia via IA indispon√≠vel (Motor Gemini Text offline)."}

    caracteristicas = _dados_denuncia.get('buraco', {}).get('caracteristicas_estruturadas', {})
    observacoes = _dados_denuncia.get('buraco', {}).get('observacoes_adicionais', 'Sem observa√ß√µes.')
    insights_texto = _insights_ia.get('insights', 'An√°lise de insights n√£o dispon√≠vel.')
    # analise_imagem_texto = _analise_imagem_ia.get('analise_imagem', 'An√°lise de imagem n√£o dispon√≠vel ou com erro.') # REMOVIDO

    localizacao_exata = _dados_denuncia.get('localizacao_exata_processada', {})
    tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
    input_original_loc = localizacao_exata.get('input_original', 'N√£o informado.')

    loc_contexto = f"Localiza√ß√£o informada: Tipo: {tipo_loc}."
    if input_original_loc != 'N√£o informado.':
         loc_contexto += f" Detalhes originais: '{input_original_loc}'."

    if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
        lat = localizacao_exata.get('latitude')
        lon = localizacao_exata.get('longitude')
        loc_contexto += f" Coordenadas: {lat}, {lon}. Link gerado: {localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')}."

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in caracteristicas.items():
        if isinstance(value, list):
             # Filtra 'Selecione' ou vazios da lista
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto_prompt = "\n".join(caracteristicas_formatadas)


    prompt = f"""
    Com base nos dados da den√∫ncia (caracter√≠sticas estruturadas, observa√ß√µes) e nos insights da an√°lise de texto, sugira a MELHOR categoria de urg√™ncia para o reparo deste buraco.
    Considere a severidade/tamanho, profundidade, PERIGOS POTENCIAIS e impactos mencionados, o CONTEXTO DA VIA (tipo de tr√°fego, contexto espec√≠fico) e qualquer ADICIONAL relevante nas observa√ß√µes.

    Escolha UMA Categoria de Urg√™ncia entre estas:
    - Urg√™ncia Baixa: Buraco pequeno, sem perigo aparente, em local de baixo tr√°fego. Principalmente est√©tico ou pequeno inc√¥modo.
    - Urg√™ncia M√©dia: Tamanho razo√°vel, pode causar leve inc√¥modo ou dano menor (ex: pneu furado leve), em via secund√°ria ou com tr√°fego moderado. Requer reparo em prazo razo√°vel.
    - Urg√™ncia Alta: Buraco grande, profundo, perigo CLARO e/ou frequente (risco de acidente mais s√©rio, dano significativo a ve√≠culo, perigo para motos/bikes/pedestres), em via movimentada ou √°rea de risco (escola, hospital, curva, subida/descida). Requer aten√ß√£o R√ÅPIDA, possivelmente em poucos dias.
    - Urg√™ncia Imediata/Cr√≠tica: Buraco ENORME/muito profundo que causa acidentes CONSTANTES ou representa risco GRAVE e iminente a ve√≠culos ou pessoas (ex: cratera na pista principal, buraco em local de desvio imposs√≠vel), afeta severamente a fluidez ou acessibilidade. Requer interven√ß√£o de EMERG√äNCIA (horas/poucas horas).

    Dados da Den√∫ncia:
    Localiza√ß√£o B√°sica: Rua {_dados_denuncia.get('buraco', {}).get('endereco', {}).get('rua', 'N√£o informada')}, N√∫mero Pr√≥ximo/Refer√™ncia: {_dados_denuncia.get('buraco', {}).get('numero_proximo', 'N√£o informado')}. Cidade: {_dados_denuncia.get('buraco', {}).get('endereco', {}).get('cidade_buraco', 'N√£o informada')}, Estado: {_dados_denuncia.get('buraco', {}).get('endereco', {}).get('estado_buraco', 'N√£o informado')}.
    {loc_contexto}

    Caracter√≠sticas Estruturadas Fornecidas:
    {caracteristicas_texto_prompt}

    Observa√ß√µes Adicionais:
    "{observacoes}"

    Insights Extra√≠dos pela An√°lise de Texto/Caracter√≠sticas:
    {insights_texto}

    Com base nestes dados, qual categoria de urg√™ncia voc√™ sugere? Forne√ßa APENAS a categoria (ex: "Urg√™ncia Alta") e uma breve JUSTIFICATIVA (m√°ximo 2 frases) explicando POR QUE essa categoria foi sugerida, citando os elementos mais importantes dos dados fornecidos.

    Formato de sa√≠da (muito importante seguir este formato):
    Categoria Sugerida: [Categoria Escolhida]
    Justificativa: [Justificativa Breve]
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"urgencia_ia": f"‚ùå Sugest√£o de urg√™ncia bloqueada. Motivo: {block_reason}"}
        return {"urgencia_ia": response.text.strip()}
    except Exception as e:
        return {"urgencia_ia": f"‚ùå Erro ao sugerir urg√™ncia com IA: {e}"}


@st.cache_data(show_spinner="üß† IA est√° pensando... Qual pode ser a causa e a melhor a√ß√£o para este buraco?")
def sugerir_causa_e_acao_gemini(_dados_denuncia: Dict[str, Any], _insights_ia: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]: # Removido _analise_imagem_ia
    """Utiliza o Gemini (Texto) para sugerir poss√≠veis causas do buraco e a√ß√µes de reparo com base nos dados, insights e observa√ß√µes."""
    if not _model:
        return {"sugestao_acao_ia": "ü§ñ Sugest√µes de causa/a√ß√£o via IA indispon√≠veis (Motor Gemini Text offline)."}

    caracteristicas = _dados_denuncia.get('buraco', {}).get('caracteristicas_estruturadas', {})
    observacoes = _dados_denuncia.get('observacoes_adicionais', 'Sem observa√ß√µes.')
    insights_texto = _insights_ia.get('insights', 'An√°lise de insights n√£o dispon√≠vel.')
    # analise_imagem_texto = _analise_imagem_ia.get('analise_imagem', 'An√°lise de imagem n√£o dispon√≠vel ou com erro.') # REMOVIDO

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in caracteristicas.items():
        if isinstance(value, list):
             # Filtra 'Selecione' ou vazios da lista
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto_prompt = "\n".join(caracteristicas_formatadas)


    prompt = f"""
    Com base nos dados fornecidos pelo denunciante (caracter√≠sticas estruturadas, observa√ß√µes) e nos insights extra√≠dos pela an√°lise de IA de texto, tente sugerir:
    1. Uma ou duas P√ìSSIVEIS CAUSAS para a forma√ß√£o deste buraco espec√≠fico (ex: chuva forte recente, desgaste do asfalto pelo tempo/tr√°fego, problema na drenagem subterr√¢nea, afundamento devido a reparo anterior, obra mal feita na regi√£o). Baseie-se em todos os dados textuais dispon√≠veis.
    2. Sugest√µes de TIPOS DE A√á√ÉO ou REPARO mais adequados ou necess√°rios para resolver este problema (ex: simples tapa-buraco, recapeamento da se√ß√£o, inspe√ß√£o de drenagem, sinaliza√ß√£o de emerg√™ncia, interdi√ß√£o parcial da via, reparo na rede de √°gua/esgoto). Baseie-se na severidade, perigos e o que foi observado/analisado (texto).
    Baseie suas sugest√µes EXCLUSIVAMENTE nas informa√ß√µes e an√°lises dispon√≠veis. Se os dados n√£o derem pistas suficientes, indique "N√£o especificado/inferido nos dados". Seja l√≥gico e pr√°tico.

    Informa√ß√µes Relevantes da Den√∫ncia:
    Caracter√≠sticas Estruturadas:
    {caracteristicas_texto_prompt}
    Observa√ß√µes Adicionais: "{observacoes}"
    Insights Extra√≠dos pela An√°lise de Texto/Caracter√≠sticas:
    {insights_texto}

    Formato de sa√≠da:
    Poss√≠veis Causas Sugeridas: [Lista de causas sugeridas baseadas nos dados ou 'N√£o especificado/inferido nos dados']
    Sugest√µes de A√ß√£o/Reparo Sugeridas: [Lista de a√ß√µes sugeridas baseadas nos dados/insights ou 'N√£o especificado/inferido nos dados']
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"sugestao_acao_ia": f"‚ùå Sugest√£o de causa/a√ß√£o bloqueada. Motivo: {block_reason}"}
        return {"sugestao_acao_ia": response.text.strip()}
    except Exception as e:
        return {"sugestao_acao_ia": f"‚ùå Erro ao sugerir causa/a√ß√£o com IA: {e}"}

@st.cache_data(show_spinner="üß† Compilando o Relat√≥rio Final Rob√≥tico e Inteligente com IA Gemini...")
def gerar_resumo_completo_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini (Texto) para gerar um resumo narrativo inteligente da den√∫ncia completa, incluindo dados estruturados e an√°lises de IA (texto)."""
    if not _model:
        return {"resumo_ia": "ü§ñ Resumo inteligente via IA indispon√≠vel (Motor Gemini Text offline)."}

    denunciante = _dados_denuncia_completa.get('denunciante', {})
    buraco = _dados_denuncia_completa.get('buraco', {})
    endereco = buraco.get('endereco', {})
    caracteristicas = buraco.get('caracteristicas_estruturadas', {})
    observacoes = buraco.get('observacoes_adicionais', 'Nenhuma observa√ß√£o adicional fornecida.')
    localizacao_exata = _dados_denuncia_completa.get('localizacao_exata_processada', {})
    insights_ia = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise da descri√ß√£o/caracter√≠sticas n√£o dispon√≠vel ou com erro.')
    # analise_imagem_ia = _dados_denuncia_completa.get('analise_imagem_ia', {}).get('analise_imagem', 'An√°lise visual por IA n√£o dispon√≠vel ou com erro.') # REMOVIDO
    # Acessando os resultados da IA com get e fallback para garantir que s√£o dicion√°rios
    urgencia_ia_result = _dados_denuncia_completa.get('urgencia_ia', {})
    sugestao_acao_ia_result = _dados_denuncia_completa.get('sugestao_acao_ia', {})


    loc_info_resumo = "Localiza√ß√£o exata n√£o especificada ou processada."
    tipo_loc_processada = localizacao_exata.get('tipo', 'N√£o informada')
    input_original_loc = localizacao_exata.get('input_original', 'N√£o informado.')
    motivo_falha_geo_resumo = localizacao_exata.get('motivo_falha_geocodificacao_anterior', None)

    if tipo_loc_processada in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
         lat = localizacao_exata.get('latitude')
         lon = localizacao_exata.get('longitude')
         link_gerado = localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')
         loc_info_resumo = f"Localiza√ß√£o Exata: Coordenadas {lat}, {lon} (Obtida via: {tipo_loc_processada.replace(' (API)', ' API').replace('Manual', 'Manual').replace('Fornecidas/Extra√≠das', 'Manual')}). Link Google Maps: {link_gerado}."
         if input_original_loc != 'N√£o informado.':
             loc_info_resumo += f" (Input original: '{input_original_loc}')"

    elif tipo_loc_processada == 'Descri√ß√£o Manual Detalhada':
         loc_info_resumo = f"Localiza√ß√£o via descri√ß√£o manual detalhada: '{localizacao_exata.get('descricao_manual', 'N√£o informada')}'. (Input original: '{input_original_loc}')"

    elif input_original_loc != 'N√£o informado.' and tipo_loc_processada == 'N√£o informada':
         loc_info_resumo = f"Localiza√ß√£o informada (tipo n√£o detectado): '{input_original_loc}'."

    if motivo_falha_geo_resumo:
         loc_info_resumo += f" (Nota: {motivo_falha_geo_resumo})"

    # Formatar as caracter√≠sticas estruturadas para o prompt
    caracteristicas_formatadas = []
    for key, value in caracteristicas.items():
        if isinstance(value, list):
             # Filtra 'Selecione' ou vazios da lista
            caracteristicas_formatadas.append(f"- {key}: {', '.join([item for item in value if item and item != 'Selecione']) if value else 'N√£o informado'}")
        else:
            caracteristicas_formatadas.append(f"- {key}: {value if value and value != 'Selecione' else 'N√£o informado'}")
    caracteristicas_texto_prompt = "\n".join(caracteristicas_formatadas)


    prompt = f"""
    Gere um resumo narrativo conciso (m√°ximo 10-12 frases) para a seguinte den√∫ncia de buraco no aplicativo Krateras.
    Este resumo deve ser formal, objetivo e √∫til para equipes de manuten√ß√£o ou gest√£o p√∫blica.
    Combine os dados estruturados, as observa√ß√µes adicionais, a localiza√ß√£o exata processada e os resultados das an√°lises de IA (texto).

    Inclua:
    - Quem denunciou (Nome, Cidade de Resid√™ncia).
    - Onde est√° o buraco (Rua, N√∫mero Pr√≥ximo/Refer√™ncia, Bairro, Cidade do Buraco, Estado do Buraco, CEP se dispon√≠vel).
    - A localiza√ß√£o EXATA processada (mencione como foi obtida e os dados relevantes).
    - O lado da rua.
    - As caracter√≠sticas estruturadas fornecidas (Tamanho, Perigo, Profundidade, √Ågua, Tr√°fego, Contexto da Via).
    - Informa√ß√µes adicionais importantes das Observa√ß√µes.
    - Os principais pontos da An√°lise de Texto/Caracter√≠sticas de IA (Perigos Potenciais, Contexto Adicional).
    - A SUGEST√ÉO de Categoria de Urg√™ncia pela IA e sua Justificativa.
    - As SUGEST√ïES de POSS√çVEIS CAUSAS e TIPOS DE A√á√ÉO/REPARO sugeridas pela IA (se dispon√≠veis).

    Dados Completos da Den√∫ncia:
    Denunciante: {denunciante.get('nome', 'N√£o informado')}, de {denunciante.get('cidade_residencia', 'N√£o informada')}.
    Endere√ßo do Buraco: Rua {endereco.get('rua', 'N√£o informada')}, N¬∫ Pr√≥ximo: {buraco.get('numero_proximo', 'N√£o informado')}. Bairro: {endereco.get('bairro', 'N√£o informado')}. Cidade: {endereco.get('cidade_buraco', 'N√£o informada')}, Estado: {endereco.get('estado_buraco', 'N√£o informado')}. CEP: {buraco.get('cep_informado', 'N√£o informado')}.
    Lado da Rua: {buraco.get('lado_rua', 'N√£o informado')}.
    Localiza√ß√£o Exata Coletada: {loc_info_resumo}
    Caracter√≠sticas Estruturadas Fornecidas:
    {caracteristicas_texto_prompt}
    Observa√ß√µes Adicionais: "{observacoes}"

    Insights da An√°lise de Texto/Caracter√≠sticas de IA:
    {insights_ia}

    Sugest√£o de Urg√™ncia pela IA:
    {urgencia_ia_result.get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o dispon√≠vel ou com erro.')}

    Sugest√µes de Causa e A√ß√£o pela IA:
    {sugestao_acao_ia_result.get('sugestao_acao_ia', 'Sugest√µes n√£o geradas ou com erro.')}


    Gere o resumo em portugu√™s. Comece com "Relat√≥rio Krateras: Den√∫ncia de buraco..." ou algo similar. Use linguagem clara e direta.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"resumo_ia": f"‚ùå Gera√ß√£o de resumo bloqueada. Motivo: {block_reason}"}
        return {"resumo_ia": response.text.strip()}
    except Exception as e:
        return {"resumo_ia": f"‚ùå Erro ao gerar resumo completo com IA: {e}"}


# --- Fun√ß√µes de Navega√ß√£o e Renderiza√ß√£o de UI ---

def next_step():
    """Avan√ßa para o pr√≥ximo passo no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep', # Pode pular dependendo da escolha
        'collect_buraco_address_manual', # Pode pular dependendo da escolha
        'collect_buraco_details', # Unifica a coleta do resto e a geocodifica√ß√£o/localiza√ß√£o manual/imagem
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index < len(steps) - 1:
            st.session_state.step = steps[current_index + 1]
            # st.rerun() # Removido st.rerun() expl√≠cito aqui para ver se melhora o fluxo CEP
            # Streamlit j√° reruns ap√≥s callback/state change
    except ValueError:
        # Caso o passo atual n√£o esteja na lista (erro ou estado inicial)
        st.session_state.step = steps[0]
        # st.rerun() # Removido st.rerun() expl√≠cito
    # Um rerun ocorrer√° naturalmente ap√≥s a execu√ß√£o da fun√ß√£o next_step() se for chamada por um callback.
    # Se for chamada diretamente, talvez precise reavaliar. No fluxo atual, √© chamada por bot√µes ou ap√≥s processamento.


def prev_step():
    """Volta para o passo anterior no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep',
        'collect_buraco_address_manual',
        'collect_buraco_details',
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index > 0:
             # L√≥gica para pular passos de CEP/Manual se n√£o foram usados
             if st.session_state.step == 'collect_buraco_details':
                  # Se chegamos aqui diretamente do m√©todo, voltamos para l√°
                  # Verifica qual foi o m√©todo original de coleta de endere√ßo
                  endereco_coletado_via = st.session_state.get('endereco_coletado_via')
                  if endereco_coletado_via == 'cep':
                      st.session_state.step = 'collect_buraco_address_cep'
                  elif endereco_coletado_via == 'manual':
                      st.session_state.step = 'collect_buraco_address_manual'
                  else: # Fallback seguro se n√£o soubermos a origem
                       st.session_state.step = steps[current_index - 1] # Volta para address_method
             elif st.session_state.step == 'collect_buraco_address_cep' or st.session_state.step == 'collect_buraco_address_manual':
                  st.session_state.step = 'collect_buraco_address_method'
             else:
                  st.session_state.step = steps[current_index - 1]

             st.rerun() # Manter rerun aqui para garantir que a navega√ß√£o de volta funciona
    except ValueError:
         st.session_state.step = steps[0]
         st.rerun() # Manter rerun aqui


# --- Layout Principal da Aplica√ß√£o ---

st.title("Krateras üöÄ‚ú®üîí")
st.subheader("O Especialista Rob√≥tico de Den√∫ncia de Buracos")

# --- Fluxo da Aplica√ß√£o baseado no Estado ---

if st.session_state.step == 'start':
    st.write("""
    Ol√°! Krateras v5.0 entrando em √≥rbita com **Estabilidade Priorit√°ria**! Sua miss√£o, caso aceite: denunciar buracos na rua
    para que possam ser consertados. A seguran√ßa dos seus dados e a precis√£o da den√∫ncia
    s√£o nossas prioridades m√°ximas.

    Nesta vers√£o, focamos na estabilidade da an√°lise textual e geolocaliza√ß√£o. A funcionalidade
    de an√°lise autom√°tica de imagem por IA foi temporariamente desativada, mas voc√™ ainda pode
    fazer o upload de uma foto para inclus√£o no relat√≥rio visual.

    Utilizamos intelig√™ncia artificial (Google Gemini Text) e APIs de localiza√ß√£o (Google Geocoding,
    ViaCEP) para coletar, analisar (via texto) e gerar um relat√≥rio detalhado para as autoridades competentes.

    Fui criado com o que h√° de mais avan√ßado em Programa√ß√£o, IA (An√°lise de Texto!), Design Inteligente,
    Matem√°tica e L√≥gica Inabal√°vel. Com acesso seguro √†s APIs, sou impar√°vel.

    Clique em Iniciar para come√ßarmos a coleta de dados.
    """)

    st.info("‚ö†Ô∏è Suas chaves de API do Google (Gemini e Geocoding) devem ser configuradas nos Streamlit Secrets (`.streamlit/secrets.toml`) para que a IA e a geocodifica√ß√£o autom√°tica funcionem corretamente e de forma segura. A API Gemini (apenas o modelo de texto √© necess√°rio agora) e a API Geocoding podem gerar custos. Ative-as no Google Cloud e verifique sua configura√ß√£o de cobran√ßa.")


    if st.button("Iniciar Miss√£o Den√∫ncia!"):
        # Carregar chaves e inicializar APIs
        gemini_api_key, geocoding_api_key = load_api_keys()
        st.session_state.geocoding_api_key = geocoding_api_key # Armazena a chave de geocoding no estado
        # st.session_state.gemini_model, st.session_state.gemini_vision_model = init_gemini_models(gemini_api_key) # Chamada antiga
        st.session_state.gemini_model = init_gemini_text_model(gemini_api_key) # Inicializa APENAS modelo de texto
        st.session_state.gemini_vision_model = None # Garante que o modelo de vis√£o √© None
        st.session_state.api_keys_loaded = True # Marca que tentamos carregar as chaves
        next_step()

elif st.session_state.step == 'collect_denunciante':
    st.header("--- üë§ Dados do Her√≥i/Hero√≠na da Vez! ---")
    st.write("Sua contribui√ß√£o √© super valiosa! üí™")

    # Formul√°rio para coletar dados do denunciante
    with st.form("form_denunciante"):
        nome = st.text_input("Seu nome completo:", key='nome_denunciante')
        idade = st.number_input("Sua idade (opcional, aproximada üòâ):", min_value=0, max_value=120, value=None, help="Deixe em branco se n√£o quiser informar.", key='idade_denunciante_input')
        cidade_residencia = st.text_input("Em qual cidade voc√™ reside?:", key='cidade_residencia_denunciante')

        submitted = st.form_submit_button("Avan√ßar (Dados Denunciante)")

        if submitted:
            if not nome or not cidade_residencia:
                st.error("‚ùó Nome e Cidade de resid√™ncia s√£o campos obrigat√≥rios. Por favor, preencha-os.")
            else:
                st.session_state.denuncia_completa['denunciante'] = {
                    "nome": nome.strip(),
                    "idade": st.session_state.idade_denunciante_input if st.session_state.idade_denunciante_input is not None and st.session_state.idade_denunciante_input > 0 else None, # Store as None if 0 or None
                    "cidade_residencia": cidade_residencia.strip()
                }
                st.success(f"Ol√°, {nome}! Dados coletados. Preparando para dados do buraco...")
                next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_method':
    st.header("--- üöß Detalhes do Buraco (Nosso Alvo!) ---")
    st.subheader("Como identificar a rua do buraco?")

    # Armazenar a escolha do m√©todo diretamente no estado para usar no bot√£o Voltar
    st.session_state.endereco_address_method_choice = st.radio(
        "Escolha o m√©todo:",
        ('Digitar nome manualmente', 'Buscar por CEP'),
        key='endereco_method' # Keep key for persistence if needed elsewhere
    )

    # Use um bot√£o para confirmar a escolha e mover para o pr√≥ximo sub-step
    if st.button("Selecionar M√©todo"):
         if st.session_state.endereco_address_method_choice == 'Digitar nome manualmente':
              st.session_state.endereco_coletado_via = 'manual' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_manual'
         elif st.session_state.endereco_address_method_choice == 'Buscar por CEP':
              st.session_state.endereco_coletado_via = 'cep' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_cep'
         st.rerun() # For√ßa a atualiza√ß√£o para o pr√≥ximo passo

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_cep':
    st.header("--- üöß Detalhes do Buraco (Busca por CEP) ---")
    st.write("Digite o CEP do local do buraco.")

    # Inicializa estados para o CEP
    if 'dados_cep_validos' not in st.session_state:
         st.session_state.dados_cep_validos = None
    if 'cep_error' not in st.session_state:
         st.session_state.cep_error = False
    if 'cep_buraco' not in st.session_state: # Garante que o input text tem um valor inicial
         st.session_state.cep_buraco = ''


    with st.form("form_cep"):
        cep_input = st.text_input("Digite o CEP (apenas n√∫meros):", max_chars=8, key='cep_buraco')
        buscar_button = st.form_submit_button("Buscar CEP")

        # --- L√≥gica de busca e exibi√ß√£o DENTRO do form_submit ---
        if buscar_button:
            if not cep_input:
                st.error("‚ùó Por favor, digite um CEP.")
                st.session_state.cep_error = True
                st.session_state.dados_cep_validos = None # Limpa dados v√°lidos em caso de input vazio
            else:
                dados_cep = buscar_cep(cep_input.strip())

                if 'erro' in dados_cep:
                    st.error(f"‚ùå Falha na busca por CEP: {dados_cep['erro']}")
                    st.session_state.cep_error = True # Marca que houve erro no CEP
                    st.session_state.dados_cep_validos = None # Limpa dados v√°lidos
                else:
                    # Sucesso: Armazena dados v√°lidos e exibe IMEDIATAMENTE
                    st.session_state.dados_cep_validos = dados_cep
                    st.session_state.cep_error = False
                    st.success("‚úÖ Endere√ßo Encontrado (ViaCEP):")
                    st.write(f"**Rua:** {dados_cep.get('logradouro', 'N√£o informado')}")
                    st.write(f"**Bairro:** {dados_cep.get('bairro', 'N√£o informado')}")
                    st.write(f"**Cidade:** {dados_cep.get('localidade', 'N√£o informado')}")
                    st.write(f"**Estado:** {dados_cep.get('uf', 'N√£o informado')}")
                    st.write(f"**CEP:** {cep_input.strip()}")
                    st.info("Por favor, confirme se estes dados est√£o corretos. Se n√£o, use o bot√£o 'Corrigir Endere√ßo Manualmente'.")

                    # Preenche os dados do buraco no estado AQUI para que "Confirmar" possa us√°-los
                    st.session_state.denuncia_completa['buraco'] = {
                        'endereco': {
                            'rua': st.session_state.dados_cep_validos.get('logradouro', ''),
                            'bairro': st.session_state.dados_cep_validos.get('bairro', ''),
                            'cidade_buraco': st.session_state.dados_cep_validos.get('localidade', ''),
                            'estado_buraco': st.session_state.dados_cep_validos.get('uf', '')
                        },
                        'cep_informado': cep_input.strip() # Garante que o CEP digitado √© armazenado
                    }
                    # N√£o precisa de st.rerun() expl√≠cito aqui. O form submit j√° causa um rerun.
                    # A exibi√ß√£o dos bot√µes de a√ß√£o e a persist√™ncia do endere√ßo v√™m do estado
                    # na pr√≥xima execu√ß√£o do script ap√≥s o submit.


    # --- L√≥gica para exibir bot√µes de a√ß√£o FORA do form, baseada no estado ap√≥s a busca ---
    # Exibe bot√µes de a√ß√£o APENAS se uma busca foi feita (cep_buraco existe)
    # E a busca foi bem-sucedida (dados_cep_validos n√£o √© None e n√£o houve erro)
    if st.session_state.get('cep_buraco') and not st.session_state.get('cep_error') and st.session_state.get('dados_cep_validos'):
        st.markdown("---") # Separador visual para os bot√µes de a√ß√£o
        col1, col2 = st.columns(2)
        with col1:
            # Bot√£o para confirmar e ir para detalhes (n√∫mero, descri√ß√£o)
            if st.button("Confirmar Endere√ßo e Avan√ßar"):
                 next_step()

        with col2:
            # Bot√£o para corrigir manualmente (volta para entrada manual)
            if st.button("Corrigir Endere√ßo Manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.session_state.dados_cep_validos = None # Limpa dados CEP ao ir para manual
                 st.session_state.cep_error = False # Limpa erro
                 # Limpa o CEP input para o caso de voltar para CEP depois
                 st.session_state.cep_buraco = ''
                 st.rerun()

    elif st.session_state.get('cep_error'): # Se houve erro na busca por CEP
        st.markdown("---")
        st.warning("N√£o foi poss√≠vel obter o endere√ßo por CEP.")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Tentar novamente por CEP"):
                 st.session_state.cep_error = False # Reseta o erro para tentar novamente
                 st.session_state.cep_buraco = '' # Limpa o input para uma nova tentativa
                 st.session_state.dados_cep_validos = None # Garante que dados validos estao limpos
                 st.rerun() # For√ßa reload para resetar o formul√°rio de CEP
        with col2:
            if st.button("Digitar endere√ßo manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.session_state.dados_cep_validos = None # Limpa dados CEP ao ir para manual
                 st.session_state.cep_error = False # Limpa erro
                 st.session_state.cep_buraco = '' # Limpa o CEP input
                 st.rerun()
    # Note: Se o formul√°rio nunca foi submetido (cep_buraco n√£o existe) ou o input estava vazio (tratado no if buscar_button),
    # esta parte fora do form n√£o exibir√° nada, o que √© o comportamento esperado.

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_manual':
    st.header("--- üöß Detalhes do Buraco (Entrada Manual) ---")
    st.write("Digite os dados do endere√ßo do buraco manualmente.")

    # Use os dados do CEP pr√©-preenchidos se vier dessa rota, ou inicialize vazio
    endereco_inicial = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})

    with st.form("form_manual_address"):
        rua_manual = st.text_input("Nome completo da rua:", value=endereco_inicial.get('rua', ''), key='rua_manual_buraco')
        bairro_manual = st.text_input("Bairro onde est√° o buraco (opcional):", value=endereco_inicial.get('bairro', ''), key='bairro_manual_buraco')
        cidade_manual = st.text_input("Cidade onde est√° o buraco:", value=endereco_inicial.get('cidade_buraco', ''), key='cidade_manual_buraco')
        estado_manual = st.text_input("Estado (UF) onde est√° o buraco:", value=endereco_inicial.get('estado_buraco', ''), max_chars=2, key='estado_manual_buraco')

        submitted = st.form_submit_button("Avan√ßar (Endere√ßo Manual)")

        if submitted:
            if not rua_manual or not cidade_manual or not estado_manual:
                st.error("‚ùó Rua, Cidade e Estado s√£o campos obrigat√≥rios para o endere√ßo do buraco.")
            else:
                # Garante que 'buraco' existe antes de adicionar/atualizar 'endereco'
                if 'buraco' not in st.session_state.denuncia_completa:
                    st.session_state.denuncia_completa['buraco'] = {}

                st.session_state.denuncia_completa['buraco']['endereco'] = {
                    'rua': rua_manual.strip(),
                    'bairro': bairro_manual.strip(),
                    'cidade_buraco': cidade_manual.strip(),
                    'estado_buraco': estado_manual.strip().upper() # Guarda em mai√∫sculas
                }
                # Remove dados de CEP se veio da busca e agora foi corrigido manualmente
                if 'cep_informado' in st.session_state.denuncia_completa['buraco']:
                     del st.session_state.denuncia_completa['buraco']['cep_informado']

                next_step() # Move para a pr√≥xima etapa (coleta de detalhes)

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_details':
    st.header("--- üöß Detalhes Finais do Buraco ---")
    st.subheader("Informa√ß√µes cruciais para a localiza√ß√£o e an√°lise!")

    # Exibe o endere√ßo b√°sico j√° coletado para refer√™ncia
    endereco_basico = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})
    st.write(f"Endere√ßo Base: Rua **{endereco_basico.get('rua', 'N√£o informada')}**, Cidade: **{endereco_basico.get('cidade_buraco', 'N√£o informada')}** - **{endereco_basico.get('estado_buraco', 'N√£o informado')}**")
    if endereco_basico.get('bairro'):
         st.write(f"Bairro: **{endereco_basico.get('bairro')}**")
    if st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado'):
         st.write(f"CEP informado: **{st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado')}**")

    st.markdown("---") # Separador visual

    with st.form("form_buraco_details"):
        st.subheader("üìã Caracter√≠sticas do Buraco (Escolha as op√ß√µes)")
        col1, col2 = st.columns(2)
        with col1:
             tamanho = st.selectbox(
                 "Tamanho Estimado:",
                 ['Selecione', 'Pequeno (cabe um pneu)', 'M√©dio (maior que um pneu, mas cabe em uma faixa)', 'Grande (ocupa mais de uma faixa, dif√≠cil desviar)', 'Enorme (cratera, impede passagem)', 'Cr√≠tico (buraco na pista principal, risco iminente de acidente grave)'],
                 key='tamanho_buraco'
             )
             perigo = st.selectbox(
                 "Perigo Estimado:",
                 ['Selecione', 'Baixo (principalmente est√©tico, risco m√≠nimo)', 'M√©dio (risco de dano leve ao pneu ou suspens√£o)', 'Alto (risco de acidente/dano s√©rio para carro, alto risco para moto/bike/pedestre)', 'Alt√≠ssimo (risco grave e iminente de acidente, hist√≥rico de acidentes no local)'],
                 key='perigo_buraco'
             )
             profundidade = st.selectbox(
                 "Profundidade Estimada:",
                 ['Selecione', 'Raso (menos de 5 cm)', 'M√©dio (5-15 cm)', 'Fundo (15-30 cm)', 'Muito Fundo (mais de 30 cm / "engole" um pneu)'],
                 key='profundidade_buraco'
             )
        with col2:
             agua = st.selectbox(
                 "Presen√ßa de √Ågua/Alagamento:",
                 ['Selecione', 'Seco', 'Acumula pouca √°gua', 'Acumula muita √°gua (vira piscina)', 'Problema de drenagem vis√≠vel (jato de √°gua, nascente)'],
                 key='agua_buraco'
             )
             trafego = st.selectbox(
                 "Tr√°fego Estimado na Via:",
                 ['Selecione', 'Muito Baixo (rua local sem sa√≠da)', 'Baixo (rua residencial calma)', 'M√©dio (rua residencial/comercial com algum fluxo)', 'Alto (avenida movimentada, via de acesso)', 'Muito Alto (via expressa, anel vi√°rio)'],
                 key='trafego_buraco'
             )
             contexto_via = st.multiselect(
                 "Contexto da Via (selecione um ou mais):",
                 ['Reta', 'Curva acentuada', 'Cruzamento/Esquina', 'Subida', 'Descida', 'Pr√≥ximo a faixa de pedestre', 'Pr√≥ximo a sem√°foro/lombada', '√Årea escolar/Universit√°ria', '√Årea hospitalar/Sa√∫de', '√Årea comercial intensa', 'Via de acesso principal', 'Via secund√°ria', 'Pr√≥ximo a ponto de √¥nibus/transporte p√∫blico', 'Pr√≥ximo a ciclovia/ciclofaixa'],
                 key='contexto_buraco'
             )

        st.subheader("‚úçÔ∏è Localiza√ß√£o Exata e Outros Detalhes")
        st.write("‚û°Ô∏è Utilize o n√∫mero pr√≥ximo ou ponto de refer√™ncia para ajudar na geocodifica√ß√£o autom√°tica. Se falhar ou for impreciso, forne√ßa COORDENADAS ou LINK do Google Maps com coordenadas.")
        numero_proximo = st.text_input("N√∫mero do im√≥vel mais pr√≥ximo ou ponto de refer√™ncia (ESSENCIAL para precis√£o! Ex: 'Em frente ao 123', 'Esquina c/ Rua X', 'Entre os n√∫meros 45 e 60'):", key='numero_proximo_buraco')
        lado_rua = st.text_input("Lado da rua onde est√° o buraco (Ex: 'lado par', 'lado √≠mpar', 'lado direito (sentido centro)', 'lado esquerdo (sentido bairro)'):", key='lado_rua_buraco')

        st.markdown("""
        <p>Localiza√ß√£o EXATA (opcional, mas altamente recomendado se a geocodifica√ß√£o falhar):</p>
        <p>A MELHOR forma √© COPIAR AS COORDENADAS (Lat,Long) ou um LINK do Google Maps que as contenha.<br>
        Sugest√£o: Abra o Google Maps, encontre o buraco, <strong>TOQUE/CLIQUE E SEGURE NO LOCAL PREOCUPANTE</strong>.
        As coordenadas ou um link aparecer√£o.</p>
        <p>Alternativamente, uma DESCRI√á√ÉO MUITO DETALHADA do local EXATO no mapa (Ex: 'Exatamente 5 metros √† esquerda do poste Y, em frente ao port√£o azul do n¬∫ 456').</p>
        """, unsafe_allow_html=True)
        localizacao_manual_input = st.text_input("Insira COORDENADAS (Lat,Long), LINK do Maps com Coordenadas, OU DESCRI√á√ÉO DETALHADA manual:", key='localizacao_manual')

        st.subheader("üì∑ Foto do Buraco (Opcional, para refer√™ncia visual no relat√≥rio)")
        st.write("Uma boa foto ajuda as equipes de reparo a identificar o problema rapidamente. Por favor, envie uma imagem clara.")
        uploaded_image = st.file_uploader("Carregar Imagem do Buraco:", type=['jpg', 'jpeg', 'png', 'webp'], key='uploaded_image_buraco')
        if uploaded_image:
             st.info(f"Imagem '{uploaded_image.name}' carregada e ser√° inclu√≠da no relat√≥rio.")


        st.subheader("üìù Observa√ß√µes Adicionais")
        st.write("Algo mais a acrescentar que n√£o foi coberto pelas op√ß√µes? Detalhes como: 'problema recorrente (h√° quanto tempo?)', 'surgiu depois da √∫ltima chuva', 'muito dif√≠cil desviar √† noite', 'causou X dano ao meu carro', 'vi um acidente aqui':")
        observacoes_adicionais = st.text_area("Suas observa√ß√µes:", key='observacoes_buraco')


        submitted = st.form_submit_button("Enviar Den√∫ncia para An√°lise Rob√≥tica!")

        if submitted:
            # Validar campos obrigat√≥rios
            required_selects = {'tamanho_buraco': 'Tamanho Estimado', 'perigo_buraco': 'Perigo Estimado', 'profundidade_buraco': 'Profundidade Estimada', 'agua_buraco': 'Presen√ßa de √Ågua', 'trafego_buraco': 'Tr√°fego Estimado'}
            missing_selects = [label for key, label in required_selects.items() if st.session_state[key] == 'Selecione']

            if not numero_proximo or not lado_rua or not observacoes_adicionais:
                 st.error("‚ùó N√∫mero pr√≥ximo/refer√™ncia, Lado da rua e Observa√ß√µes adicionais s√£o campos obrigat√≥rios.")
            elif missing_selects:
                 st.error(f"‚ùó Por favor, selecione uma op√ß√£o para os seguintes campos: {', '.join(missing_selects)}.")
            else:
                # Garante que 'buraco' existe no estado (j√° deve existir dos passos anteriores)
                if 'buraco' not in st.session_state.denuncia_completa:
                    st.session_state.denuncia_completa['buraco'] = {}

                # Armazena os dados do formul√°rio no estado
                st.session_state.denuncia_completa['buraco'].update({
                    'numero_proximo': numero_proximo.strip(),
                    'lado_rua': lado_rua.strip(),
                    'caracteristicas_estruturadas': {
                         'Tamanho Estimado': tamanho,
                         'Perigo Estimado': perigo,
                         'Profundidade Estimada': profundidade,
                         'Presen√ßa de √Ågua/Alagamento': agua,
                         'Tr√°fego Estimado na Via': trafego,
                         'Contexto da Via': contexto_via if contexto_via else [] # Garante que √© lista, pode ser vazia
                    },
                    'observacoes_adicionais': observacoes_adicionais.strip()
                    # Endere√ßo base e CEP j√° devem estar no estado de passos anteriores
                })

                # --- Processar Imagem Upload ---
                # Limpa dados da imagem anterior antes de processar a nova
                st.session_state.denuncia_completa['buraco']['imagem_denuncia'] = None
                if uploaded_image is not None:
                    try:
                        # Leia os bytes da imagem
                        image_bytes = uploaded_image.getvalue()
                        st.session_state.denuncia_completa['buraco']['imagem_denuncia'] = {
                            "filename": uploaded_image.name,
                            "type": uploaded_image.type,
                            "bytes": image_bytes # Armazena os bytes
                        }
                        # st.info("‚úÖ Imagem carregada com sucesso para an√°lise!") # Mensagem ajustada acima
                    except Exception as e:
                        st.error(f"‚ùå Erro ao processar a imagem para inclus√£o no relat√≥rio: {e}. Por favor, tente novamente.")
                        st.session_state.denuncia_completa['buraco']['imagem_denuncia'] = {"erro": f"Erro ao carregar: {e}"}


                # --- Tentar Geocodifica√ß√£o Autom√°tica ---
                # Limpa dados de localiza√ß√£o processada anterior
                st.session_state.denuncia_completa['localizacao_exata_processada'] = {"tipo": "N√£o informada"}
                tentou_geocodificar = False
                geocodificacao_sucesso_coords = False # Flag specifically for getting coordinates
                geo_resultado: Dict[str, Any] = {} # Initialize to store auto-geo result

                rua_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('rua')
                cidade_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('cidade_buraco')
                estado_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('estado_buraco')

                # Tenta usar o numero_proximo/referencia para geocodificar
                num_referencia_geo = numero_proximo.strip()

                tem_dados_para_geo = (st.session_state.geocoding_api_key and rua_buraco and num_referencia_geo and cidade_buraco and estado_buraco)

                if tem_dados_para_geo:
                    st.info("‚úÖ Chave de Geocodifica√ß√£o e dados b√°sicos de endere√ßo completos encontrados. Tentando gerar o link do Google Maps automaticamente...")
                    tentou_geocodificar = True
                    geo_resultado = geocodificar_endereco(
                        rua_buraco,
                        num_referencia_geo, # Usa o n√∫mero/refer√™ncia como base para geocodifica√ß√£o
                        cidade_buraco,
                        estado_buraco,
                        st.session_state.geocoding_api_key
                    )

                    if 'erro' not in geo_resultado:
                        geocodificacao_sucesso_coords = True
                        st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                            "tipo": "Geocodificada (API)",
                            "latitude": geo_resultado['latitude'],
                            "longitude": geo_resultado['longitude'],
                            "endereco_formatado_api": geo_resultado.get('endereco_formatado_api', ''),
                            "google_maps_link_gerado": geo_resultado['google_maps_link_gerado'],
                            "google_embed_link_gerado": geo_resultado.get('google_embed_link_gerado'),
                            "input_original": num_referencia_geo # Referencia qual input foi usado para geocodificar
                        }
                        st.success("‚úÖ Localiza√ß√£o Obtida (via Geocodifica√ß√£o Autom√°tica)!")
                    # If there's an error in geo_resultado, it's handled later when setting the failure reason.
                elif not st.session_state.geocoding_api_key:
                     st.warning("‚ö†Ô∏è AVISO: Chave de API de Geocodifica√ß√£o N√ÉO fornecida. Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                     st.warning("‚ö†Ô∏è AVISO: Chave de Geocodifica√ß√£o fornecida, mas dados de endere√ßo insuficientes (precisa de Rua, N√∫mero Pr√≥ximo, Cidade, Estado). Geocodifica√ß√£o autom√°tica N√ÉO tentada.")


                # --- Processar Coordenadas/Link/Descri√ß√£o Manual (if provided) ---
                # Isto √© feito *independente* do sucesso da geocodifica√ß√£o autom√°tica,
                # pois a entrada manual pode ser mais precisa ou corrigir a autom√°tica.
                localizacao_manual_input_processed = localizacao_manual_input.strip()
                lat_manual: Optional[float] = None
                lon_manual: Optional[float] = None
                tipo_manual_processado = "Descri√ß√£o Manual Detalhada" # Assume descri√ß√£o manual por padr√£o
                input_original_manual = localizacao_manual_input_processed

                if localizacao_manual_input_processed:
                     # Regex para tentar achar coordenadas em diferentes formatos (Lat,Long ou em links comuns)
                     # Tenta cobrir "lat,long", "@lat,long" em links, "lat long"
                     # Regex mais robusta: permite espa√ßos ou v√≠rgulas como separadores
                     match_coords = re.search(r'(-?\d+\.\d+)[,\s]+(-?\d+\.\d+)', input_original_manual)
                     if match_coords:
                         try:
                             teste_lat = float(match_coords.group(1))
                             teste_lon = float(match_coords.group(2))
                             # Valida√ß√£o b√°sica de coordenadas
                             if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                 lat_manual = teste_lat
                                 lon_manual = teste_lon
                                 tipo_manual_processado = "Coordenadas Fornecidas/Extra√≠das Manualmente"
                                 st.info("‚úÖ Coordenadas v√°lidas detectadas no input manual!")
                             else:
                                 st.warning("‚ö†Ô∏è Parece um formato de coordenadas, mas fora da faixa esperada (-90 a 90 Latitude, -180 a 180 Longitude). Tratando como descri√ß√£o detalhada.")
                         except ValueError:
                            # Ignore, continue para a pr√≥xima tentativa (link)
                             pass # N√£o √© um n√∫mero float v√°lido, tratar como descri√ß√£o ou link

                     # Se ainda n√£o achou coordenadas, tenta de link se for um link
                     if lat_manual is None and input_original_manual.startswith("http"):
                          st.info("‚ÑπÔ∏è Entrada manual √© um link. Tentando extrair coordenadas (sujeito a formato do link)...")
                          # Tenta regex para links Google Maps (com @lat,long) ou search (com ?,query=lat,long)
                          match_maps_link = re.search(r'(?:/@|/search/\?api=1&query=)(-?\d+\.?\d*),(-?\d+\.?\d*)', input_original_manual)
                          if match_maps_link:
                              try:
                                  teste_lat = float(match_maps_link.group(1))
                                  teste_lon = float(match_maps_link.group(2))
                                  if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                       lat_manual = teste_lat
                                       lon_manual = teste_lon
                                       tipo_manual_processado = "Coordenadas Extra√≠das de Link (Manual)"
                                       st.info("‚úÖ Coordenadas extra√≠das de link do Maps no input manual!")
                                  else:
                                       st.warning("‚ö†Ô∏è Coordenadas extra√≠das do link no input manual fora da faixa esperada. Tratando como descri√ß√£o detalhada.")
                                  # Se achou coords do link, a flag de sucesso de coords manual deve ser true
                                  # geocodificacao_sucesso_coords = True # N√£o sobrescreve a flag da auto-geo aqui
                              except ValueError:
                                 st.info("‚ÑπÔ∏è Valores no link n√£o parecem coordenadas v√°lidas. Tratando como descri√ß√£o.")
                          else:
                               st.info("‚ÑπÔ∏è N√£o foi poss√≠vel extrair coordenadas reconhec√≠veis do link do Maps fornecido manualmente.")
                               # Se n√£o extraiu coords do link, trata como descri√ß√£o manual
                               lat_manual = None
                               lon_manual = None
                               tipo_manual_processado = "Descri√ß√£o Manual Detalhada"
                     # Se n√£o achou coords e n√£o √© link, ent√£o √© descri√ß√£o manual
                     elif lat_manual is None:
                         st.info("‚ÑπÔ∏è Entrada manual n√£o detectada como coordenadas ou link. Tratando como descri√ß√£o detalhada.")
                         tipo_manual_processado = "Descri√ß√£o Manual Detalhada"


                     # Armazenar o resultado do input manual.
                     # Se coordenadas foram encontradas manualmente, elas *substituem* o resultado da geocodifica√ß√£o autom√°tica.
                     # A entrada manual com coordenadas TEM PREFER√äNCIA sobre a geocodifica√ß√£o autom√°tica.
                     if lat_manual is not None and lon_manual is not None:
                         st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                              "tipo": tipo_manual_processado, # Ser√° Coordenadas Fornecidas/Extra√≠das ou Coordenadas Extra√≠das de Link
                              "input_original": input_original_manual,
                              "latitude": lat_manual,
                              "longitude": lon_manual,
                              "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat_manual},{lon_manual}",
                              "google_embed_link_gerado": f"https://www.google.com/maps/embed/v1/place?key={st.session_state.geocoding_api_key}&q={lat_manual},{lon_manual}" if st.session_state.geocoding_api_key else None # Tenta gerar embed link se tiver chave
                         }
                         geocodificacao_sucesso_coords = True # Temos coordenadas (via manual)!
                         st.success(f"‚úÖ Localiza√ß√£o Exata Obtida (via Input Manual - {tipo_manual_processado})!")
                     # Se manual input existe mas n√£o s√£o coords, guarda como descri√ß√£o manual:
                     elif localizacao_manual_input_processed:
                         st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                              "tipo": "Descri√ß√£o Manual Detalhada",
                              "input_original": input_original_manual,
                              "descricao_manual": input_original_manual
                         }
                         # geocodificacao_sucesso_coords permanece False se a auto-geo falhou e manual n√£o deu coords


                # --- Final check and setting the failure reason ---
                # Check if the *final* processed location type is one that does NOT have coordinates
                final_loc_type = st.session_state.denuncia_completa['localizacao_exata_processada'].get('tipo')

                if final_loc_type not in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Coordenadas Extra√≠das de Link (Manual)', 'Geocodificada (API)']:
                     # If we ended up *without* coordinates, let's store the reason why we couldn't get them.
                     reason_parts = []

                     # Reason 1: Auto-geocoding failed (if it was attempted)
                     if tentou_geocodificar and 'erro' in geo_resultado:
                          reason_parts.append(f"Geocodifica√ß√£o autom√°tica falhou: {geo_resultado['erro']}")
                     # Reason 2: Auto-geocoding not attempted due to missing key
                     elif not st.session_state.geocoding_api_key:
                          reason_parts.append("Chave de API de Geocodifica√ß√£o n√£o fornecida.")
                     # Reason 3: Auto-geocoding not attempted due to insufficient data (but key existed)
                     elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                          reason_parts.append("Dados insuficientes para Geocodifica√ß√£o autom√°tica (requer Rua, N√∫mero Pr√≥ximo/Refer√™ncia, Cidade, Estado).")

                     # Reason 4: Manual input was given, but wasn't coordinates that could be extracted
                     # Only add this if manual input was provided AND it didn't result in coords
                     if localizacao_manual_input_processed and not (lat_manual is not None and lon_manual is not None):
                          reason_parts.append("Coordenadas n√£o encontradas ou extra√≠das do input manual.")

                     # Combine and store the reasons if any
                     if reason_parts:
                          # Only update if the current processed type is not already 'Descri√ß√£o Manual Detalhada'
                          # or if it is, but we have new failure reasons to add.
                          current_failure_reason = st.session_state.denuncia_completa['localizacao_exata_processada'].get('motivo_falha_geocodificacao_anterior', '')
                          new_failure_reason = " / ".join(reason_parts)
                          if final_loc_type != 'Descri√ß√£o Manual Detalhada' or (final_loc_type == 'Descri√ß√£o Manual Detalhada' and new_failure_reason != current_failure_reason):
                                st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = new_failure_reason
                     elif final_loc_type == "N√£o informada":
                         # Fallback reason if it's "N√£o informada" and no specific failure reason was captured
                          st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Localiza√ß√£o exata baseada em coordenadas n√£o obtida por nenhum m√©todo."


                # Everything processed, advance to the IA analysis step
                next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'processing_ia':
    st.header("--- üß† Processamento Rob√≥tico de IA ---")
    st.write("Por favor, aguarde enquanto o Krateras analisa os dados (via texto) e gera o relat√≥rio com a intelig√™ncia do Google Gemini.")
    st.info("‚ÑπÔ∏è A an√°lise visual por IA est√° desativada nesta vers√£o para otimiza√ß√£o da estabilidade.")

    buraco_data = st.session_state.denuncia_completa.get('buraco', {})
    caracteristicas = buraco_data.get('caracteristicas_estruturadas', {})
    observacoes = buraco_data.get('observacoes_adicionais', '')
    imagem_data = buraco_data.get('imagem_denuncia') # Mant√©m os dados da imagem carregada

    # Resetar resultados de IA antes de rodar para garantir que n√£o estamos usando resultados de um rerun anterior sem dados
    st.session_state.denuncia_completa['insights_ia'] = {}
    # st.session_state.denuncia_completa['analise_imagem_ia'] = {} # REMOVIDO - N√£o haver√° an√°lise de imagem
    st.session_state.denuncia_completa['urgencia_ia'] = {}
    st.session_state.denuncia_completa['sugestao_acao_ia'] = {}
    st.session_state.denuncia_completa['resumo_ia'] = {}


    # Rodar an√°lise de texto/caracter√≠sticas
    if st.session_state.gemini_model:
        st.session_state.denuncia_completa['insights_ia'] = analisar_caracteristicas_e_observacoes_gemini(
            caracteristicas,
            observacoes,
            st.session_state.gemini_model
        )
    else:
        st.warning("‚ö†Ô∏è Modelo Google Gemini Text n√£o inicializado. An√°lise de caracter√≠sticas/observa√ß√µes por IA desabilitada.")
        st.session_state.denuncia_completa['insights_ia'] = {"insights": "An√°lise de caracter√≠sticas/observa√ß√µes via IA indispon√≠vel."}


    # Rodar categoriza√ß√£o de urg√™ncia
    # Certifica-se de passar os dados IA processados, mesmo que estejam vazios ou com erro
    current_insights = st.session_state.denuncia_completa.get('insights_ia', {})
    # current_analise_imagem = st.session_state.denuncia_completa.get('analise_imagem_ia', {}) # REMOVIDO
    if st.session_state.gemini_model:
        st.session_state.denuncia_completa['urgencia_ia'] = categorizar_urgencia_gemini(
            st.session_state.denuncia_completa, # Passa todos os dados
            current_insights,
            # current_analise_imagem, # REMOVIDO
            st.session_state.gemini_model
        )
    else:
        st.warning("‚ö†Ô∏è Modelo Google Gemini Text n√£o inicializado. Sugest√£o de urg√™ncia por IA desabilitada.")
        st.session_state.denuncia_completa['urgencia_ia'] = {"urgencia_ia": "Sugest√£o de urg√™ncia via IA indispon√≠vel."}


    # Rodar sugest√£o de causa e a√ß√£o
    if st.session_state.gemini_model:
        st.session_state.denuncia_completa['sugestao_acao_ia'] = sugerir_causa_e_acao_gemini(
            st.session_state.denuncia_completa, # Passa todos os dados
            current_insights,
            # current_analise_imagem, # REMOVIDO
            st.session_state.gemini_model
        )
    else:
        st.warning("‚ö†Ô∏è Modelo Google Gemini Text n√£o inicializado. Sugest√µes de causa/a√ß√£o por IA desabilitadas.")
        st.session_state.denuncia_completa['sugestao_acao_ia'] = {"sugestao_acao_ia": "Sugest√µes de causa/a√ß√£o via IA indispon√≠veis."}


    # Gerar resumo completo
    if st.session_state.gemini_model:
        st.session_state.denuncia_completa['resumo_ia'] = gerar_resumo_completo_gemini(
            st.session_state.denuncia_completa, # Passa todos os dados
            st.session_state.gemini_model
        )
    else:
        st.warning("‚ö†Ô∏è Modelo Google Gemini Text n√£o inicializado. Gera√ß√£o de resumo por IA desabilitada.")
        st.session_state.denuncia_completa['resumo_ia'] = {"resumo_ia": "Resumo completo via IA indispon√≠vel."}


    # Avan√ßa para exibir o relat√≥rio ap√≥s o processamento (mesmo que algumas IAs falhem/estejam indispon√≠veis)
    next_step()


elif st.session_state.step == 'show_report':
    st.header("üìä RELAT√ìRIO FINAL DA DEN√öNCIA KRATERAS üìä")
    st.write("‚úÖ MISS√ÉO KRATERAS CONCLU√çDA! RELAT√ìRIO GERADO. ‚úÖ")

    dados_completos = st.session_state.denuncia_completa
    denunciante = dados_completos.get('denunciante', {})
    buraco = dados_completos.get('buraco', {})
    endereco = buraco.get('endereco', {})
    caracteristicas = buraco.get('caracteristicas_estruturadas', {})
    observacoes = buraco.get('observacoes_adicionais', 'Nenhuma observa√ß√£o adicional fornecida.')
    imagem_data = buraco.get('imagem_denuncia') # Dados da imagem
    localizacao_exata = dados_completos.get('localizacao_exata_processada', {})
    insights_ia = dados_completos.get('insights_ia', {})
    # analise_imagem_ia = dados_completos.get('analise_imagem_ia', {}) # REMOVIDO
    urgencia_ia = dados_completos.get('urgencia_ia', {})
    sugestao_acao_ia = dados_completos.get('sugestao_acao_ia', {})
    resumo_ia = dados_completos.get('resumo_ia', {})

    st.markdown("---")

    # Exibir todas as etapas abertas em expanders
    with st.expander("üë§ Dados do Denunciante", expanded=True):
        st.write(f"**Nome:** {denunciante.get('nome', 'N√£o informado')}")
        st.write(f"**Idade:** {denunciante.get('idade', 'N√£o informado')}") # Ser√° None se n√£o informado
        st.write(f"**Cidade de Resid√™ncia:** {denunciante.get('cidade_residencia', 'N√£o informada')}")

    with st.expander("üöß Dados Base do Endere√ßo do Buraco", expanded=True):
        st.write(f"**Rua:** {endereco.get('rua', 'N√£o informada')}")
        if buraco.get('numero_proximo'):
            st.write(f"**Refer√™ncia/N√∫mero Pr√≥ximo:** {buraco.get('numero_proximo')}")
        if endereco.get('bairro'):
            st.write(f"**Bairro:** {endereco.get('bairro')}")
        if endereco.get('cidade_buraco'):
             st.write(f"**Cidade do Buraco:** {endereco.get('cidade_buraco')}")
        if endereco.get('estado_buraco'):
            st.write(f"**Estado do Buraco:** {endereco.get('estado_buraco')}")
        if buraco.get('cep_informado'):
            st.write(f"**CEP Informado:** {buraco.get('cep_informado')}")
        st.write(f"**Lado da Rua:** {buraco.get('lado_rua', 'N√£o informado')}")


    with st.expander("üìã Caracter√≠sticas Estruturadas e Observa√ß√µes (Denunciante)", expanded=True):
         st.write("**Caracter√≠sticas Selecionadas:**")
         if caracteristicas:
             # Exibe apenas as caracter√≠sticas que n√£o s√£o "Selecione" ou None/lista vazia
             caracteristicas_exibir = {k: v for k, v in caracteristicas.items() if v and v != 'Selecione' and (not isinstance(v, list) or v)}
             if caracteristicas_exibir:
                for key, value in caracteristicas_exibir.items():
                     if isinstance(value, list):
                         st.write(f"- **{key}:** {', '.join([item for item in value if item and item != 'Selecione'])}") # Filtra aqui tamb√©m para exibi√ß√£o
                     else:
                       st.write(f"- **{key}:** {value}")
             else:
                 st.info("Nenhuma caracter√≠stica estruturada significativa foi selecionada.")
         else:
              st.info("Nenhuma caracter√≠stica estruturada coletada.")


         st.write("**Observa√ß√µes Adicionais Fornecidas:**")
         st.info(observacoes if observacoes else 'Nenhuma observa√ß√£o adicional fornecida.')

    with st.expander("üìç Localiza√ß√£o Exata Processada", expanded=True):
        tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
        st.write(f"**Tipo de Coleta:** {tipo_loc}")

        if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
            lat = localizacao_exata.get('latitude')
            lon = localizacao_exata.get('longitude')

            if lat is not None and lon is not None:
                 st.write(f"**Coordenadas:** `{lat}, {lon}`")

                 st.subheader("Visualiza√ß√£o no Mapa")
                 try:
                     # Tenta usar st.map se coordenadas v√°lidas
                     map_data = pd.DataFrame({'lat': [lat], 'lon': [lon]})
                     st.map(map_data, zoom=18, use_container_width=True)
                     st.info("‚ÑπÔ∏è O mapa acima √© uma representa√ß√£o aproximada usando MapLibre/OpenStreetMap. Para maior precis√£o ou detalhes de sat√©lite, use o link direto ou o mapa incorporado do Google Maps.")

                     # Tenta incorporar Google Maps se houver link embed gerado E chave de geocoding
                     embed_link = localizacao_exata.get('google_embed_link_gerado')
                     if embed_link and st.session_state.geocoding_api_key:
                         st.subheader("Visualiza√ß√£o no Google Maps (Embed)")
                         # Incorpora o iframe do Google Maps
                         st.components.v1.html(
                             f'<iframe width="100%" height="450" frameborder="0" style="border:0" src="{embed_link}" allowfullscreen></iframe>',
                             height=470, # Altura um pouco maior para incluir borda
                             scrolling=False
                         )
                         # st.info("‚ÑπÔ∏è Requer chave de Geocoding API e a Embed API habilitada no Google Cloud para funcionar.") # J√° avisado antes

                     elif st.session_state.geocoding_api_key and not embed_link:
                          # Isso pode acontecer se a geocodifica√ß√£o autom√°tica falhou de forma que n√£o gerou embed link
                          st.warning("‚ö†Ô∏è Chave de Geocodifica√ß√£o fornecida, mas n√£o foi poss√≠vel gerar um mapa Google Maps incorporado. Verifique se a Embed API est√° habilitada no Google Cloud.")
                     elif not st.session_state.geocoding_api_key:
                           st.warning("‚ö†Ô∏è Chave de API de Geocodifica√ß√£o n√£o fornecida. O mapa Google Maps incorporado n√£o pode ser gerado.")


                 except Exception as map_error:
                     st.error(f"‚ùå Erro ao gerar visualiza√ß√£o do mapa: {map_error}")


                 link_maps = localizacao_exata.get('google_maps_link_gerado')
                 if link_maps:
                     st.write(f"**Link Direto Google Maps:** [Abrir no Google Maps]({link_maps})")

                 if localizacao_exata.get('endereco_formatado_api'):
                      st.write(f"**Endere√ßo Formatado (API):** {localizacao_exata.get('endereco_formatado_api')}")
                 if localizacao_exata.get('input_original'):
                     st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")


        elif tipo_loc == 'Descri√ß√£o Manual Detalhada':
            st.write(f"**Descri√ß√£o Manual:**")
            st.info(localizacao_exata.get('descricao_manual', 'N√£o informada'))
            if localizacao_exata.get('input_original'):
                st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")

        else: # Tipo "N√£o informada"
            st.warning("Localiza√ß√£o exata n√£o coletada de forma estruturada (coordenadas/link), nem descri√ß√£o manual. O relat√≥rio depender√° da descri√ß√£o e endere√ßo base.")

        # Inclui motivo da falha na geocodifica√ß√£o se aplic√°vel e se n√£o foi sobrescreito por coords manuais
        if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
             st.info(f"‚ÑπÔ∏è Nota: Motivo da falha na geocodifica√ß√£o autom√°tica ou input manual sem coordenadas: {localizacao_exata.get('motivo_falha_geocodificacao_anterior')}")


    with st.expander("üì∑ Imagem da Den√∫ncia (Refer√™ncia Visual)", expanded=True):
         if imagem_data and 'bytes' in imagem_data:
              try:
                   # Usar io.BytesIO para exibir a imagem a partir dos bytes
                   st.image(io.BytesIO(imagem_data['bytes']), caption=imagem_data.get('filename', 'Imagem Carregada'), use_column_width=True)
                   st.write(f"**Nome do Arquivo:** {imagem_data.get('filename', 'N√£o informado')}")
                   st.write(f"**Tipo:** {imagem_data.get('type', 'N√£o informado')}")
                   st.info("Esta imagem √© inclu√≠da no relat√≥rio para refer√™ncia visual, mas n√£o foi analisada automaticamente por IA nesta vers√£o.")
              except Exception as e:
                   st.error(f"‚ùå N√£o foi poss√≠vel exibir a imagem carregada: {e}")
         elif imagem_data and 'erro' in imagem_data:
              st.error(f"‚ùå Erro ao carregar a imagem: {imagem_data.get('erro', 'Detalhe desconhecido.')}")
         else:
              st.info("Nenhuma imagem foi carregada para esta den√∫ncia.")


    st.markdown("---")
    st.subheader("ü§ñ An√°lises Rob√≥ticas de IA (Google Gemini Text)")

    if st.session_state.gemini_model:
        with st.expander("üß† An√°lise de Caracter√≠sticas e Observa√ß√µes (IA Gemini)", expanded=True):
            st.write(insights_ia.get('insights', 'An√°lise n√£o realizada ou com erro.'))

        # Expandir de an√°lise de imagem removido.
        # with st.expander("üëÅÔ∏è An√°lise Visual do Buraco (IA Gemini Vision)", expanded=True): # REMOVIDO
        #     st.write(analise_imagem_ia.get('analise_imagem', 'An√°lise n√£o realizada ou com erro.')) # REMOVIDO

        with st.expander("üö¶ Sugest√£o de Urg√™ncia (IA Gemini)", expanded=True):
            st.write(urgencia_ia.get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o gerada ou com erro.'))

        with st.expander("üõ†Ô∏è Sugest√µes de Causa e A√ß√£o (IA Gemini)", expanded=True):
            st.write(sugestao_acao_ia.get('sugestao_acao_ia', 'Sugest√µes n√£o geradas ou com erro.'))

        st.markdown("---")
        st.subheader("üìú Resumo Narrativo Inteligente (IA Gemini)")
        st.write(resumo_ia.get('resumo_ia', 'Resumo n√£o gerado ou com erro.'))
    else:
        st.warning("‚ö†Ô∏è An√°lises e Resumo da IA n√£o dispon√≠veis (Chave Google API KEY n√£o configurada ou modelo de texto n√£o inicializado).")


    st.markdown("---")
    st.write("Esperamos que este relat√≥rio ajude a consertar o buraco!")

    # Op√ß√£o para reiniciar o processo
    if st.button("Iniciar Nova Den√∫ncia"):
        # Limpa o estado da sess√£o para recome√ßar (exceto as chaves API e modelos que s√£o cache_resource)
        keys_to_keep = ['api_keys_loaded', 'gemini_model', 'geocoding_api_key'] # Removido gemini_vision_model
        all_keys = list(st.session_state.keys())
        for key in all_keys:
            if key not in keys_to_keep:
                del st.session_state[key]
        st.rerun()

    # Op√ß√£o para exibir dados brutos (√∫til para debug ou exporta√ß√£o)
    with st.expander("üîå Ver Dados Brutos (JSON)"):
        # Remove os bytes da imagem para evitar poluir o JSON bruto, se houver
        dados_para_json = dados_completos.copy()
        if 'buraco' in dados_para_json and 'imagem_denuncia' in dados_para_json['buraco']:
             img_data = dados_para_json['buraco']['imagem_denuncia']
             if img_data and 'bytes' in img_data:
                  # Cria uma c√≥pia e remove a chave 'bytes'
                  img_data_copy = img_data.copy()
                  del img_data_copy['bytes']
                  dados_para_json['buraco']['imagem_denuncia'] = img_data_copy
                  st.info("Conte√∫do da imagem (bytes) omitido do JSON bruto.")
             # else: Se imagem_denuncia existe mas n√£o tem 'bytes' (ex: erro), mant√©m como est√°

        st.json(dados_para_json)


# --- Rodar a aplica√ß√£o ---
# A execu√ß√£o principal do script Streamlit √© gerenciada pelo pr√≥prio Streamlit.
# As fun√ß√µes s√£o chamadas conforme o estado da sess√£o e as intera√ß√µes do usu√°rio.
# O c√≥digo abaixo √© apenas para garantir que o script seja executado como um app Streamlit.
if __name__ == "__main__":
    # Streamlit cuida do loop principal, n√£o precisamos de uma fun√ß√£o main tradicional
    # O c√≥digo fora das fun√ß√µes e no topo √© executado em cada rerun.
    # O fluxo √© controlado pelos ifs/elifs baseados em st.session_state.step
    pass # Nada a fazer aqui al√©m do que j√° est√° no corpo principal do script

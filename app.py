# -*- coding: utf-8 -*-
"""
Krateras üöÄ‚ú®üîí: O Especialista Rob√≥tico de Den√∫ncia de Buracos (v3.2 - Streamlit Interphase Edition Refined)

Bem-vindo √† vers√£o visual e aprimorada do Krateras, agora com um visual inspirado
no elegante template Interphase, com estilos CSS refinados para maior compatibilidade!

Tecnologias: Python, Streamlit, Google Gemini API (Vision & Pro), Google Geocoding API, ViaCEP, Google Street View Static API, CSS Custom.
Objetivo: Coletar dados estruturados e ricos de den√∫ncias de buracos, analisar texto E imagem
com IA, obter visualiza√ß√£o Street View, gerar relat√≥rios detalhados, priorizados e acion√°veis,
incluindo localiza√ß√£o visual em mapa, imagem Street View e resumo inteligente.

Com design arrojado e a mais alta tecnologia, vamos juntos consertar essas ruas!
Iniciando sistemas visuais, rob√≥ticos e de intelig√™ncia artificial...
"""

import streamlit as st
import requests
import google.generativeai as genai
from typing import Dict, Any, Optional, List
import re
import json
import pandas as pd
from PIL import Image # Para trabalhar com imagens carregadas pelo usu√°rio
import io # Para ler bytes da imagem carregada

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(
    page_title="Krateras üöÄ‚ú®üîí - Den√∫ncia de Buracos",
    page_icon="üöß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Estilos CSS Personalizados (Inspirado no Template Interphase - REFINADO) ---
# Definindo vari√°veis CSS para as cores principais do tema Interphase
st.markdown("""
<style>
    :root {
        --color-primary: #4A90E2; /* Azul principal (similar ao template) */
        --color-secondary: #A569BD; /* Roxo secund√°rio (adapta√ß√£o do template) */
        --color-text: #333; /* Cor de texto mais escura */
        --color-light-text: #555; /* Cor de texto um pouco mais clara */
        --color-background-light: #F8F9FA; /* Fundo claro para se√ß√µes */
        --color-background-mid: #E9ECEF; /* Fundo um pouco mais escuro para contraste */
        --color-border: #CED4DA; /* Cor de borda sutil */
        --color-success: #28A745; /* Verde Bootstrap */
        --color-warning: #FFC107; /* Amarelo Bootstrap */
        --color-error: #DC3545; /* Vermelho Bootstrap */
        --color-info: #17A2B8; /* Azul claro Bootstrap */
    }

    /* Importar fonte (Ex: Open Sans, popular em templates como o Interphase) */
    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap');

    html, body, [data-testid="stAppViewContainer"] {
        margin: 0;
        padding: 0;
        font-family: 'Open Sans', sans-serif;
        color: var(--color-text);
        background: linear-gradient(to bottom right, #4e54c8, #8f94fb) !important; /* Gradiente inspirado no template */
        background-attachment: fixed; /* Faz o gradiente cobrir a p√°gina inteira */
        min-height: 100vh; /* Garante que o background cubra a altura m√≠nima */
        width: 100%;
        overflow-x: hidden; /* Evita scroll horizontal devido ao background fixo */
    }


    /* Target the main content block within the view container */
    /* This selector is more likely to target the actual content area receiving padding and background */
     [data-testid="stAppViewContainer"] > .st-emotion-cache-xyz { /* Note: xyz part is unstable, may need adjustment */
          /* Attempting to target a common intermediate div */
         background-color: rgba(255, 255, 255, 0.95); /* Fundo semi-transparente para o conte√∫do */
         padding: 2rem 3rem;
         border-radius: 10px;
         box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
         margin-top: 2rem;
         margin-bottom: 2rem;
         max-width: 1000px; /* Limita a largura do conte√∫do como em templates */
         margin-left: auto;
         margin-right: auto;
         box-sizing: border-box; /* Include padding and border in the element's total width and height */
     }
    /* Fallback/alternative selector for the main content if the above doesn't work */
     [data-testid="stVerticalBlock"] {
          box-sizing: border-box !important;
          /* Ensure this block gets padding and centered if the parent selector failed */
          /* Test and adjust these styles if the above selector doesn't apply */
     }


     /* Ajuste para o sidebar se ele existir */
     [data-testid="stSidebar"] {
        background-color: rgba(255, 255, 255, 0.9); /* Fundo semi-transparente para o sidebar */
     }


    h1, h2, h3, h4 {
        color: var(--color-primary); /* T√≠tulos com a cor prim√°ria */
        font-weight: 700; /* Bold */
        margin-top: 1.5em;
        margin-bottom: 0.5em;
    }
    h1 { font-size: 2.5em; }
    h2 { font-size: 1.8em; }
    h3 { font-size: 1.4em; }
    h4 { font-size: 1.1em; }


    /* Bot√µes */
    /* Target base button container for consistency */
    [data-testid="baseButton-secondary"] button { /* Applies to st.button */
        background-color: var(--color-primary); /* Fundo com cor prim√°ria */
        color: white;
        font-weight: bold;
        border-radius: 25px; /* Mais arredondado */
        padding: 0.8rem 1.5rem; /* Padding maior */
        margin-top: 1.5rem; /* Margem maior */
        margin-right: 0.5rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        min-width: 150px; /* Ensure a minimum size */
        text-align: center;
    }
    [data-testid="baseButton-secondary"] button:hover {
        background-color: #3A7AD2; /* Um tone ligeiramente diferente no hover */
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
    }
    [data-testid="baseButton-secondary"] button:active {
         background-color: #2A5BA2;
         box-shadow: none;
    }
    /* Style for form submit button if it has a different testid */
     [data-testid="FormSubmitButton"] button {
         background-color: var(--color-secondary); /* Cor secund√°ria para submeter form */
         /* Inherits other styles from baseButton if applied correctly */
     }
     [data-testid="FormSubmitButton"] button:hover {
         background-color: #8E44AD; /* Darker secondary on hover */
     }


    /* Inputs de Texto, N√∫mero, √Årea de Texto */
    /* Target the input/textarea elements directly */
    input[type="text"], input[type="number"], textarea {
        border-radius: 5px;
        padding: 0.8rem 1rem; /* Padding interno */
        border: 1px solid var(--color-border);
        width: 100%; /* Ocupa largura total */
        box-sizing: border-box; /* Inclui padding na largura */
        margin-bottom: 0.5rem;
        transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
     input[type="text"]:focus, input[type="number"]:focus, textarea:focus {
         border-color: var(--color-primary); /* Borda prim√°ria no focus */
         box-shadow: 0 0 5px rgba(var(--color-primary-rgb, 74, 144, 226), 0.5); /* Sombra no focus */
         outline: none; /* Remove outline padr√£o */
     }
     /* Add rgb variables for shadow if needed */
     :root {
         --color-primary-rgb: 74, 144, 226;
     }


     /* Selectboxes e Radios */
     [data-testid="stSelectbox"] > div > div, [data-testid="stRadio"] > div {
         margin-bottom: 1rem;
     }
      [data-testid="stSelectbox"] > div > div > div { /* The box displaying selected value */
          border-radius: 5px;
          padding: 0.8rem 1rem;
          border: 1px solid var(--color-border);
          background-color: white;
          transition: border-color 0.2s ease-in-out;
      }
      [data-testid="stSelectbox"] > div > div:focus-within > div { /* Focus on selectbox */
          border-color: var(--color-primary);
      }
     [data-testid="stRadio"] label { /* Labels for radio buttons */
          margin-bottom: 0.5rem;
     }


    /* Feedback Boxes (Info, Success, Warning, Error) */
    /* These selectors are unstable! */
    .css-1aumqxt { border-left: 5px solid var(--color-info) !important; background-color: #E6F3FF; color: var(--color-light-text); border-radius: 5px; padding: 1rem; margin-bottom: 1rem;} /* st.info */
    .css-1r6cdft { border-left: 5px solid var(--color-warning) !important; background-color: #FFF8E1; color: var(--color-text); border-radius: 5px; padding: 1rem; margin-bottom: 1rem;} /* st.warning */
    .css-t9s6qg { border-left: 5px solid var(--color-error) !important; background-color: #FFEBEE; color: var(--color-text); border-radius: 5px; padding: 1rem; margin-bottom: 1rem;} /* st.error */
    .css-1u3jtzg { border-left: 5px solid var(--color-success) !important; background-color: #F1F8E9; color: var(--color-text); border-radius: 5px; padding: 1rem; margin-bottom: 1rem;} /* st.success */


    /* Spinners */
    .stSpinner > div > div {
        border-top-color: var(--color-primary) !important;
    }

    /* Expanders (Menus Sanfona - estilizados como blocos) */
    .streamlit-expanderHeader {
        font-size: 1.2em !important;
        font-weight: bold !important;
        color: var(--color-primary) !important;
        background-color: var(--color-background-light); /* Fundo claro */
        border-radius: 8px;
        padding: 1rem;
        margin-top: 2rem;
        border: 1px solid var(--color-border);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
        transition: all 0.2s ease-in-out;
    }
    .streamlit-expanderHeader:hover {
         background-color: var(--color-background-mid); /* Leve escurecimento no hover */
    }
    .streamlit-expanderContent {
         background-color: #FFFFFF; /* Fundo branco para o conte√∫do */
         padding: 1.5rem;
         border-left: 1px solid var(--color-border);
         border-right: 1px solid var(--color-border);
         border-bottom: 1px solid var(--color-border);
         border-radius: 0 0 8px 8px;
         margin-bottom: 1rem;
         box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08); /* Adiciona sombra tamb√©m no conte√∫do */
    }

    /* Separadores */
    hr {
        margin-top: 2em;
        margin-bottom: 2em;
        border: 0;
        border-top: 1px solid var(--color-border);
    }

    /* Imagem upload area */
    [data-testid="stFileUploader"] label {
        font-weight: bold;
        color: var(--color-light-text);
    }

    /* Centralizar imagens e mapas (using data-testid where available) */
     [data-testid="stImage"], [data-testid="stMap"], [data-testid="stDeckGlChart"] {
          display: block;
          margin-left: auto;
          margin-right: auto;
          max-width: 100%;
          margin-top: 1rem;
          margin-bottom: 1rem;
          border-radius: 8px; /* Arredonda cantos de imagens/mapas */
          overflow: hidden; /* Esconde partes fora do border-radius */
     }
     /* Ensure iframes inside components also respect max-width and are centered */
     [data-testid="stComponentsV1"] iframe {
          display: block;
          margin-left: auto;
          margin-right: auto;
          max-width: 100%;
          border-radius: 8px; /* Arredonda cantos do iframe */
          overflow: hidden;
     }


</style>
""", unsafe_allow_html=True)


# --- Inicializa√ß√£o de Estado da Sess√£o ---
# Gerencia o fluxo da aplica√ß√£o web e os dados coletados/processados
if 'step' not in st.session_state:
    st.session_state.step = 'start'
if 'denuncia_completa' not in st.session_state:
    st.session_state.denuncia_completa = {}
if 'api_keys_loaded' not in st.session_state:
    st.session_state.api_keys_loaded = False
if 'gemini_pro_model' not in st.session_state: # Modelo para texto
    st.session_state.gemini_pro_model = None
if 'gemini_vision_model' not in st.session_state: # Modelo para vis√£o
    st.session_state.gemini_vision_model = None
if 'geocoding_api_key' not in st.session_state:
    st.session_state.geocoding_api_key = None
if 'uploaded_image' not in st.session_state:
    st.session_state.uploaded_image = None
# Adicionado estado para Street View image data
if 'streetview_image_data' not in st.session_state:
    st.session_state.streetview_image_data = None


# --- üîë Gerenciamento de Chaves Secretas (Streamlit Secrets) ---
# Utiliza o .streamlit/secrets.toml para carregar chaves de forma segura

def load_api_keys() -> tuple[Optional[str], Optional[str]]:
    """
    Tenta obter as chaves de API do Google Gemini e Google Maps Geocoding de Streamlit Secrets.
    Retorna None se n√£o encontradas.
    """
    # Chaves definidas no .streamlit/secrets.toml
    gemini_key = st.secrets.get('GOOGLE_API_KEY') # Usada para Gemini-Pro e Gemini-Vision
    geocoding_key = st.secrets.get('geocoding_api_key') # Usada para Geocoding, Embed e Street View Static

    if not gemini_key:
        st.warning("‚ö†Ô∏è Segredo 'GOOGLE_API_KEY' n√£o encontrado nos Streamlit Secrets. Funcionalidades de IA do Gemini estar√£o desabilitadas.")
    if not geocoding_key:
        st.warning("‚ö†Ô∏è Segredo 'geocoding_api_key' n√£o encontrado nos Streamlit Secrets. Geocodifica√ß√£o autom√°tica, Visualiza√ß√£o Google Maps Embed e Street View Static estar√£o desabilitadas.")
        st.info("‚ÑπÔ∏è Para configurar os segredos, crie um arquivo `.streamlit/secrets.toml` na raiz do seu projeto Streamlit (se ainda n√£o existir a pasta `.streamlit`) com:\n```toml\nGOOGLE_API_KEY = \"SUA_CHAVE_GEMINI\"\ngeocoding_api_key = \"SUA_CHAVE_GEOCODING\"\n```\n**IMPORTANTE:** N√£o comite o arquivo `secrets.toml` para reposit√≥rios p√∫blicos no GitHub! O Streamlit Cloud tem uma interface segura para adicionar estes segredos.")
        st.info("‚ùó As APIs Google Maps (Geocoding, Embed, Street View Static) PODE gerar custos. Verifique a precifica√ß√£o do Google Cloud e habilite-as no seu projeto Google Cloud Platform (Console -> APIs & Services -> Library). O erro 'This API project is not authorized to use this API' geralmente significa que a API espec√≠fica n√£o est√° habilitada ou autorizada para a chave.")


    return gemini_key, geocoding_key

# --- Inicializar APIs (Cacheado para performance) ---

@st.cache_resource
def init_gemini_models(api_key: Optional[str]) -> tuple[Optional[genai.GenerativeModel], Optional[genai.GenerativeModel]]:
    """Inicializa os modelos Google Gemini (Pro e Vision) com cache."""
    if not api_key:
        return None, None # Retorna None para ambos se a chave n√£o for fornecida

    model_pro = None
    model_vision = None

    try:
        genai.configure(api_key=api_key)
        available_models = [m.name for m in genai.list_models()]

        # Inicializar Gemini-Pro (ou Flash) para texto
        preferred_text_models: list[str] = ['gemini-1.5-flash-latest', 'gemini-1.0-pro', 'gemini-pro']
        text_model_name: Optional[str] = None
        for pref_model in preferred_text_models:
            if f'models/{pref_model}' in available_models:
                text_model_name = pref_model
                break
            if pref_model in available_models:
                 text_model_name = pref_model
                 break

        if text_model_name:
             model_pro = genai.GenerativeModel(text_model_name)
             st.success(f"‚úÖ Conex√£o com Google Gemini (Texto) estabelecida usando modelo '{text_model_name}'.")
        else:
             st.warning("‚ö†Ô∏è Nenhum modelo de texto Gemini compat√≠vel encontrado na sua conta.")


        # Inicializar Gemini-Vision para an√°lise de imagem
        vision_model_name = 'gemini-pro-vision'
        if f'models/{vision_model_name}' in available_models or vision_model_name in available_models:
            model_vision = genai.GenerativeModel(vision_model_name)
            st.success(f"‚úÖ Conex√£o com Google Gemini (Vis√£o) estabelecida usando modelo '{vision_model_name}'.")
        else:
            st.warning(f"‚ö†Ô∏è Modelo Gemini Vision ('{vision_model_name}') n√£o encontrado ou compat√≠vel na sua conta. An√°lise de imagem desabilitada.")


        if model_pro or model_vision:
            st.info("A IA est√° online e pensativa!")

        return model_pro, model_vision

    except Exception as e:
        st.error(f"‚ùå ERRO no Painel de Controle Gemini: Falha na inicializa√ß√£o dos modelos Google Gemini. Verifique sua chave e status do servi√ßo.")
        st.exception(e)
        return None, None


# --- Fun√ß√µes de API Call (Cacheado para resultados est√°veis por sess√£o) ---

@st.cache_data(show_spinner="‚è≥ Interrogando o ViaCEP...")
def buscar_cep(cep: str) -> Dict[str, Any]:
    """Consulta a API ViaCEP para obter dados de endere√ßo com tratamento de erros."""
    cep_limpo = cep.replace("-", "").replace(".", "").strip()
    if len(cep_limpo) != 8 or not cep_limpo.isdigit():
        return {"erro": "Formato de CEP inv√°lido. Precisa de 8 d√≠gitos, amig√£o!"}

    url = f"https://viacep.com.br/ws/{cep_limpo}/json/"
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()
        if 'erro' in data and data['erro'] is True:
            return {"erro": f"CEP '{cep_limpo}' n√£o encontrado no ViaCEP. Ele se escondeu! üßê"}
        if not data.get('logradouro') or not data.get('localidade') or not data.get('uf'):
             return {"erro": f"CEP '{cep_limpo}' encontrado, mas os dados de endere√ßo est√£o incompletos. O ViaCEP s√≥ contou parte da hist√≥ria!"}
        return data
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao buscar o CEP '{cep_limpo}'. O ViaCEP n√£o responde! üò¥"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com o ViaCEP para o CEP '{cep_limpo}': {e}. Problemas na linha!"}
    except Exception as e:
         return {"erro": f"Ocorreu um erro inesperado ao buscar o CEP '{cep_limpo}': {e}. Isso n√£o estava nos meus manuais!"}

# A geocodifica√ß√£o √© chamada no fluxo principal, n√£o cacheada separadamente
def geocodificar_endereco(rua: str, numero: str, cidade: str, estado: str, api_key: str) -> Dict[str, Any]:
    """Tenta obter coordenadas geogr√°ficas e link Google Maps via Google Maps Geocoding API."""
    if not api_key:
        return {"erro": "Chave de API de Geocodifica√ß√£o n√£o fornecida."}
    if not rua or not numero or not cidade or not estado:
         return {"erro": "Dados de endere√ßo insuficientes (requer rua, n√∫mero, cidade, estado) para geocodificar."}

    address = f"{rua}, {numero}, {cidade}, {estado}"
    url = f"https://maps.googleapis.com/maps/api/geocode/json?address={requests.utils.quote(address)}&key={api_key}"

    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()

        if data['status'] != 'OK':
            status = data.get('status', 'STATUS DESCONHECIDO')
            error_msg = data.get('error_message', 'Sem mensagem adicional.')
            return {"erro": f"Geocodifica√ß√£o falhou. Status: {status}. Mensagem: {error_msg}"}
        if not data['results']:
             return {"erro": "Geocodifica√ß√£o falhou. Nenhum local exato encontrado para o endere√ßo fornecido."}

        location = data['results'][0]['geometry']['location']
        lat = location['lat']
        lng = location['lng']
        formatted_address = data['results'][0].get('formatted_address', address)

        # O link embed usa a mesma chave da Geocoding API, mas a Maps Embed API precisa estar habilitada
        google_embed_link = None
        if api_key: # Verifica se a chave existe antes de tentar gerar o link embed
             google_embed_link = f"https://www.google.com/maps/embed/v1/place?key={api_key}&q={lat},{lng}"

        return {
            "latitude": lat,
            "longitude": lng,
            "endereco_formatado_api": formatted_address,
            "google_maps_link_gerado": f"https://www.google.com/maps/search/?api=1&query={lat},{lng}",
            "google_embed_link_gerado": google_embed_link # Pode ser None se chave faltar/API desabilitada
        }
    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao tentar geocodificar: {address}"}
    except requests.exceptions.RequestException as e:
        return {"erro": f"Erro na comunica√ß√£o com a API de Geocodifica√ß√£o: {address}. Detalhes: {e}"}
    except Exception as e:
        return {"erro": f"Ocorreu um erro inesperado durante a geocodifica√ß√£o: {address}. Detalhes: {e}"}

# --- Fun√ß√£o: Obter Imagem Street View ---
@st.cache_data(show_spinner="üì∏ Obtendo imagem Street View do local...")
def get_street_view_image(lat: float, lon: float, api_key: Optional[str], size: str = "600x400", heading: int = 0) -> Dict[str, Any]:
    """
    Tenta obter uma imagem Street View est√°tica para as coordenadas fornecidas.
    Retorna os bytes da imagem ou um dicion√°rio de erro.
    """
    if not api_key:
        return {"erro": "Chave de API de Geocodifica√ß√£o/Street View n√£o fornecida."}

    # Construir a URL da Street View Static API
    location = f"{lat},{lon}"
    # Usamos um heading fixo (0=Norte) como padr√£o. Ajuste se necess√°rio.

    url = f"https://maps.googleapis.com/maps/api/streetview?size={size}&location={location}&heading={heading}&key={api_key}"

    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status() # Lan√ßa exce√ß√£o para status de erro (4xx ou 5xx)

        # A API Street View Static retorna uma imagem ou um erro 400/500 (404 para no coverage)
        if response.content and response.headers.get('Content-Type', '').startswith('image'):
             return {"image_bytes": response.content}
        else:
             try:
                  # Tenta ler o conte√∫do como texto para mensagens de erro da API
                  error_text = response.text
                  if "No Street View images found" in error_text:
                      return {"erro": "Nenhuma imagem Street View encontrada para este local (Falta de cobertura?)."}
                  elif response.status_code == 403: # Forbidden - Chave n√£o autorizada ou API n√£o habilitada
                       return {"erro": f"Erro 403 (Forbidden): A chave de API n√£o est√° autorizada a usar a Street View Static API. Verifique se a 'Street View Static API' est√° habilitada e autorizada para sua chave no Google Cloud."}
                  else:
                      return {"erro": f"Resposta da API Street View n√£o √© uma imagem. Status: {response.status_code}. Conte√∫do: {error_text[:200]}..."}
             except Exception:
                  return {"erro": f"Resposta da API Street View inesperada. Status: {response.status_code}. (N√£o foi poss√≠vel ler o conte√∫do como texto)."}


    except requests.exceptions.Timeout:
         return {"erro": f"Tempo limite excedido ({15}s) ao obter Street View para {location}."}
    except requests.exceptions.RequestException as e:
        # Captura 404 (Not Found) que geralmente significa sem cobertura Street View
        if e.response is not None and e.response.status_code == 404:
             return {"erro": "Nenhuma imagem Street View encontrada para este local (Erro 404 - Sem cobertura?)."}
        elif e.response is not None and e.response.status_code == 403:
             return {"erro": f"Erro 403 (Forbidden): A chave de API n√£o est√° autorizada a usar a Street View Static API. Verifique se a 'Street View Static API' est√° habilitada e autorizada para sua chave no Google Cloud."}
        else:
             return {"erro": f"Erro na comunica√ß√£o com a API Street View para {location}: {e}. Problemas na linha!"}
    except Exception as e:
         return {"erro": f"Ocorreu um erro inesperado durante a obten√ß√£o de Street View para {location}: {e}. Isso n√£o estava nos meus manuais!"}


# --- Fun√ß√µes de An√°lise de IA (Cacheado para resultados est√°veis por sess√£o, exceto an√°lise de imagem) ---
# Safety settings configuradas para permitir discuss√µes sobre perigos na rua
SAFETY_SETTINGS = [
    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
    {"category": "SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
    {"category": "DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
]

# N√£o cachear a an√°lise de imagem diretamente aqui, ser√° chamada no fluxo principal se houver imagem
def analyze_image_with_gemini_vision(image_bytes: bytes, model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini Vision para analisar uma imagem e extrair caracter√≠sticas do buraco."""
    if not model:
        return {"image_analysis": "ü§ñ An√°lise de imagem via IA indispon√≠vel (Motor Gemini Vision offline)."}
    if not image_bytes:
         return {"image_analysis": "üîç Nenhuma imagem fornecida para an√°lise de IA."}

    try:
        # O Gemini Vision aceita bytes da imagem
        image_parts = [{"mime_type": "image/jpeg", "data": image_bytes}] # Assumindo que a imagem √© JPG/JPEG

        prompt = [
            "Analise a imagem fornecida de um buraco em uma estrada. Descreva as caracter√≠sticas vis√≠veis relevantes para um relat√≥rio de reparo de estrada. Concentre-se em:",
            "- Tamanho estimado (pequeno, m√©dio, grande, di√¢metro em rela√ß√£o a objetos comuns se vis√≠vel)",
            "- Profundidade estimada (raso, fundo, em rela√ß√£o a objetos vis√≠veis)",
            "- Presen√ßa de √°gua ou umidade",
            "- Quaisquer perigos vis√≠veis √≥bvios ou pistas de contexto na vizinhan√ßa imediata do pr√≥prio buraco (por exemplo, pavimento rachado ao redor, detritos)",
            "Forne√ßa uma an√°lise textual concisa baseada EXCLUSIVAMENTE no conte√∫do da imagem.",
            image_parts[0] # Adiciona a imagem ao prompt
        ]

        response = model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)

        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"image_analysis": f"‚ùå An√°lise de imagem bloqueada pelos protocolos de seguran√ßa do Gemini Vision. Motivo: {block_reason}"}

        return {"image_analysis": response.text.strip()}
    except Exception as e:
        return {"image_analysis": f"‚ùå Erro ao analisar a imagem com IA: {e}"}


@st.cache_data(show_spinner="üß† Executando an√°lise profunda dos dados do buraco com IA Gemini...")
def analisar_dados_com_gemini(_dados_buraco: Dict[str, Any], _image_analysis_ia: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini (texto) para analisar dados estruturados, observa√ß√µes e an√°lise de imagem."""
    if not _model:
        return {"insights": "ü§ñ An√°lise de dados via IA indispon√≠vel (Motor Gemini Texto offline)."}

    # Formatar os dados estruturados e observa√ß√µes para o prompt
    structured_details = _dados_buraco.get('structured_details', {})
    observacoes_adicionais = _dados_buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')

    structured_text = "Detalhes Estruturados Fornecidos pelo Usu√°rio:\n"
    for key, value in structured_details.items():
         # Trata listas (como perigos) para um formato leg√≠vel
         if isinstance(value, list):
              value_str = ", ".join(value) if value else "Nenhum selecionado"
         else:
              value_str = value if value else "N√£o informado"
         # Traduz as chaves para o prompt de forma mais amig√°vel (manter consist√™ncia com os inputs)
         key_translated = {
             'tamanho': 'Tamanho Estimado',
             'perigo': 'N√≠vel de Perigo',
             'profundidade': 'Profundidade Estimada',
             'presenca_agua': 'Presen√ßa de √Ågua',
             'contexto': 'Contexto/Hist√≥rico',
             'perigos_detalhados': 'Perigos e Impactos Detalhados (Selecionados)',
             'identificadores_visuais': 'Identificadores Visuais Adicionais',
         }.get(key, key) # Usa a chave original se n√£o houver tradu√ß√£o

         # S√≥ adiciona ao texto se o valor n√£o for o padr√£o "N√£o Informado" ou vazio (para texto libre)
         if value and value != 'N√£o Informado':
             structured_text += f"- {key_translated}: {value_str}\n"
         elif isinstance(value, list) and value:
             structured_text += f"- {key_translated}: {value_str}\n"


    if structured_text == "Detalhes Estruturados Fornecidos pelo Usu√°rio:\n":
         structured_text += "Nenhum detalhe estruturado relevante informado pelo usu√°rio."


    # Adiciona a an√°lise de imagem ao contexto da IA, se dispon√≠vel
    image_analysis_text = _image_analysis_ia.get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel ou com erro.')
    if "An√°lise de imagem via IA indispon√≠vel" in image_analysis_text or "Nenhuma imagem fornecida" in image_analysis_text or "Erro ao analisar a imagem" in image_analysis_text:
         image_context = "Nota: An√°lise de imagem do usu√°rio n√£o foi realizada ou est√° indispon√≠vel."
    else:
         image_context = f"Insights da An√°lise de Imagem do Usu√°rio (IA Gemini Vision):\n{image_analysis_text}"


    prompt = f"""
    Analise os seguintes dados estruturados, observa√ß√µes adicionais e (se dispon√≠vel) a an√°lise de uma imagem carregada pelo usu√°rio, todos relacionados a uma den√∫ncia de um buraco em uma rua. Seu objetivo √© extrair insights CRUCIAIS e gerar uma an√°lise detalhada objetiva para um sistema de reparo p√∫blico.

    {structured_text}

    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"

    {image_context}

    Com base NESTAS informa√ß√µes (estruturadas, observa√ß√µes e an√°lise de imagem do usu√°rio), gere uma an√°lise detalhada. Formate a sa√≠da como texto claro, usando marcadores (-) ou t√≠tulos. Se uma categoria N√ÉO PUDER ser confirmada com ALTA CONFIAN√áA pelas informa√ß√µes fornecidas, indique "N√£o especificado/inferido".

    Categorias para An√°lise Detalhada:
    - Severidade/Tamanho Consolidado (Baseado em dados estruturados, observa√ß√µes e imagem): [Ex: Pequeno, M√©dio, Grande, Enorme, Cr√≠tico. Comente se os inputs divergem ou refor√ßam a mesma conclus√£o.]
    - Profundidade Consolidada: [Ex: Raso, Fundo, Muito Fundo. Comente se os inputs divergem ou refor√ßam.]
    - Presen√ßa de √Ågua/Alagamento (Confirmado pelos inputs): [Sim/N√£o/N√£o mencionado/N√£o confirmado.]
    - Perigos Potenciais e Impactos Consolidado: [Liste riscos espec√≠ficos citados nos inputs estruturados, observa√ß√µes e/ou vis√≠veis na imagem. Consolide e destaque os mais graves.]
    - Contexto Adicional Relevante Consolidado: [Problema recorrente/antigo/novo, perto de local importante, em via movimentada, em curva, etc., conforme os inputs.]
    - Identificadores Visuais Adicionais (Conforme input): [Detalhes √∫nicos pr√≥ximos que ajudam a achar o buraco.]
    - Palavras-chave Principais: [Liste 3-7 palavras-chave que capturem a ess√™ncia da den√∫ncia e o problema principal.]

    Formate a resposta de forma limpa e estruturada.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"insights": f"‚ùå An√°lise de dados bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"insights": response.text.strip()}
    except Exception as e:
        return {"insights": f"‚ùå Erro ao analisar os dados com IA: {e}"}


@st.cache_data(show_spinner="üß† Calculando o N√≠vel de Prioridade Rob√≥tica para esta den√∫ncia...")
def categorizar_urgencia_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para sugerir uma categoria de urg√™ncia com base em todos os dados e insights."""
    if not _model:
        return {"urgencia_ia": "ü§ñ Sugest√£o de urg√™ncia via IA indispon√≠vel (Motor Gemini Texto offline)."}

    # Acessa todos os dados relevantes do dicion√°rio completo
    buraco = _dados_denuncia_completa.get('buraco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')
    image_analysis_text = _dados_denuncia_completa.get('image_analysis_ia', {}).get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel.')
    insights_text = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise detalhada n√£o dispon√≠vel.')

    localizacao_exata = _dados_denuncia_completa.get('localizacao_exata_processada', {})
    tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
    loc_contexto = f"Localiza√ß√£o informada: Tipo: {tipo_loc}."
    if tipo_loc in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
        loc_contexto += f" Coordenadas: {localizacao_exata.get('latitude')}, {localizacao_exata.get('longitude')}. Link: {localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')}."
    elif tipo_loc == 'Descri√ß√£o Manual Detalhada':
        loc_contexto += f" Descri√ß√£o Manual: '{localizacao_exata.get('descricao_manual', 'N√£o informada')}'."
    if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
         loc_contexto += f" (Nota: Tentativa de Geocodifica√ß√£o autom√°tica falhou/n√£o tentada: {localizacao_exata.get('motivo_falha_geocodificacao_anterior', 'Motivo desconhecido')})"


    # Formatar os detalhes estruturados para o prompt de urg√™ncia
    structured_urgency_factors = []
    if structured_details.get('tamanho') and structured_details['tamanho'] != 'N√£o Informado': structured_urgency_factors.append(f"Tamanho Estimado (User): {structured_details['tamanho']}")
    if structured_details.get('profundidade') and structured_details['profundidade'] != 'N√£o Informado': structured_urgency_factors.append(f"Profundidade Estimada (User): {structured_details['profundidade']}")
    if structured_details.get('perigo') and structured_details['perigo'] != 'N√£o Informado': structured_urgency_factors.append(f"N√≠vel de Perigo (User): {structured_details['perigo']}")
    if structured_details.get('presenca_agua') and structured_details['presenca_agua'] != 'N√£o Informado': structured_urgency_factors.append(f"Presen√ßa de √Ågua (User): {structured_details['presenca_agua']}")
    if structured_details.get('perigos_detalhados'): structured_urgency_factors.append(f"Perigos Detalhados (User): {', '.join(structured_details['perigos_detalhados'])}")
    if structured_details.get('contexto') and structured_details['contexto'] != 'N√£o Informado': structured_urgency_factors.append(f"Contexto/Hist√≥rico (User): {structured_details['contexto']}")
    structured_urgency_text = "Detalhes Estruturados: " + ("; ".join(structured_urgency_factors) if structured_urgency_factors else "Nenhum informado pelo usu√°rio.")


    prompt = f"""
    Com base nas informa√ß√µes completas da den√∫ncia (detalhes estruturados, observa√ß√µes, an√°lise de imagem, an√°lise detalhada) e na localiza√ß√£o, sugira a MELHOR categoria de urg√™ncia para o reparo deste buraco.
    Considere a severidade/tamanho, profundidade, PERIGOS POTENCIAIS e impactos mencionados/vis√≠veis, e qualquer CONTEXTO ADICIONAL relevante (como ser recorrente, em √°rea de alto tr√°fego/risco, perto de local importante). D√™ peso especial aos PERIGOS mencionados ou vis√≠veis na imagem ou descri√ß√£o. Use as informa√ß√µes mais confi√°veis dispon√≠veis (input estruturado > an√°lise de imagem > observa√ß√µes/an√°lise detalhada, em geral).

    Escolha UMA Categoria de Urg√™ncia entre estas:
    - Urg√™ncia Baixa: Buraco pequeno, sem perigo aparente, em local de baixo tr√°fego. Principalmente est√©tico ou pequeno inc√¥modo.
    - Urg√™ncia M√©dia: Tamanho razo√°vel, pode causar leve inc√¥modo ou dano menor (ex: pneu furado leve), em via secund√°ria ou com tr√°fego moderado. Requer reparo em prazo razo√°vel.
    - Urg√™ncia Alta: Buraco grande, profundo, perigo CLARO e/ou frequente (risco de acidente mais s√©rio, dano significativo a ve√≠culo, perigo para motos/bikes/pedestres), em via movimentada ou √°rea de risco (escola, hospital). Requer aten√ß√£o R√ÅPIDA, possivelmente em poucos dias.
    - Urg√™ncia Imediata/Cr√≠tica: Buraco ENORME/muito profundo que causa acidentes CONSTANTES ou representa risco GRAVE e iminente a ve√≠culos ou pessoas (ex: cratera na pista principal), afeta severamente a fluidez ou acessibilidade. Requer interven√ß√£o de EMERG√äNCIA (horas/poucas horas).

    Informa√ß√µes Relevantes da Den√∫ncia para Urg√™ncia:
    Localiza√ß√£o B√°sica do Buraco: Rua {buraco.get('endereco', {}).get('rua', 'N√£o informada')}, N√∫mero Pr√≥ximo/Refer√™ncia: {buraco.get('numero_proximo', 'N√£o informado')}. Cidade: {buraco.get('endereco', {}).get('cidade_buraco', 'N√£o informada')}. {loc_contexto}
    {structured_urgency_text}
    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"
    Insights da An√°lise Detalhada de IA: {insights_text}
    Insights da An√°lise de Imagem (se dispon√≠vel): {image_analysis_text}

    Com base nestes dados consolidados, qual categoria de urg√™ncia voc√™ sugere? Forne√ßa APENAS a categoria (ex: "Urg√™ncia Alta") e uma breve JUSTIFICATIVA (m√°ximo 3 frases) explicando POR QUE essa categoria foi sugerida, citando os elementos mais relevantes (tamanho, perigo, contexto, etc.) dos inputs ou an√°lises que justificam a urg√™ncia.

    Formato de sa√≠da (muito importante seguir este formato):
    Categoria Sugerida: [Categoria Escolhida]
    Justificativa: [Justificativa Breve]
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"urgencia_ia": f"‚ùå Sugest√£o de urg√™ncia bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"urgencia_ia": response.text.strip()}
    except Exception as e:
        return {"urgencia_ia": f"‚ùå Erro ao sugerir urg√™ncia com IA: {e}"}


@st.cache_data(show_spinner="üß† IA est√° pensando... Qual pode ser a causa e a melhor a√ß√£o para este buraco?")
def sugerir_causa_e_acao_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para sugerir poss√≠veis causas do buraco e a√ß√µes de reparo com base nos dados e insights."""
    if not _model:
        return {"sugestao_acao_ia": "ü§ñ Sugest√µes de causa/a√ß√£o via IA indispon√≠veis (Motor Gemini Texto offline)."}

    # Acessa todos os dados relevantes
    buraco = _dados_denuncia_completa.get('buraco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')
    image_analysis_text = _dados_denuncia_completa.get('image_analysis_ia', {}).get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel.')
    insights_text = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise detalhada n√£o dispon√≠vel.')

    structured_action_factors = []
    if structured_details.get('tamanho') and structured_details['tamanho'] != 'N√£o Informado': structured_action_factors.append(f"Tamanho Estimado (User): {structured_details['tamanho']}")
    if structured_details.get('profundidade') and structured_details['profundidade'] != 'N√£o Informado': structured_action_factors.append(f"Profundidade Estimada (User): {structured_details['profundidade']}")
    if structured_details.get('presenca_agua') and structured_details['presenca_agua'] != 'N√£o Informado': structured_action_factors.append(f"Presen√ßa de √Ågua (User): {structured_details['presenca_agua']}")
    if structured_details.get('contexto') and structured_details['contexto'] != 'N√£o Informado': structured_action_factors.append(f"Contexto/Hist√≥rico (User): {structured_details['contexto']}")
    structured_action_text = "Detalhes Estruturados: " + ("; ".join(structured_action_factors) if structured_action_factors else "Nenhum informado pelo usu√°rio.")


    prompt = f"""
    Com base nas informa√ß√µes completas da den√∫ncia (dados estruturados, observa√ß√µes, an√°lise de imagem e insights), tente sugerir:
    1. Uma ou duas P√ìSSIVEIS CAUSAS para a forma√ß√£o deste buraco espec√≠fico. Baseie-se em pistas nos inputs (ex: se √© recorrente, se choveu muito - se mencionado nas observa√ß√µes/insights/imagem -, desgaste vis√≠vel na imagem, etc.). Seja especulativo, mas baseado nos dados.
    2. Sugest√µes de TIPOS DE A√á√ÉO ou REPARO mais adequados ou necess√°rios para resolver este problema. Baseie-se na severidade, profundidade, perigos e contexto. (ex: simples tapa-buraco, recapeamento da se√ß√£o, inspe√ß√£o de drenagem, sinaliza√ß√£o de emerg√™ncia, interdi√ß√£o parcial da via).

    Baseie suas sugest√µes nos dados fornecidos. Se a informa√ß√£o for insuficiente, indique "N√£o especificado/inferido nos dados".

    Informa√ß√µes Relevantes para Causa e A√ß√£o:
    {structured_action_text}
    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"
    Insights da An√°lise Detalhada de IA: {insights_text}
    Insights da An√°lise de Imagem (se dispon√≠vel): {image_analysis_text}

    Formato de sa√≠da:
    Poss√≠veis Causas Sugeridas: [Lista de causas sugeridas baseadas nos dados ou 'N√£o especificado/inferido']
    Sugest√µes de A√ß√£o/Reparo Sugeridas: [Lista de a√ß√µes sugeridas baseadas nos dados ou 'N√£o especificado/inferido']
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"sugestao_acao_ia": f"‚ùå Sugest√£o de causa/acao bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"sugestao_acao_ia": response.text.strip()}
    except Exception as e:
        return {"sugestao_acao_ia": f"‚ùå Erro ao sugerir causa/a√ß√£o com IA: {e}"}


@st.cache_data(show_spinner="üß† Compilando o Relat√≥rio Final Rob√≥tico e Inteligente com IA Gemini...")
def gerar_resumo_completo_gemini(_dados_denuncia_completa: Dict[str, Any], _model: genai.GenerativeModel) -> Dict[str, Any]:
    """Utiliza o Gemini para gerar um resumo narrativo inteligente da den√∫ncia completa."""
    if not _model:
        return {"resumo_ia": "ü§ñ Resumo inteligente via IA indispon√≠vel (Motor Gemini Texto offline)."}

    # Acessa todos os dados coletados e resultados das IAs
    denunciante = _dados_denuncia_completa.get('denunciante', {})
    buraco = _dados_denuncia_completa.get('buraco', {})
    endereco = buraco.get('endereco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Sem observa√ß√µes adicionais.')
    localizacao_exata = _dados_denuncia_completa.get('localizacao_exata_processada', {})

    image_analysis_text = _dados_denuncia_completa.get('image_analysis_ia', {}).get('image_analysis', 'An√°lise de imagem n√£o dispon√≠vel.')
    insights_ia = _dados_denuncia_completa.get('insights_ia', {}).get('insights', 'An√°lise detalhada n√£o dispon√≠vel ou com erro.')
    urgencia_ia_text = _dados_denuncia_completa.get('urgencia_ia', {}).get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o dispon√≠vel ou com erro.')
    sugestao_acao_ia_text = _dados_denuncia_completa.get('sugestao_acao_ia', {}).get('sugestao_acao_ia', 'Sugest√µes de causa/a√ß√£o n√£o dispon√≠veis ou com erro.')
    streetview_status = _dados_denuncia_completa.get('streetview_image_data', {}).get('erro', 'OK') # Verifica se teve erro na Street View


    # Formatar a string de localiza√ß√£o para o resumo
    loc_info_resumo = "Localiza√ß√£o exata n√£o especificada ou processada."
    tipo_loc_processada = localizacao_exata.get('tipo', 'N√£o informada')

    if tipo_loc_processada in ['Coordenadas Fornecidas/Extra√≠das Manualmente', 'Geocodificada (API)', 'Coordenadas Extra√≠das de Link (Manual)']:
         lat = localizacao_exata.get('latitude')
         lon = localizacao_exata.get('longitude')
         link_gerado = localizacao_exata.get('google_maps_link_gerado', 'N√£o dispon√≠vel')
         loc_info_resumo = f"Localiza√ß√£o: Coordenadas {lat}, {lon} (Obtida via: {tipo_loc_processada.replace(' (API)', ' API').replace('Manual', 'Manual').replace('Fornecidas/Extra√≠das', 'Manual')}). Link Google Maps: {link_gerado}."
         # N√£o inclui input original aqui para manter o resumo mais limpo, j√° que est√° no relat√≥rio completo

    elif tipo_loc_processada == 'Descri√ß√£o Manual Detalhada':
         loc_info_resumo = f"Localiza√ß√£o via descri√ß√£o manual detalhada: '{localizacao_exata.get('descricao_manual', 'N√£o informada')}'."

    elif localizacao_exata.get('input_original') and tipo_loc_processada == 'N√£o informada':
         loc_info_resumo = f"Localiza√ß√£o informada (tipo n√£o detectado): '{localizacao_exata.get('input_original')}'."

    # N√£o inclui motivo da falha da geocodifica√ß√£o no resumo para concis√£o, mas est√° no relat√≥rio completo.

    # Formatar os detalhes estruturados para inclus√£o no resumo
    structured_summary_items = []
    if structured_details.get('tamanho') and structured_details['tamanho'] != 'N√£o Informado': structured_summary_items.append(f"Tamanho: {structured_details['tamanho']}")
    if structured_details.get('profundidade') and structured_details['profundidade'] != 'N√£o Informado': structured_summary_items.append(f"Profundidade: {structured_details['profundidade']}")
    if structured_details.get('perigo') and structured_details['perigo'] != 'N√£o Informado': structured_summary_items.append(f"Perigo: {structured_details['perigo']}")
    if structured_details.get('presenca_agua') and structured_details['presenca_agua'] != 'N√£o Informado': structured_summary_items.append(f"√Ågua: {structured_details['presenca_agua']}")
    if structured_details.get('perigos_detalhados'): structured_summary_items.append(f"Perigos Espec√≠ficos: {', '.join(structured_details['perigos_detalhados'])}")
    if structured_details.get('contexto') and structured_details['contexto'] != 'N√£o Informado': structured_summary_items.append(f"Contexto: {structured_details['contexto']}")
    if structured_details.get('identificadores_visuais'): structured_summary_items.append(f"Identificadores Visuais: {structured_details['identificadores_visuais']}")

    structured_summary_text = " / ".join(structured_summary_items) if structured_summary_items else "Detalhes estruturados n√£o fornecidos."

    # Adicionar informa√ß√£o sobre Street View ao resumo
    streetview_summary = ""
    if streetview_status == 'OK':
         streetview_summary = " Imagem Street View do local obtida."
    elif "Nenhuma imagem Street View encontrada" in streetview_status or "Sem cobertura" in streetview_status:
         streetview_summary = " Sem cobertura Street View dispon√≠vel para o local."
    elif "Erro" in streetview_status:
         streetview_summary = " Falha ao obter imagem Street View do local."


    prompt = f"""
    Gere um resumo narrativo conciso (m√°ximo 8-10 frases) para a seguinte den√∫ncia de buraco no aplicativo Krateras.
    Este resumo deve ser formal, objetivo e √∫til para equipes de manuten√ß√£o ou gest√£o p√∫blica.
    Combine os dados do denunciante, detalhes estruturados do buraco, observa√ß√µes adicionais, localiza√ß√£o exata processada e os resultados de TODAS as an√°lises de IA (an√°lise de imagem, an√°lise detalhada, urg√™ncia, causa/a√ß√£o). Mencione brevemente o status da imagem Street View.

    Inclua:
    - Denunciante (Nome, Cidade de Resid√™ncia).
    - Localiza√ß√£o base (Rua, N¬∫ Pr√≥ximo/Refer√™ncia, Cidade do Buraco, Estado do Buraco).
    - Localiza√ß√£o EXATA processada (mencione como foi obtida e os dados relevantes).
    - Resumo dos DETALHES ESTRUTURADOS e Observa√ß√µes Adicionais.
    - Breve resumo da AN√ÅLISE DE IMAGEM (se dispon√≠vel).
    - Principais pontos da AN√ÅLISE DETALHADA.
    - A SUGEST√ÉO de Categoria de Urg√™ncia pela IA e sua Justificativa.
    - As SUGEST√ïES de POSS√çVEIS CAUSAS e TIPOS DE A√á√ÉO/REPARO sugeridas pela IA (se dispon√≠veis).
    - Status da imagem Street View.

    Dados da Den√∫ncia Completa:
    Denunciante: {denunciante.get('nome', 'N√£o informado')}, de {denunciante.get('cidade_residencia', 'N√£o informada')}.
    Endere√ßo do Buraco (Base): Rua {endereco.get('rua', 'N√£o informada')}, N¬∫ Pr√≥ximo: {buraco.get('numero_proximo', 'N√£o informado')}. Cidade: {endereco.get('cidade_buraco', 'N√£o informada')}, Estado: {endereco.get('estado_buraco', 'N√£o informado')}. CEP: {buraco.get('cep_informado', 'N√£o informado') if buraco.get('cep_informado') else 'N√£o informado'}.
    Lado da Rua: {buraco.get('lado_rua', 'N√£o informado')}.
    Localiza√ß√£o Exata Coletada: {loc_info_resumo}
    Detalhes Estruturados do Buraco: {structured_summary_text}
    Observa√ß√µes Adicionais do Usu√°rio: "{observacoes_adicionais}"

    Insights da An√°lise de Imagem (se dispon√≠vel): {image_analysis_text}
    Insights da An√°lise Detalhada (IA Texto): {insights_ia}
    Sugest√£o de Urg√™ncia (IA Texto): {urgencia_ia_text}
    Sugest√µes de Causa e A√ß√£o (IA Texto): {sugestao_acao_ia_text}
    Status Street View: {streetview_status}


    Gere o resumo em portugu√™s. Comece com "Relat√≥rio Krateras: Den√∫ncia de buraco..." ou algo similar. Use linguagem clara, formal e direta, focando nas informa√ß√µes mais relevantes para a a√ß√£o de reparo.
    """
    try:
        response = _model.generate_content(prompt, safety_settings=SAFETY_SETTINGS)
        if not hasattr(response, 'candidates') or not response.candidates:
             block_reason = "Desconhecido"
             if hasattr(response, 'prompt_feedback') and hasattr(response.prompt_feedback, 'block_reason'):
                 block_reason = response.prompt_feedback.block_reason.name
             return {"resumo_ia": f"‚ùå Gera√ß√£o de resumo bloqueada pelos protocolos de seguran√ßa do Gemini. Motivo: {block_reason}"}

        return {"resumo_ia": response.text.strip()}
    except Exception as e:
        return {"resumo_ia": f"‚ùå Erro ao gerar resumo completo com IA: {e}"}


# --- Fun√ß√µes de Navega√ß√£o e Renderiza√ß√£o de UI ---

def next_step():
    """Avan√ßa para o pr√≥ximo passo no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep',
        'collect_buraco_address_manual',
        'collect_buraco_details', # Esta etapa coleta o resto dos dados, foto e localiza√ß√£o manual se geocoding falhar
        'processing_ia', # Nova etapa unificada para todas as an√°lises IA (imagem + texto) E obten√ß√£o Street View
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index < len(steps) - 1:
            st.session_state.step = steps[current_index + 1]
            st.rerun()
    except ValueError:
        st.session_state.step = steps[0]
        st.rerun()

def prev_step():
    """Volta para o passo anterior no fluxo da aplica√ß√£o."""
    steps = [
        'start',
        'collect_denunciante',
        'collect_buraco_address_method',
        'collect_buraco_address_cep',
        'collect_buraco_address_manual',
        'collect_buraco_details',
        'processing_ia',
        'show_report'
    ]
    try:
        current_index = steps.index(st.session_state.step)
        if current_index > 0:
             # L√≥gica para pular passos de CEP/Manual se n√£o foram usados ao voltar de 'collect_buraco_details'
             if st.session_state.step == 'collect_buraco_details':
                  if st.session_state.get('endereco_coletado_via') == 'cep':
                      st.session_state.step = 'collect_buraco_address_cep'
                  elif st.session_state.get('endereco_coletado_via') == 'manual':
                      st.session_state.step = 'collect_buraco_address_manual'
                  else: # Fallback seguro
                       st.session_state.step = steps[current_index - 1]
             elif st.session_state.step in ['collect_buraco_address_cep', 'collect_buraco_address_manual']:
                  st.session_state.step = 'collect_buraco_address_method'
             else:
                  st.session_state.step = steps[current_index - 1]

             st.rerun()
    except ValueError:
         st.session_state.step = steps[0]
         st.rerun()

# --- Layout Principal da Aplica√ß√£o ---

st.title("Krateras üöÄ‚ú®üîí")
st.subheader("O Especialista Rob√≥tico de Den√∫ncia de Buracos")

# --- Fluxo da Aplica√ß√£o baseado no Estado ---

if st.session_state.step == 'start':
    st.write("""
    Ol√°! Krateras v3.2 entrando em √≥rbita! Sua miss√£o, caso aceite: denunciar buracos na rua
    para que possam ser consertados. A seguran√ßa dos seus dados e a precis√£o da den√∫ncia
    s√£o nossas prioridades m√°ximas.

    Utilizamos intelig√™ncia artificial avan√ßada (Google Gemini Pro para texto e Gemini Vision
    para an√°lise de imagem) e APIs de localiza√ß√£o (Google Geocoding, ViaCEP, Street View Static)
    para coletar, analisar, obter visualiza√ß√£o do local e gerar um relat√≥rio detalhado e acion√°vel
    para as autoridades competentes.

    Fui criado com o que h√° de mais avan√ßado em Programa√ß√£o, IA, Design Inteligente,
    Matem√°tica e L√≥gica Inabal√°vel. Com acesso seguro √†s APIs, sou impar√°vel.

    Clique em Iniciar para come√ßarmos a coleta de dados.
    """)

    st.info("‚ö†Ô∏è Suas chaves de API do Google (Gemini e Geocoding/Embed/Street View Static) devem ser configuradas nos Streamlit Secrets (`.streamlit/secrets.toml`) para que as funcionalidades de IA, geocodifica√ß√£o e visualiza√ß√µes no mapa funcionem corretamente e de forma segura. Consulte o `README.md` ou as instru√ß√µes ao lado para mais detalhes.")


    if st.button("Iniciar Miss√£o Den√∫ncia!"):
        # Carregar chaves e inicializar APIs antes de coletar dados
        gemini_api_key, geocoding_api_key = load_api_keys()
        st.session_state.geocoding_api_key = geocoding_api_key # Armazena a chave de geocoding no estado
        st.session_state.gemini_pro_model, st.session_state.gemini_vision_model = init_gemini_models(gemini_api_key) # Inicializa os modelos Gemini (cacheados)
        st.session_state.api_keys_loaded = True # Marca que tentamos carregar as chaves
        next_step()

elif st.session_state.step == 'collect_denunciante':
    st.header("--- üë§ Dados do Her√≥i/Hero√≠na da Vez! ---")
    st.write("Sua contribui√ß√£o √© super valiosa! üí™")

    # Formul√°rio para coletar dados do denunciante
    with st.form("form_denunciante"):
        nome = st.text_input("Seu nome completo:", key='nome_denunciante_input') # Added _input to avoid state key collision
        idade = st.number_input("Sua idade (aproximada, se preferir, sem press√£o üòâ):", min_value=1, max_value=120, value=30, key='idade_denunciante_input')
        cidade_residencia = st.text_input("Em qual cidade voc√™ reside?:", key='cidade_residencia_denunciante_input')

        submitted = st.form_submit_button("Avan√ßar (Dados Denunciante)")

        if submitted:
            if not nome or not cidade_residencia:
                st.error("‚ùó Nome e Cidade de resid√™ncia s√£o campos obrigat√≥rios. Por favor, preencha-os.")
            else:
                st.session_state.denuncia_completa['denunciante'] = {
                    "nome": nome.strip(),
                    "idade": idade,
                    "cidade_residencia": cidade_residencia.strip()
                }
                st.success(f"Ol√°, {nome}! Dados coletados. Preparando para dados do buraco...")
                next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_method':
    st.header("--- üöß Detalhes do Buraco (Nosso Alvo!) ---")
    st.subheader("Como identificar a rua do buraco?")

    opcao_localizacao = st.radio(
        "Escolha o m√©todo:",
        ('Digitar nome manualmente', 'Buscar por CEP'),
        key='endereco_method_radio'
    )

    # Use um bot√£o para confirmar a escolha e mover para o pr√≥ximo sub-step
    if st.button("Selecionar M√©todo"):
         if opcao_localizacao == 'Digitar nome manualmente':
              st.session_state.endereco_coletado_via = 'manual' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_manual'
         elif opcao_localizacao == 'Buscar por CEP':
              st.session_state.endereco_coletado_via = 'cep' # Guarda a forma como coletamos o endere√ßo
              st.session_state.step = 'collect_buraco_address_cep'
         st.rerun()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_cep':
    st.header("--- üöß Detalhes do Buraco (Busca por CEP) ---")
    st.write("Digite o CEP do local do buraco.")

    with st.form("form_cep"):
        # Use um placeholder se veio do manual com CEP, ou vazio se for a primeira vez no CEP
        initial_cep = st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado', '')
        cep_input = st.text_input("Digite o CEP (apenas n√∫meros):", value=initial_cep, max_chars=8, key='cep_buraco_input')
        buscar_button = st.form_submit_button("Buscar CEP")

        if buscar_button:
            if not cep_input:
                st.error("‚ùó Por favor, digite um CEP.")
            else:
                dados_cep = buscar_cep(cep_input.strip())

                if 'erro' in dados_cep:
                    st.error(f"‚ùå Falha na busca por CEP: {dados_cep['erro']}")
                    st.session_state.cep_search_error = True # Marca que houve erro no CEP
                    st.session_state.dados_cep_validos = None # Limpa dados v√°lidos
                else:
                    st.session_state.dados_cep_validos = dados_cep # Armazena dados do CEP v√°lidos
                    st.session_state.cep_search_error = False # Limpa erro
                    st.success("‚úÖ Endere√ßo Encontrado (ViaCEP):")
                    st.write(f"**Rua:** {dados_cep.get('logradouro', 'N√£o informado')}")
                    st.write(f"**Bairro:** {dados_cep.get('bairro', 'N√£o informado')}")
                    st.write(f"**Cidade:** {dados_cep.get('localidade', 'N√£o informado')}")
                    st.write(f"**Estado:** {dados_cep.get('uf', 'N√£o informado')}")
                    st.write(f"**CEP:** {cep_input.strip()}")
                    st.info("Por favor, confirme se estes dados parecem corretos. Se n√£o, use o bot√£o 'Corrigir Endere√ßo Manualmente'.")
                    # Salva os dados b√°sicos do CEP no buraco_data, mas ainda pode ser corrigido
                    st.session_state.denuncia_completa['buraco'] = {
                         'endereco': {
                             'rua': dados_cep.get('logradouro', ''),
                             'bairro': dados_cep.get('bairro', ''),
                             'cidade_buraco': dados_cep.get('localidade', ''),
                             'estado_buraco': dados_cep.get('uf', '')
                         },
                         'cep_informado': cep_input.strip()
                    }
                    # For√ßar reload para exibir os bot√µes de a√ß√£o ap√≥s a busca bem-sucedida
                    st.rerun()


    # Exibe bot√µes de a√ß√£o APENAS se tentou buscar CEP
    # Verifica se o formul√°rio de busca foi processado e h√° um resultado (v√°lido ou com erro)
    if 'cep_buraco_input' in st.session_state:
        if st.session_state.get('dados_cep_validos'): # Se dados do CEP foram encontrados e s√£o v√°lidos
            st.button("Confirmar Endere√ßo e Avan√ßar", on_click=next_step)
            if st.button("Corrigir Endere√ßo Manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.rerun()

        elif st.session_state.get('cep_search_error'): # Se houve erro na busca por CEP
            st.warning("N√£o foi poss√≠vel obter o endere√ßo por CEP.")
            # Removido "Tentar novamente por CEP" pois basta digitar outro CEP no input e clicar buscar novamente
            if st.button("Digitar endere√ßo manualmente"):
                 st.session_state.endereco_coletado_via = 'manual'
                 st.session_state.step = 'collect_buraco_address_manual'
                 st.rerun()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_address_manual':
    st.header("--- üöß Detalhes do Buraco (Entrada Manual) ---")
    st.write("Digite os dados do endere√ßo do buraco manualmente.")

    # Use os dados do CEP pr√©-preenchidos se veio dessa rota, ou use o que j√° foi digitado manualmente
    endereco_inicial = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})

    with st.form("form_manual_address"):
        rua_manual = st.text_input("Nome completo da rua:", value=endereco_inicial.get('rua', ''), key='rua_manual_buraco_input')
        bairro_manual = st.text_input("Bairro onde est√° o buraco (opcional):", value=endereco_inicial.get('bairro', ''), key='bairro_manual_buraco_input')
        cidade_manual = st.text_input("Cidade onde est√° o buraco:", value=endereco_inicial.get('cidade_buraco', ''), key='cidade_manual_buraco_input')
        estado_manual = st.text_input("Estado (UF) onde est√° o buraco:", value=endereco_inicial.get('estado_buraco', ''), max_chars=2, key='estado_manual_buraco_input')

        submitted = st.form_submit_button("Avan√ßar (Endere√ßo Manual)")

        if submitted:
            if not rua_manual or not cidade_manual or not estado_manual:
                st.error("‚ùó Rua, Cidade e Estado s√£o campos obrigat√≥rios para o endere√ßo do buraco.")
            else:
                # Salva o endere√ßo manual no dicion√°rio buraco
                st.session_state.denuncia_completa['buraco'] = {
                    'endereco': {
                        'rua': rua_manual.strip(),
                        'bairro': bairro_manual.strip(),
                        'cidade_buraco': cidade_manual.strip(),
                        'estado_buraco': estado_manual.strip().upper()
                    },
                    # Mant√©m o CEP se ele foi informado na etapa anterior, mesmo usando entrada manual agora
                    'cep_informado': st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado', '')
                }
                next_step() # Move para a pr√≥xima etapa (coleta de detalhes + foto + localiza√ß√£o exata)

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'collect_buraco_details':
    st.header("--- üöß Detalhes Finais do Buraco ---")
    st.subheader("Informa√ß√µes cruciais para a localiza√ß√£o, an√°lise e reparo!")

    # Exibe o endere√ßo b√°sico j√° coletado para refer√™ncia
    endereco_basico = st.session_state.denuncia_completa.get('buraco', {}).get('endereco', {})
    st.write(f"**Endere√ßo Base:** Rua {endereco_basico.get('rua', 'N√£o informada')}, {endereco_basico.get('cidade_buraco', 'N√£o informada')} - {endereco_basico.get('estado_buraco', 'N√£o informado')}")
    if endereco_basico.get('bairro'):
         st.write(f"**Bairro:** {endereco_basico.get('bairro')}")
    if st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado'):
         st.write(f"**CEP informado:** {st.session_state.denuncia_completa.get('buraco', {}).get('cep_informado')}")

    st.markdown("---")

    with st.form("form_buraco_details_structured"):
        st.subheader("Detalhes Estruturados do Buraco")

        col1, col2 = st.columns(2)

        with col1:
            tamanho = st.radio(
                "**Tamanho Estimado:**",
                ['N√£o Informado', 'Pequeno (Cabe uma bola de futebol)', 'M√©dio (Cabe um pneu de carro)', 'Grande (Cabe uma pessoa sentada)', 'Enorme (Cobre a faixa)', 'Cr√≠tico (Cratera, afeta m√∫ltiplos ve√≠culos)'],
                key='tamanho_buraco'
            )
            profundidade = st.radio(
                "**Profundidade Estimada:**",
                ['N√£o Informado', 'Raso (D√° um susto, n√£o danifica)', 'M√©dio (Pode furar pneu ou danificar suspens√£o)', 'Fundo (Causa dano consider√°vel, pode entortar roda)', 'Muito Fundo (Causa acidentes graves, imobiliza ve√≠culo)'],
                key='profundidade_buraco'
            )
            presenca_agua = st.radio(
                 "**Presen√ßa de √Ågua/Alagamento:**",
                 ['N√£o Informado', 'Sim (Acumula √°gua)', 'N√£o (Est√° seco)'],
                 key='agua_buraco'
            )

        with col2:
             perigo = st.radio(
                 "**N√≠vel de Perigo Aparente:**",
                 ['N√£o Informado', 'Baixo (Principalmente est√©tico)', 'M√©dio (Pode causar dano menor)', 'Alto (Risco de acidente s√©rio ou dano significativo)', 'Alt√≠ssimo (Risco grave e iminente, acidentes frequentes)'],
                 key='perigo_buraco'
             )
             contexto = st.selectbox(
                 "**Contexto ou Hist√≥rico do Local:**",
                 ['N√£o Informado', 'Via de Alto Tr√°fego', 'Via de Baixo Tr√°fego', 'Perto de Escola/Hospital', 'Em Curva', 'Na Esquina', 'Em Subida/Descida', 'Pouca Ilumina√ß√£o', 'Problema Recorrente', 'Obra Recente na Regi√£o'],
                 key='contexto_buraco'
             )
             perigos_detalhados = st.multiselect(
                 "**Perigos e Impactos Detalhados (Selecione todos que se aplicam):**",
                 ['Risco para Carros (Pneu/Suspens√£o/Roda)', 'Risco para Motos/Bikes', 'Risco para Pedestres', 'Dificulta Desvio', 'Perigoso √† Noite', 'Perigoso na Chuva', 'Causa Lentid√£o no Tr√¢nsito', 'J√° Causou Acidentes (Se souber)'],
                 key='perigos_detalhados_buraco'
             )


        identificadores_visuais = st.text_input(
             "**Identificadores Visuais Adicionais Pr√≥ximos (Ex: Em frente ao poste X, perto da √°rvore Y):**",
             key='identificadores_visuais_buraco'
        )

        # Este input √© movido para c√°, pois √© crucial para Geocoding e localiza√ß√£o
        numero_proximo = st.text_input(
             "**N√∫mero do im√≥vel mais pr√≥ximo ou ponto de refer√™ncia (ESSENCIAL para precis√£o! Ex: 'Em frente ao 123', 'Esquina c/ Rua X'):**",
             key='numero_proximo_buraco' # Mant√©m a chave original
        )
        lado_rua = st.text_input(
             "**Lado da rua onde est√° o buraco (Ex: 'lado par', 'lado √≠mpar', 'lado direito', 'lado esquerdo'):**",
             key='lado_rua_buraco' # Mant√©m a chave original
        )


        st.markdown("---")
        st.subheader("Observa√ß√µes Adicionais (Texto Libre)")
        observacoes_adicionais = st.text_area(
            "Qualquer outra informa√ß√£o relevante sobre o buraco ou o local (Hist√≥rico, chuva recente, etc.):",
            key='observacoes_adicionais_buraco'
        )

        st.markdown("---")
        st.subheader("Adicionar Foto do Buraco")
        st.write("Anexe uma foto n√≠tida do buraco (JPG, PNG). A IA Gemini Vision pode analisar a imagem para complementar a den√∫ncia!")
        st.info("üí° Dica: Tire a foto de um √¢ngulo que mostre o tamanho e profundidade do buraco, e tamb√©m inclua um pouco do entorno (cal√ßada, postes, refer√™ncias) para ajudar a IA e as equipes de reparo a localizarem.")
        uploaded_image = st.file_uploader("Escolha uma imagem...", type=["jpg", "jpeg", "png"], key='uploader_buraco_image')

        if uploaded_image is not None:
             # Read image as bytes here, when the file is uploaded
             st.session_state.uploaded_image = uploaded_image.getvalue()
             try:
                 # To display, open from bytes using PIL
                 img_display = Image.open(io.BytesIO(st.session_state.uploaded_image))
                 st.image(img_display, caption="Foto do buraco carregada.", use_column_width=True)
             except Exception as e:
                  st.error(f"‚ùå Erro ao carregar a imagem para exibi√ß√£o: {e}")
                  st.session_state.uploaded_image = None # Clear state if display fails


        st.markdown("---")
        st.subheader("üìç Localiza√ß√£o Exata (Coordenadas ou Descri√ß√£o)")
        st.info("A MELHOR forma de garantir que o reparo v√° ao local exato √© fornecer Coordenadas (Lat,Long) ou um Link do Google Maps que as contenha. Tente obter isso tocando/clicando e segurando no local exato do buraco no Google Maps.")

        # --- Tentar Geocodifica√ß√£o Autom√°tica ao submeter ---
        # A geocodifica√ß√£o e a coleta manual de localiza√ß√£o exata agora acontecem AP√ìS submeter este formul√°rio
        # Movemos o input de localiza√ß√£o manual para dentro deste formul√°rio para simplificar o fluxo.

        # Input de localiza√ß√£o manual (aparece sempre, mas o processamento depende do sucesso da geocodifica√ß√£o)
        localizacao_manual_input = st.text_input(
             "Alternativamente, ou para corrigir a Geocodifica√ß√£o, insira COORDENADAS (Lat,Long), LINK do Maps com Coordenadas, OU DESCRI√á√ÉO Detalhada EXATA:",
             key='localizacao_manual_input'
        )


        submitted_details = st.form_submit_button("Finalizar Coleta e Analisar Den√∫ncia!")

        if submitted_details:
            if not numero_proximo or not lado_rua: # Valida√ß√£o para campos movidos
                 st.error("‚ùó N√∫mero pr√≥ximo/refer√™ncia e Lado da rua s√£o campos obrigat√≥rios.")
                 # Recarrega o formul√°rio sem avan√ßar
                 st.stop() # Stop further execution until inputs are corrected and form is resubmitted

            # Armazena os detalhes estruturados e observa√ß√µes no dicion√°rio buraco
            st.session_state.denuncia_completa['buraco'].update({
                'numero_proximo': numero_proximo.strip(), # Salvando campos movidos
                'lado_rua': lado_rua.strip(), # Salvando campos movidos
                'structured_details': {
                     'tamanho': tamanho,
                     'perigo': perigo,
                     'profundidade': profundidade,
                     'presenca_agua': presenca_agua,
                     'contexto': contexto,
                     'perigos_detalhados': perigos_detalhados,
                     'identificadores_visuais': identificadores_visuais.strip(),
                },
                'observacoes_adicionais': observacoes_adicionais.strip(),
                # A imagem j√° est√° no st.session_state.uploaded_image (bytes)
            })

            st.subheader("Processando Localiza√ß√£o Exata...")

            st.session_state.denuncia_completa['localizacao_exata_processada'] = {"tipo": "N√£o informada"} # Reseta localiza√ß√£o processada
            tentou_geocodificar = False
            geocodificacao_sucesso = False
            motivo_falha_geo = ""
            lat_final: Optional[float] = None
            lon_final: Optional[float] = None
            link_maps_final: Optional[str] = None
            embed_link_final: Optional[str] = None


            # --- Tentar Geocodifica√ß√£o Autom√°tica Primeiro ---
            rua_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('rua')
            cidade_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('cidade_buraco')
            estado_buraco = st.session_state.denuncia_completa['buraco']['endereco'].get('estado_buraco')
            numero_proximo_geo = st.session_state.denuncia_completa['buraco'].get('numero_proximo') # Usa o numero_proximo para geocoding

            tem_dados_para_geo = (st.session_state.geocoding_api_key and rua_buraco and numero_proximo_geo and cidade_buraco and estado_buraco)

            if tem_dados_para_geo:
                st.info("‚úÖ Chave de Geocodifica√ß√£o e dados b√°sicos de endere√ßo completos encontrados. Tentando gerar a localiza√ß√£o exata automaticamente...")
                tentou_geocodificar = True
                with st.spinner("‚è≥ Chamando Google Maps Geocoding API..."):
                    geo_resultado = geocodificar_endereco(
                        rua_buraco,
                        numero_proximo_geo.strip(),
                        cidade_buraco,
                        estado_buraco,
                        st.session_state.geocoding_api_key
                    )

                if 'erro' not in geo_resultado:
                    geocodificacao_sucesso = True
                    lat_final = geo_resultado['latitude']
                    lon_final = geo_resultado['longitude']
                    link_maps_final = geo_resultado['google_maps_link_gerado']
                    embed_link_final = geo_resultado.get('google_embed_link_gerado')
                    st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                        "tipo": "Geocodificada (API)",
                        "latitude": lat_final,
                        "longitude": lon_final,
                        "endereco_formatado_api": geo_resultado.get('endereco_formatado_api', ''),
                        "google_maps_link_gerado": link_maps_final,
                        "google_embed_link_gerado": embed_link_final
                    }
                    st.success("‚úÖ Localiza√ß√£o Obtida (via Geocodifica√ß√£o Autom√°tica)!")
                else:
                    st.warning(f"‚ùå Falha na Geocodifica√ß√£o autom√°tica: {geo_resultado['erro']}")
                    motivo_falha_geo = f"Erro da API de Geocodifica√ß√£o: {geo_resultado.get('erro', 'Motivo desconhecido')}"
            elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                st.warning("‚ö†Ô∏è AVISO: Chave de Geocodifica√ß√£o fornecida, mas dados de endere√ßo insuficientes (precisa de Rua, N√∫mero Pr√≥ximo, Cidade, Estado). Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                motivo_falha_geo = "Dados insuficientes para Geocodifica√ß√£o (requer Rua, N√∫mero Pr√≥ximo, Cidade, Estado)."
            elif not st.session_state.geocoding_api_key:
                st.warning("‚ö†Ô∏è Chave de API de Geocodifica√ß√£o NON_PROVIDED. Geocodifica√ß√£o autom√°tica N√ÉO tentada.")
                motivo_falha_geo = "Chave de API de Geocodifica√ß√£o n√£o fornecida."

            # --- Processar Localiza√ß√£o Manual (se fornecida E Geocoding falhou ou n√£o tentada) ---
            # O input 'localizacao_manual_input' j√° est√° no estado da sess√£o pois foi um widget no form
            input_original_manual = st.session_state.get('localizacao_manual_input', '').strip()

            if not geocodificacao_sucesso and input_original_manual:
                 st.info("‚è≥ Processando input manual de localiza√ß√£o...")
                 # Tentar extrair coordenadas do input manual
                 lat_manual: Optional[float] = None
                 lon_manual: Optional[float] = None
                 tipo_manual_processado = "Descri√ß√£o Manual Detalhada"

                 match_coords = re.search(r'(-?\d+\.?\d*)[,\s/]+(-?\d+\.?\d*)', input_original_manual)
                 if match_coords:
                     try:
                         teste_lat = float(match_coords.group(1))
                         teste_lon = float(match_coords.group(2))
                         if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                             lat_manual = teste_lat
                             lon_manual = teste_lon
                             tipo_manual_processado = "Coordenadas Fornecidas/Extra√≠das Manualmente"
                             st.info("‚úÖ Coordenadas v√°lidas detectadas no input manual!")
                         else:
                             st.warning("‚ö†Ô∏è Parece um formato de coordenadas no input manual, mas fora da faixa esperada. Tratando como descri√ß√£o.")
                     except ValueError:
                         st.info("‚ÑπÔ∏è Input manual n√£o parece ser coordenadas v√°lidas. Tratando como descri√ß√£o detalhada.")
                     except Exception as e:
                          st.info(f"‚ÑπÔ∏è Ocorreu um erro ao tentar processar as coordenadas/link no input manual: {e}. Tratando como descri√ß√£o.")
                 elif input_original_manual.startswith("http"):
                      st.info("‚ÑπÔ∏è Input manual √© um link. Tentando extrair coordenadas (sujeito a formato do link)...")
                      match_maps_link = re.search(r'/@(-?\d+\.?\d*),(-?\d+\.?\d*)', input_original_manual)
                      if match_maps_link:
                          try:
                              teste_lat = float(match_maps_link.group(1))
                              teste_lon = float(match_maps_link.group(2))
                              if -90 <= teste_lat <= 90 and -180 <= teste_lon <= 180:
                                   lat_manual = teste_lat
                                   lon_manual = teste_lon
                                   tipo_manual_processado = "Coordenadas Extra√≠das de Link (Manual)"
                                   st.info("‚úÖ Coordenadas extra√≠das de link do Maps no input manual!")
                              else:
                                   st.warning("‚ö†Ô∏è Coordenadas extra√≠das do link no input manual fora da faixa esperada. Tratando como descri√ß√£o.")
                          except ValueError:
                             st.info("‚ÑπÔ∏è Valores no link n√£o parecem coordenadas v√°lidas. Tratando como descri√ß√£o.")
                          except Exception as e:
                               st.info(f"‚ÑπÔ∏è Ocorreu um erro ao tentar processar o link no input manual: {e}. Tratando como descri√ß√£o.")
                      else:
                           st.info("‚ÑπÔ∏è N√£o foi poss√≠vel extrair coordenadas reconhec√≠veis do link fornecido manualmente.")
                 else:
                      st.info("‚ÑπÔ∏è Input manual n√£o detectado como coordenadas ou link. Tratando como descri√ß√£o detalhada.")

                 # Se coordenadas foram extra√≠das do input manual, elas substituem as da geocodifica√ß√£o (se houve, mas falhou)
                 if lat_manual is not None and lon_manual is not None:
                     lat_final = lat_manual
                     lon_final = lon_manual
                     link_maps_final = f"https://www.google.com/maps/search/?api=1&query={lat_final},{lon_final}"
                     # Tenta gerar link embed APENAS se tiver a chave Geocoding (necess√°ria para o Embed API)
                     embed_link_final = f"https://www.google.com/maps/embed/v1/place?key={st.session_state.geocoding_api_key}&q={lat_final},{lon_final}" if st.session_state.geocoding_api_key else None

                     st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                          "tipo": tipo_manual_processado,
                          "input_original": input_original_manual,
                          "latitude": lat_final,
                          "longitude": lon_final,
                          "google_maps_link_gerado": link_maps_final,
                          "google_embed_link_gerado": embed_link_final
                     }
                     if st.session_state.geocoding_api_key and embed_link_final is None:
                          st.warning("‚ö†Ô∏è N√£o foi poss√≠vel gerar o link Google Maps Embed com a chave fornecida. Verifique se a 'Maps Embed API' est√° habilitada e autorizada para sua chave no Google Cloud.")

                 # Se n√£o extraiu coordenadas do input manual (√© s√≥ descri√ß√£o ou formato irreconhec√≠vel)
                 elif input_original_manual:
                      st.session_state.denuncia_completa['localizacao_exata_processada'] = {
                           "tipo": "Descri√ß√£o Manual Detalhada",
                           "input_original": input_original_manual,
                           "descricao_manual": input_original_manual
                      }
                      st.warning("‚ö†Ô∏è Nenhuma localiza√ß√£o exata estruturada (coordenadas ou link) foi detectada no input manual. O relat√≥rio depender√° apenas dos detalhes estruturados, observa√ß√µes e endere√ßo base.")

                 # else: Input manual estava vazio, localizacao_exata_processada continua como "N√£o informada"

            # --- Garante que o motivo da falha da geocodifica√ß√£o autom√°tica seja registrado se ela foi tentada ---
            if tentou_geocodificar and not geocodificacao_sucesso:
                 st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = motivo_falha_geo
            elif not st.session_state.geocoding_api_key:
                 st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Chave de API de Geocodifica√ß√£o n√£o fornecida."
            elif st.session_state.geocoding_api_key and not tem_dados_para_geo:
                 st.session_state.denuncia_completa['localizacao_exata_processada']['motivo_falha_geocodificacao_anterior'] = "Dados insuficientes para Geocodifica√ß√£o (requer Rua, N√∫mero Pr√≥ximo, Cidade, Estado)."


            # --- Obter Imagem Street View (se houver coordenadas e chave) ---
            st.session_state.streetview_image_data = {"erro": "Imagem Street View n√£o obtida."} # Reseta
            # Tenta obter Street View APENAS se coordenadas FINAIS (geocodificadas ou manuais) estiverem dispon√≠veis
            if lat_final is not None and lon_final is not None and st.session_state.geocoding_api_key:
                 st.info("üì∏ Tentando obter imagem Street View para as coordenadas...")
                 # Chama a fun√ß√£o Street View (√© cacheada por lat/lon/chave/size/heading)
                 with st.spinner("‚è≥ Chamando Google Street View Static API..."):
                      st.session_state.streetview_image_data = get_street_view_image(
                          lat_final,
                          lon_final,
                          st.session_state.geocoding_api_key
                          # O heading (0) √© um chute. Poder√≠amos adicionar um input para o usu√°rio ajustar.
                          # Ou tentar m√∫ltiplos headings (0, 90, 180, 270) e mostrar uma galeria.
                          # Para manter simples agora, usamos heading 0.
                      )
                 if 'image_bytes' in st.session_state.streetview_image_data:
                      st.success("‚úÖ Imagem Street View obtida com sucesso!")
                 elif 'erro' in st.session_state.streetview_image_data:
                      st.warning(f"‚ö†Ô∏è Falha ao obter imagem Street View: {st.session_state.streetview_image_data['erro']}")
                      # Nota importante: A API Street View Static precisa ser habilitada no Google Cloud Console.
                      if "not authorized" in st.session_state.streetview_image_data['erro'].lower():
                           st.error("‚ùå Erro de autoriza√ß√£o na Street View Static API. Verifique se a 'Street View Static API' est√° habilitada e autorizada para sua chave no Google Cloud.")
                      elif "Sem cobertura" in st.session_state.streetview_image_data['erro']:
                           st.info("‚ÑπÔ∏è √â poss√≠vel que n√£o haja cobertura Street View no local exato fornecido.")


            elif not st.session_state.geocoding_api_key:
                 st.warning("‚ö†Ô∏è Chave de API de Geocodifica√ß√£o/Street View n√£o fornecida. Imagem Street View n√£o obtida.")
                 st.session_state.streetview_image_data['erro'] = "Chave de API de Geocodifica√ß√£o/Street View n√£o fornecida."
            elif lat_final is None or lon_final is None:
                 st.info("‚ÑπÔ∏è Coordenadas exatas n√£o dispon√≠veis. Imagem Street View n√£o pode ser obtida.")
                 st.session_state.streetview_image_data['erro'] = "Coordenadas exatas n√£o dispon√≠veis."


            # Agora que a localiza√ß√£o, Street View e imagem do usu√°rio foram processadas/coletadas,
            # avan√ßamos para a etapa de processamento das an√°lises de IA.
            next_step()

    st.button("Voltar", on_click=prev_step)


elif st.session_state.step == 'processing_ia':
    st.header("--- üß† Processamento Rob√≥tico de IA ---")
    st.write("Por favor, aguarde enquanto o Krateras analisa todos os dados (texto, imagem) e gera o relat√≥rio com a intelig√™ncia do Google Gemini.")

    # Verifica se o modelo Gemini (texto ou vis√£o) est√° dispon√≠vel antes de processar
    gemini_available = st.session_state.gemini_pro_model or st.session_state.gemini_vision_model

    # Inicializa resultados IA com valores padr√£o (se ainda n√£o definidos em runs anteriores)
    if 'image_analysis_ia' not in st.session_state.denuncia_completa:
         st.session_state.denuncia_completa['image_analysis_ia'] = {"image_analysis": "An√°lise de imagem via IA indispon√≠vel."}
    if 'insights_ia' not in st.session_state.denuncia_completa:
         st.session_state.denuncia_completa['insights_ia'] = {"insights": "An√°lise detalhada via IA indispon√≠vel."}
    if 'urgencia_ia' not in st.session_state.denuncia_completa:
         st.session_state.denuncia_completa['urgencia_ia'] = {"urgencia_ia": "Sugest√£o de urg√™ncia via IA indispon√≠vel."}
    if 'sugestao_acao_ia' not in st.session_state.denuncia_completa:
         st.session_state.denuncia_completa['sugestao_acao_ia'] = {"sugestao_acao_ia": "Sugest√µes de causa/a√ß√£o via IA indispon√≠veis."}
    if 'resumo_ia' not in st.session_state.denuncia_completa:
         st.session_state.denuncia_completa['resumo_ia'] = {"resumo_ia": "Resumo completo via IA indispon√≠vel."}


    # Executa an√°lises de IA SOMENTE se os modelos estiverem dispon√≠veis
    if st.session_state.gemini_vision_model and st.session_state.get('uploaded_image'):
         # 1. An√°lise de Imagem (se houver imagem do usu√°rio e modelo Vision)
         st.info("üß† Analisando a imagem do buraco com IA Gemini Vision...")
         # Chamar a fun√ß√£o de an√°lise de imagem (N√ÉO cacheada)
         st.session_state.denuncia_completa['image_analysis_ia'] = analyze_image_with_gemini_vision(st.session_state.uploaded_image, st.session_state.gemini_vision_model)
         # A exibi√ß√£o dos resultados IA ocorre no relat√≥rio final

    if st.session_state.gemini_pro_model:
         buraco_data = st.session_state.denuncia_completa.get('buraco', {})
         image_analysis_result_for_text_model = st.session_state.denuncia_completa.get('image_analysis_ia', {}) # Passa o resultado da an√°lise de imagem

         # 2. An√°lise de Texto/Dados Consolidados (se modelo Pro)
         st.info("üß† Executando an√°lise profunda dos dados do buraco com IA Gemini (Texto)...")
         st.session_state.denuncia_completa['insights_ia'] = analisar_dados_com_gemini(
             buraco_data,
             image_analysis_result_for_text_model, # Passa o resultado da an√°lise de imagem
             st.session_state.gemini_pro_model
         )

         # 3. Sugest√£o de urg√™ncia (usa todos os dados e insights)
         st.info("üß† Calculando o N√≠vel de Prioridade Rob√≥tica para esta den√∫ncia...")
         st.session_state.denuncia_completa['urgencia_ia'] = categorizar_urgencia_gemini(
             st.session_state.denuncia_completa, # Passa o dicion√°rio completo
             st.session_state.gemini_pro_model
        )

         # 4. Sugest√£o de causa e a√ß√£o (usa todos os dados e insights)
         st.info("üß† IA est√° pensando... Qual pode ser a causa e a melhor a√ß√£o para este buraco?")
         st.session_state.denuncia_completa['sugestao_acao_ia'] = sugerir_causa_e_acao_gemini(
             st.session_state.denuncia_completa, # Passa o dicion√°rio completo
             st.session_state.gemini_pro_model
        )

         # 5. Gera√ß√£o do resumo (usa todos os dados coletados e resultados das IAs)
         st.info("üß† Compilando o Relat√≥rio Final Rob√≥tico e Inteligente com IA Gemini...")
         st.session_state.denuncia_completa['resumo_ia'] = gerar_resumo_completo_gemini(
             st.session_state.denuncia_completa, # Passa o dicion√°rio completo
             st.session_state.gemini_pro_model
        )


    if st.session_state.gemini_pro_model or st.session_state.gemini_vision_model:
        st.success("‚úÖ An√°lises de IA conclu√≠das!")
    else:
        st.warning("‚ö†Ô∏è Nenhuma an√°lise de IA foi executada (Modelos Gemini n√£o configurados ou indispon√≠veis).")

    # Avan√ßa para exibir o relat√≥rio AP√ìS TODAS as chamadas de API e IA processarem
    next_step()


elif st.session_state.step == 'show_report':
    st.header("üìä RELAT√ìRIO FINAL DA DEN√öNCIA KRATERAS üìä")
    st.write("‚úÖ MISS√ÉO KRATERAS CONCLU√çDA! RELAT√ìRIO GERADO. ‚úÖ")

    dados_completos = st.session_state.denuncia_completa
    denunciante = dados_completos.get('denunciante', {})
    buraco = dados_completos.get('buraco', {})
    endereco = buraco.get('endereco', {})
    structured_details = buraco.get('structured_details', {})
    observacoes_adicionais = buraco.get('observacoes_adicionais', 'Nenhuma observa√ß√£o adicional fornecida.')
    localizacao_exata = dados_completos.get('localizacao_exata_processada', {})

    image_analysis_ia = dados_completos.get('image_analysis_ia', {})
    insights_ia = dados_completos.get('insights_ia', {})
    urgencia_ia = dados_completos.get('urgencia_ia', {})
    sugestao_acao_ia = dados_completos.get('sugestao_acao_ia', {})
    resumo_ia = dados_completos.get('resumo_ia', {})
    streetview_image_data = dados_completos.get('streetview_image_data', {}) # Dados da imagem Street View

    st.markdown("---")

    # Exibir todas as etapas em expanders abertos por padr√£o
    with st.expander("üë§ Dados do Denunciante", expanded=True):
        st.write(f"**Nome:** {denunciante.get('nome', 'N√£o informado')}")
        st.write(f"**Idade:** {denunciante.get('idade', 'N√£o informado')}")
        st.write(f"**Cidade de Resid√™ncia:** {denunciante.get('cidade_residencia', 'N√£o informada')}")

    with st.expander("üöß Dados do Buraco Coletados", expanded=True):
        st.subheader("Endere√ßo Base")
        st.write(f"**Rua:** {endereco.get('rua', 'N√£o informada')}")
        if buraco.get('numero_proximo'):
            st.write(f"**Refer√™ncia/N√∫mero Pr√≥ximo:** {buraco.get('numero_proximo')}")
        if endereco.get('bairro'):
            st.write(f"**Bairro:** {endereco.get('bairro')}")
        if endereco.get('cidade_buraco'):
             st.write(f"**Cidade do Buraco:** {endereco.get('cidade_buraco')}")
        if endereco.get('estado_buraco'):
            st.write(f"**Estado do Buraco:** {endereco.get('estado_buraco')}")
        if buraco.get('cep_informado'):
            st.write(f"**CEP Informado:** {buraco.get('cep_informado')}")
        st.write(f"**Lado da Rua:** {buraco.get('lado_rua', 'N√£o informado')}")

        st.subheader("Detalhes Estruturados Preenchidos")
        if structured_details:
            # Filtrar os detalhes que n√£o foram informados para n√£o poluir o relat√≥rio
            informed_details = {k: v for k, v in structured_details.items() if v and (not isinstance(v, list) or v)}
            if informed_details:
                 # Exibir os detalhes informados de forma limpa
                 for key, value in informed_details.items():
                      key_translated = {
                         'tamanho': 'Tamanho Estimado',
                         'perigo': 'N√≠vel de Perigo',
                         'profundidade': 'Profundidade Estimada',
                         'presenca_agua': 'Presen√ßa de √Ågua/Alagamento',
                         'contexto': 'Contexto ou Hist√≥rico',
                         'perigos_detalhados': 'Perigos e Impactos Detalhados',
                         'identificadores_visuais': 'Identificadores Visuais Adicionais',
                      }.get(key, key)
                      value_str = ", ".join(value) if isinstance(value, list) else value
                      st.write(f"**{key_translated}:** {value_str}")
            else:
                 st.info("Nenhum detalhe estruturado foi informado.")
        else:
            st.info("Detalhes estruturados n√£o foram coletados.")

        st.subheader("Observa√ß√µes Adicionais (Texto Libre)")
        st.info(observacoes_adicionais if observacoes_adicionais else "Nenhuma observa√ß√£o adicional fornecida.")

        st.subheader("Foto Anexada pelo Usu√°rio")
        if st.session_state.get('uploaded_image'):
             try:
                 # Display image from bytes
                 img_display = Image.open(io.BytesIO(st.session_state.uploaded_image))
                 st.image(img_display, caption="Foto do buraco anexada.", use_column_width=True)
             except Exception as e:
                  st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel exibir a imagem anexada. Erro: {e}")
        else:
            st.info("Nenhuma foto foi anexada a esta den√∫ncia pelo usu√°rio.")


    with st.expander("üìç Localiza√ß√£o Exata Processada e Visualiza√ß√µes", expanded=True):
        tipo_loc = localizacao_exata.get('tipo', 'N√£o informada')
        st.write(f"**Tipo de Coleta/Processamento:** {tipo_loc}")

        lat = localizacao_exata.get('latitude')
        lon = localizacao_exata.get('longitude')

        if lat is not None and lon is not None:
             st.write(f"**Coordenadas:** `{lat}, {lon}`")

             # --- Visualiza√ß√£o Street View ---
             st.subheader("Visualiza√ß√£o Google Street View Est√°tica")
             if 'image_bytes' in streetview_image_data:
                  try:
                       # Display Street View image from bytes
                       st.image(streetview_image_data['image_bytes'], caption="Imagem Google Street View.", use_column_width=True)
                       st.info("‚úÖ Imagem Street View obtida com sucesso.")
                  except Exception as e:
                       st.error(f"‚ùå Erro ao exibir a imagem Street View: {e}")
             elif 'erro' in streetview_image_data:
                  st.warning(f"‚ö†Ô∏è Falha ao obter imagem Street View: {streetview_image_data['erro']}")
             else:
                  st.info("‚ÑπÔ∏è Tentativa de obter imagem Street View n√£o realizada ou sem resultado.")

             # --- Visualiza√ß√£o no Mapa OpenStreetMap ---
             st.subheader("Visualiza√ß√£o no Mapa (OpenStreetMap/MapLibre)")
             try:
                 # Tenta usar st.map se coordenadas v√°lidas (N√£o precisa de chave Google)
                 map_data = pd.DataFrame({'lat': [lat], 'lon': [lon]})
                 st.map(map_data, zoom=18, use_container_width=True)
                 st.info("‚ÑπÔ∏è O mapa acima √© uma representa√ß√£o aproximada usando MapLibre/OpenStreetMap.")
             except Exception as map_error:
                 st.error(f"‚ùå Erro ao gerar visualiza√ß√£o do mapa OpenStreetMap/MapLibre: {map_error}")

             # --- Visualiza√ß√£o no Google Maps Embed ---
             st.subheader("Visualiza√ß√£o no Google Maps (Embed)")
             embed_link = localizacao_exata.get('google_embed_link_gerado')
             if embed_link:
                 try:
                     st.components.v1.html(
                         f'<iframe width="100%" height="450" frameborder="0" style="border:0" src="{embed_link}" allowfullscreen></iframe>',
                         height=470,
                         scrolling=False
                     )
                     st.info("‚úÖ Visualiza√ß√£o do Google Maps Embed carregada (requer API habilitada e autorizada).")
                 except Exception as embed_error:
                      st.error(f"‚ùå Erro ao carregar visualiza√ß√£o do Google Maps Embed: {embed_error}")
                      st.warning("‚ö†Ô∏è A visualiza√ß√£o do Google Maps Embed requer que a 'Maps Embed API' esteja habilitada e autorizada para sua chave de API Geocoding no Google Cloud.")
             elif st.session_state.geocoding_api_key:
                  st.warning("‚ö†Ô∏è Chave de API Geocoding fornecida, mas n√£o foi poss√≠vel gerar o link Google Maps Embed ou carreg√°-lo. Verifique se a 'Maps Embed API' est√° habilitada e autorizada para sua chave no Google Cloud.")
             else:
                  st.warning("‚ö†Ô∏è Chave de API Geocoding n√£o fornecida. Visualiza√ß√£o Google Maps Embed n√£o dispon√≠vel.")


             link_maps = localizacao_exata.get('google_maps_link_gerado')
             if link_maps:
                 st.write(f"**Link Direto Google Maps:** [Abrir no Google Maps]({link_maps})")

             if localizacao_exata.get('endereco_formatado_api'):
                  st.write(f"**Endere√ßo Formatado (API):** {localizacao_exata.get('endereco_formatado_api')}")
             if localizacao_exata.get('input_original') and tipo_loc != 'Descri√ß√£o Manual Detalhada':
                  st.write(f"(Input Original para Localiza√ß√£o Exata: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")


        elif tipo_loc == 'Descri√ß√£o Manual Detalhada':
            st.write(f"**Descri√ß√£o Manual da Localiza√ß√£o:**")
            st.info(localizacao_exata.get('descricao_manual', 'N√£o informada'))
            if localizacao_exata.get('input_original'):
                st.write(f"(Input Original: `{localizacao_exata.get('input_original', 'N√£o informado')}`)")

        else:
            st.warning("Localiza√ß√£o exata n√£o coletada de forma estruturada (coordenadas/link/descri√ß√£o manual detalhada).")

        # Inclui motivo da falha na geocodifica√ß√£o se aplic√°vel
        if localizacao_exata.get('motivo_falha_geocodificacao_anterior'):
             st.info(f"‚ÑπÔ∏è Nota: N√£o foi poss√≠vel obter a localiza√ß√£o exata via Geocodifica√ß√£o autom√°tica. Motivo: {localizacao_exata.get('motivo_falha_geocodificacao_anterior')}")

    st.markdown("---")

    # Exibir an√°lises de IA (se os modelos estavam dispon√≠veis)
    if st.session_state.gemini_pro_model or st.session_state.gemini_vision_model:

        with st.expander("üß† An√°lise de Imagem (IA Gemini Vision)", expanded=True):
             st.write(image_analysis_ia.get('image_analysis', 'An√°lise n√£o realizada, sem imagem ou com erro.'))
             if st.session_state.gemini_vision_model is None:
                  st.info("‚ÑπÔ∏è Motor Gemini Vision indispon√≠vel.")

        with st.expander("üß† An√°lise Detalhada Consolidada (IA Gemini Texto)", expanded=True):
            st.write(insights_ia.get('insights', 'An√°lise n√£o realizada ou com erro.'))
            if st.session_state.gemini_pro_model is None:
                 st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")


        with st.expander("üö¶ Sugest√£o de Urg√™ncia (IA Gemini Texto)", expanded=True):
            st.write(urgencia_ia.get('urgencia_ia', 'Sugest√£o de urg√™ncia n√£o gerada ou com erro.'))
            if st.session_state.gemini_pro_model is None:
                 st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")


        with st.expander("üõ†Ô∏è Sugest√µes de Causa e A√ß√£o (IA Gemini Texto)", expanded=True):
            st.write(sugestao_acao_ia.get('sugestao_acao_ia', 'Sugest√µes n√£o geradas ou com erro.'))
            if st.session_state.gemini_pro_model is None:
                 st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")

        st.markdown("---")
        st.subheader("üìú Resumo Narrativo Inteligente (IA Gemini Texto)")
        st.write(resumo_ia.get('resumo_ia', 'Resumo n√£o gerado ou com erro.'))
        if st.session_state.gemini_pro_model is None:
             st.info("‚ÑπÔ∏è Motor Gemini Texto indispon√≠vel.")


    else:
        st.warning("‚ö†Ô∏è An√°lises e Resumo da IA n√£o dispon√≠veis (Chaves Gemini n√£o configuradas ou modelos indispon√≠veis).")


    st.markdown("---")
    st.write("Esperamos que este relat√≥rio ajude a consertar o buraco!")

    # Op√ß√£o para reiniciar o processo
    if st.button("Iniciar Nova Den√∫ncia", key='new_denuncia_button'):
        # Limpa o estado da sess√£o para recome√ßar
        for key in st.session_state.keys():
            # Mant√©m as chaves de API e modelos cacheada, pois n√£o mudam por sess√£o do app
            if key not in ['geocoding_api_key', 'gemini_pro_model', 'gemini_vision_model', 'api_keys_loaded']:
                 del st.session_state[key]
        st.rerun()

    # Op√ß√£o para exibir dados brutos (√∫til para debug ou exporta√ß√£o)
    with st.expander("üîå Ver Dados Brutos da Den√∫ncia (JSON)"):
        # Remover bytes da imagem do Street View e do upload para evitar erros de serializa√ß√£o JSON
        dados_para_json = dados_completos.copy()
        if 'streetview_image_data' in dados_para_json and 'image_bytes' in dados_para_json['streetview_image_data']:
             # Cria uma c√≥pia do dicion√°rio streetview_image_data removendo a chave 'image_bytes'
             streetview_data_clean = dados_para_json['streetview_image_data'].copy()
             del streetview_data_clean['image_bytes']
             dados_para_json['streetview_image_data'] = streetview_data_clean
             dados_para_json['streetview_image_data']['note'] = "image_bytes_removed_for_json_view"


        if 'uploaded_image' in dados_para_json and dados_para_json['uploaded_image'] is not None:
             dados_para_json['uploaded_image'] = "image_bytes_removed_for_json_view"

        st.json(dados_para_json)
